{
  "id": 206650,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMDY2NTA=",
  "url": "https://hackerone.com/reports/206650",
  "title": "Broken Authentication - Security token gets captured via man in the middle attack",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2017-02-15T15:12:23.399Z",
  "submitted_at": "2017-02-15T15:12:23.399Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "saurabhb",
    "url": "/saurabhb",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/065/085/b14379cd81c972748951b6dd4d78f6f1dd3987d1_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 111,
    "url": "https://hackerone.com/automattic",
    "handle": "automattic",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Automattic",
      "twitter_handle": "",
      "website": "https://automattic.com",
      "about": "WordPress.com, VaultPress, Akismet, Gravatar, WooCommerce, Polldaddy, Tumblr and more!"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-06-22T14:15:50.376Z",
  "bug_reporter_agreed_on_going_public_at": "2019-05-23T14:15:49.445Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Product / URL**\n\n`http://en.instagram-brand.com/register/reset/<the security token here>?email=<email address here>`\n\n\n**Description and Impact**\n\nThe password reset links issues by Instagram Brand gets delivered to users inbox with a http scheme and NOT https scheme.\n\nThis causes an attacker stealing those links and performing mass account takeovers and security compromises.\n\nThe link that gets delivered in inbox is:\n`http://mandrillapp.com/track/click/30956340/instagram-brand.com?p=<the very long security token here>`\n\nOn requesting the above link in browser, it sends back the password reset token in clear text: `http://en.instagram-brand.com/register/reset/<the security token here>?email=<the email of user here>`\n\n**Solution:**\nThis issues has a very easy solution. I have myself performed this and it worked !!.\nWhenever the code responsible for sending password reset link makes those links, just add https as scheme instead of http. And you will observe that now all the accounts are safe and data cannot be stolen.\n\n\n**Reproduction Instructions / Proof of Concept**\n\n1. Request for you password reset link.\n2. Go to inbox.\n3. Right click that link and paste it on notepad and observe the scheme.\n4. You can also start Wireshark to capture the traffic and observe that security token can be compromised.\n\nI have attached the screenshot of Wireshark as a proof of concept. F161119",
  "weakness": {
    "id": 27,
    "name": "Improper Authentication - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 161119,
      "file_name": "InstagramBrandMITM.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/161/119/96b01c02da3a68edc2c863c92063eea72585a5e5/InstagramBrandMITM.png?response-content-disposition=attachment%3B%20filename%3D%22InstagramBrandMITM.png%22%3B%20filename%2A%3DUTF-8%27%27InstagramBrandMITM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074226Z&X-Amz-Expires=2083&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ad3ed2df39b15891c830d0c3422594a515346e5209cf505eaf3ee137078d5200",
      "file_size": 147100,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 161120,
      "file_name": "InstagramBrandMITM.pcapng",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/161/120/82b596893da84ea4945940cc9d18200236483fc2/InstagramBrandMITM.pcapng?response-content-disposition=attachment%3B%20filename%3D%22InstagramBrandMITM.pcapng%22%3B%20filename%2A%3DUTF-8%27%27InstagramBrandMITM.pcapng&response-content-type=application%2Foctet-stream&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074226Z&X-Amz-Expires=2083&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8ba7b380f7ecc5c56ec569302390f14bd312d4ef3da457e9f7e6e23077d145ef",
      "file_size": 1439244,
      "type": "application/octet-stream",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2019-06-22T14:15:49.567Z",
  "allow_singular_disclosure_after": -134241997.1987189,
  "singular_disclosure_allowed": true,
  "vote_count": 61,
  "voters": [
    "megaknight",
    "base_64",
    "ali",
    "borrowedbastion",
    "schneidersec",
    "nullsecisroot",
    "savitar0x01",
    "khizer47",
    "lumbridge",
    "exception",
    "and 51 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 1487970,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugNeedsMoreInfo",
      "message": "Hey @dermeister,\n\nI'm having some trouble reproducing this issue - when I request the mandrillapp.com link, I always get redirected to an HTTPS instagram-brand.com url:\n\n```\ncurl -I -s http://mandrillapp.com/track/click/30956340/instagram-brand.com?p=<REDACTED> | grep Location\nLocation: https://instagram-brand.com/register/signin/<REDACTED>\n```\n\nFollowing that redirect, I get redirected once more to `https://en.instagram-brand.com/register/signin/<REDACTED>`.\n\nCan you help me reproduce?\n\nA mitigating factor here is that this is a one-time use code that simply verifies an email address...so even if it were intercepted by MiTM, it's of little value to an attacker as it can't really do anything.",
      "automated_response": false,
      "created_at": "2017-02-15T19:52:30.661Z",
      "updated_at": "2017-02-15T19:52:30.661Z",
      "actor": {
        "username": "nickdaugherty",
        "cleared": false,
        "verified": false,
        "url": "/nickdaugherty",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/006/778/73bab647e605318906a1a3197d4e578d5dd6de30_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 1488563,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugNew",
      "message": "Hi @nickdaugherty,\n\nYou are seeing this on a UI level. Please follow the steps in order to find the exact point at which HTTP is seen.\n\n1. Request for password reset using https://en.instagram-brand.com/register/signin\n2. Go to your inbox\n3. Right click on that hyperlink and copy and paste it in notepad. (HTTP scheme is seen here)\n4. Now Attach a local proxy tool to your browser.\n5. Request the copied link in that browser and keep on intercepting.\n6. The first request goes in HTTP like this: \n\n`GET /track/click/30956340/instagram-brand.com?p=<token here> HTTP/1.1\nHost: mandrillapp.com\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1`\n\n7.The response to that request is:\n\n`HTTP/1.1 302 Moved Temporarily\nServer: nginx/1.6.3\nDate: Thu, 16 Feb 2017 02:58:53 GMT\nContent-Type: text/html; charset=utf-8\nSet-Cookie: PHPSESSID=dc43ed4a78f737e1cff9ecf05ede3680; expires=Thu, 16-Feb-2017 12:58:01 GMT; path=/; secure; HttpOnly\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0\nPragma: no-cache\nSet-Cookie: PHPSESSID=dc43ed4a78f737e1cff9ecf05ede3680; expires=Thu, 16-Feb-2017 12:58:01 GMT; path=/; secure; httponly\nLocation: https://instagram-brand.com/register/reset/<new token>?email=<your email>\nVary: Accept-Encoding\nContent-Length: 0`\n\n8.Then the next request is:\n\n`GET /register/reset/<token>?email=<email> HTTP/1.1\nHost: instagram-brand.com\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nCookie: pll_language=en; _ga=GA1.2.1670792457.1487004320; _gat=1\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1`\n\n9.The response is:\n\n`HTTP/1.1 302 Found\nServer: nginx\nDate: Thu, 16 Feb 2017 03:00:30 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 0\nConnection: keep-alive\nLocation: https://en.instagram-brand.com/register/reset/<token>?email=<email>\nX-rq: lhr2 102 131 3129\nAge: 0\nX-Cache: miss`\n\n10.The final request is:\n\n`GET /register/reset/<token>?email=<email> HTTP/1.1\nHost: en.instagram-brand.com\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nCookie: pll_language=en; _ga=GA1.2.1670792457.1487004320; _gat=1\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1`\n\n11.The final response is:\n\n`HTTP/1.1 404 Not Found\nServer: nginx\nDate: Thu, 16 Feb 2017 03:01:58 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: keep-alive\nX-Frame-Options: deny\nX-hacker: If you're reading this, you should visit automattic.com/jobs and apply to join the fun, mention this header.\nLink: <https://instagram-brand.com/wp-json/>; rel=\"https://api.w.org/\"\nX-rq: lhr1 102 131 3129\nAge: 0\nX-Cache: miss\nVary: Accept-Encoding\nContent-Length: 28183`\n\n\nIn the above steps, I am talking about token on plain HTTP in step 6 and 7. While you are seeing the token in HTTPS because you are referring to steps 8 onward.\n\nSo, an attack can capture the security token before and then the victim will see the final link in his/her browser i.e. this link: `https://en.instagram-brand.com/register/reset/<token>?email=<email>`\n\nHere the attacker can smartly write an exploit that auto requests that links and changes the victim's password. After this the victim will request that link in UI and will find that that link is expired, but what is actually happening is that the attacker has used that link.\n\nRegards",
      "automated_response": false,
      "created_at": "2017-02-16T03:08:11.395Z",
      "updated_at": "2017-02-16T03:08:11.395Z",
      "actor": {
        "username": "saurabhb",
        "cleared": false,
        "verified": false,
        "url": "/saurabhb",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/065/085/b14379cd81c972748951b6dd4d78f6f1dd3987d1_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 1489895,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks for the additional info - so it's the initial mandrillapp.com link that is using http, rather than the url on en.instagram-brand.com. Is it possible to get an `http://` version of the instagram-brand.com url (as in the initial report)?\n\nI believe this would be reasonably hard to successfully exploit, because if a user clicks on the http mandrill link and follows it through (exposing it to the MiTM attack in this scenario), they'll land on an https url on instagram-brand with a single-use token that will be invalidated upon password reset.\n\nAn attacker would need to capture that mandrill url, then follow the link and update the password themselves before the user did - which _would_ be possible for a bot to do.\n\nAnother consideration here is that the link is sent in an email, which is common practice. Emails generally aren't super secure and can themselves be susceptible to MiTM attacks - which no amount of HTTPS can fix.\n\nI do agree though that it would be better to have HTTPS on the entire chain - I'm passing this along to the client and will keep you updated.",
      "automated_response": false,
      "created_at": "2017-02-16T19:22:01.694Z",
      "updated_at": "2017-02-16T19:22:01.694Z",
      "actor": {
        "username": "nickdaugherty",
        "cleared": false,
        "verified": false,
        "url": "/nickdaugherty",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/006/778/73bab647e605318906a1a3197d4e578d5dd6de30_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 1491902,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "",
      "automated_response": false,
      "created_at": "2017-02-17T19:37:31.884Z",
      "updated_at": "2017-02-17T19:37:31.884Z",
      "actor": {
        "username": "vortfu",
        "cleared": false,
        "verified": false,
        "url": "/vortfu",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/004/982/1ef285fb263d30f189dc6a8038e1d5c46086e9d9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 1502310,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @dermeister - the client has implemented a fix - removing mandrill altogether and using direct HTTPS links instead - can you test again and let us know if you consider this fixed?",
      "automated_response": false,
      "created_at": "2017-02-23T22:20:28.459Z",
      "updated_at": "2017-02-23T22:20:28.459Z",
      "actor": {
        "username": "nickdaugherty",
        "cleared": false,
        "verified": false,
        "url": "/nickdaugherty",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/006/778/73bab647e605318906a1a3197d4e578d5dd6de30_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 1502783,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @nickdaugherty  - This is fixed.\n\nRegards,\nDerMeister",
      "automated_response": false,
      "created_at": "2017-02-24T06:51:56.730Z",
      "updated_at": "2017-02-24T06:51:56.730Z",
      "actor": {
        "username": "saurabhb",
        "cleared": false,
        "verified": false,
        "url": "/saurabhb",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/065/085/b14379cd81c972748951b6dd4d78f6f1dd3987d1_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 1503959,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "Thanks for confirming. Closing this out, and we'll follow up with a bounty decision.",
      "automated_response": false,
      "created_at": "2017-02-24T17:54:13.827Z",
      "updated_at": "2017-02-24T17:54:13.827Z",
      "actor": {
        "username": "nickdaugherty",
        "cleared": false,
        "verified": false,
        "url": "/nickdaugherty",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/006/778/73bab647e605318906a1a3197d4e578d5dd6de30_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "saurabhb",
        "url": "/saurabhb"
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 1504942,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Cheers !",
      "automated_response": false,
      "created_at": "2017-02-25T02:43:02.216Z",
      "updated_at": "2017-02-25T02:43:02.216Z",
      "actor": {
        "username": "saurabhb",
        "cleared": false,
        "verified": false,
        "url": "/saurabhb",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/065/085/b14379cd81c972748951b6dd4d78f6f1dd3987d1_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 1522084,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Is this eligible for a bounty?",
      "automated_response": false,
      "created_at": "2017-03-06T15:57:08.016Z",
      "updated_at": "2017-03-06T15:57:08.016Z",
      "actor": {
        "username": "saurabhb",
        "cleared": false,
        "verified": false,
        "url": "/saurabhb",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/065/085/b14379cd81c972748951b6dd4d78f6f1dd3987d1_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 1522499,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BountyAwarded",
      "message": "",
      "automated_response": false,
      "created_at": "2017-03-06T18:35:22.816Z",
      "updated_at": "2017-03-06T18:35:22.816Z",
      "actor": {
        "url": "/automattic",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Automattic"
        }
      },
      "bounty_currency": "usd",
      "genius_execution_id": null,
      "team_handle": "automattic",
      "collaborator": {
        "username": "saurabhb",
        "url": "/saurabhb"
      }
    },
    {
      "id": 4910504,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "Hello Team,\n\nWould you mind a public disclosure of this bug. I want to share security testing knowledge in the community.\n\nThanks,\nSaurabh",
      "automated_response": false,
      "created_at": "2019-05-23T14:15:49.511Z",
      "updated_at": "2019-05-23T14:15:49.511Z",
      "first_to_agree": true,
      "actor": {
        "username": "saurabhb",
        "cleared": false,
        "verified": false,
        "url": "/saurabhb",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/065/085/b14379cd81c972748951b6dd4d78f6f1dd3987d1_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 5168552,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-06-22T14:15:50.406Z",
      "updated_at": "2019-06-22T14:15:50.406Z",
      "actor": {
        "url": "/automattic",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Automattic"
        }
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    },
    {
      "id": 5211099,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks a lot.",
      "automated_response": false,
      "created_at": "2019-06-28T04:07:28.412Z",
      "updated_at": "2019-06-28T04:07:28.412Z",
      "actor": {
        "username": "saurabhb",
        "cleared": false,
        "verified": false,
        "url": "/saurabhb",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/065/085/b14379cd81c972748951b6dd4d78f6f1dd3987d1_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "automattic"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}