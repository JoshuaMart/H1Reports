{
  "id": 103989,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDM5ODk=",
  "url": "https://hackerone.com/reports/103989",
  "title": "Escaping the iframe via exceptions",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-12-07T22:53:14.542Z",
  "submitted_at": "2015-12-07T22:53:14.542Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "benburrill",
    "url": "/benburrill",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 134,
    "url": "https://hackerone.com/khanacademy",
    "handle": "khanacademy",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/134/e62a822e39ad039f23a0b89bfaaaf7bf97c5f11f_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/134/e62a822e39ad039f23a0b89bfaaaf7bf97c5f11f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Khan Academy",
      "twitter_handle": "",
      "website": "https://www.khanacademy.org/",
      "about": "Start learning now. Completely free, forever."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2015-12-29T20:46:52.266Z",
  "bug_reporter_agreed_on_going_public_at": "2015-12-29T03:02:43.192Z",
  "team_member_agreed_on_going_public_at": "2015-12-29T20:46:52.012Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "You can throw an object with an `html` property to run arbitrary js\n[Here](https://www.khanacademy.org/computer-programming/new-program/5946036004192256) is an example program that modifies a user's profile.  I made the program as private as possible by saving it with nouser and drawing nothing in the hopes that it will be ignored, but if you want me to delete it, I will.  The program will change your bio, so if you don't want that to happen, log out first.",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2016-01-28T03:02:43.397Z",
  "allow_singular_disclosure_after": -241507186.91476876,
  "singular_disclosure_allowed": true,
  "vote_count": 0,
  "voters": [

  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 712025,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "To clarify, this works because error buddy is outside of the iframe.",
      "automated_response": false,
      "created_at": "2015-12-07T22:54:21.633Z",
      "updated_at": "2015-12-07T22:54:21.633Z",
      "actor": {
        "username": "benburrill",
        "cleared": false,
        "verified": false,
        "url": "/benburrill",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 712030,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Very interesting! This does indeed look like a full-fledged XSS attack vector (I just reproduced the problem). Will let you know when we've patched the vulnerability. Happy to provide the Friendly Hacker badge if you'd like to provide your Khan Academy account email.",
      "automated_response": false,
      "created_at": "2015-12-07T22:57:11.834Z",
      "updated_at": "2015-12-07T22:57:11.834Z",
      "actor": {
        "username": "jlfwong-ka",
        "cleared": false,
        "verified": false,
        "url": "/jlfwong-ka",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 712036,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Wow, that was a fast response!  My KA account email is bburrill98@gmail.com",
      "automated_response": false,
      "created_at": "2015-12-07T22:59:32.079Z",
      "updated_at": "2015-12-07T22:59:32.079Z",
      "actor": {
        "username": "benburrill",
        "cleared": false,
        "verified": false,
        "url": "/benburrill",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 712045,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "",
      "automated_response": false,
      "created_at": "2015-12-07T23:02:36.663Z",
      "updated_at": "2015-12-07T23:02:36.663Z",
      "actor": {
        "username": "jlfwong-ka",
        "cleared": false,
        "verified": false,
        "url": "/jlfwong-ka",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 715786,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "The vulnerability has been patched, and you should see the badge awarded. Thanks again for the report!\n\nIt was patched by deleting the html property on errors thrown like that, so if you look at your proof of concept, you should see error buddy pop up, but nothing will be displayed in the error box.",
      "automated_response": false,
      "created_at": "2015-12-10T19:13:50.550Z",
      "updated_at": "2015-12-10T19:13:50.550Z",
      "actor": {
        "username": "jlfwong-ka",
        "cleared": false,
        "verified": false,
        "url": "/jlfwong-ka",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "benburrill",
        "url": "/benburrill"
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 726362,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I kept trying to get around your patch, and although I eventually gave up for a while, I knew there was something I was missing.  I finally found it:\n\n    throw Object.defineProperty({}, \"html\", {\n        configurable: false,\n        value: \"<h1>Hello world</h1><script>console.log(location.href, 'OH NO!')</script>\"\n    });\n\nThis works because `configurable: false` makes the property undeletable!\n\nI suppose you could create a new object with all the properties except for html, but I still feel like there might be another way out (like if you could get past the html property filter completely).  I think the most secure thing to do would be to put error buddy inside the iframe (which you presumably trust to have arbitrary JS run inside of) and get rid of the delete statement.  This would have the added benefit of fixing problems like https://github.com/Khan/live-editor/issues/522 and, I suppose, letting users style their errors if they so desired.  In any case, putting error buddy inside the iframe would at least get rid of a source of potential future vulnerabilities.",
      "automated_response": false,
      "created_at": "2015-12-18T23:12:33.814Z",
      "updated_at": "2015-12-18T23:12:33.814Z",
      "actor": {
        "username": "benburrill",
        "cleared": false,
        "verified": false,
        "url": "/benburrill",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 726383,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugReopened",
      "message": "Thanks for the report.  We'll work on patching this further -- I'll have to talk to some of the other folks who work on this to see what they think about running the entire error buddy inside the iframe, or if they prefer a different way to fix it..\n\nBest,\nBen",
      "automated_response": false,
      "created_at": "2015-12-18T23:25:45.827Z",
      "updated_at": "2015-12-18T23:25:45.827Z",
      "actor": {
        "username": "benkraftka",
        "cleared": false,
        "verified": false,
        "url": "/benkraftka",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/044/789/4822709cf4ea46d7303ac6bb829a3cfb083ab085_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 728981,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "How's it going?  You should know that I finally figured out how to send messages to oh noes guy while skipping your html property filter **completely**.  It's not exactly pretty, but it's possible:\n\n    (function() {\n        // we need to wait until after the \"program ended\" message gets sent, or our message will be quickly removed\n        // for this example, we want the user to see the XSS, so we want the message to get sent 1 second after the \"program ended\" message\n        this.setTimeout(function() {\n            this.parent.postMessage(this.JSON.stringify({\n                results: {\n                    errors: [{\n                        text: \"<h1>HOLA MUNDO!</h1><script>console.log(location.href);</script>\",\n                        row: 8 // :D\n                    }]\n                }\n            }), \"*\");\n        }, 1000);\n    })();\n\nIf it doesn't seem to work, wait a second and press the \"Hmmm...\" next to error buddy below the program to open the message.  Even without pressing the \"Hmmm...\", the JavaScript seems to be run.\n\nAnyway, given that you can do that, you should probably not even try to fix `Object.defineProperty` hole and skip right to putting error buddy inside the iframe.  Maybe, at least for now, you could even do something with stacking iframes.  All the message handling and error buddy stuff could be inside an iframe inside the main page, so the iframe with the output would be two levels deep.",
      "automated_response": false,
      "created_at": "2015-12-22T02:32:24.513Z",
      "updated_at": "2015-12-22T02:41:04.005Z",
      "actor": {
        "username": "benburrill",
        "cleared": false,
        "verified": false,
        "url": "/benburrill",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 729769,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "Thanks.  I spent a bunch of time looking into this yesterday, and I have another fix which i think should work, for both the XSS you sent and another related one I found; a coworker just pointed out another variation on mine so I'm going to fix that too and then push it to the site.  (For the `text` attribute in your most recent version, we'll just need to do the same thing we do for `html` and construct anything that we want to display unsanitized outside the iframe; that's equally easy to do, we just overlooked it.  At this point we're going to be doing property whitelisting, so it should be easy to just audit how we use all the other properties we allow through.)\n\nI think putting the error buddy inside the iframe is going to at the very least take us some more time -- it's a significant change, even if we do it with nested iframes (and I think that would be a performance nightmare, although maybe worth it in the short term).  And in any case, we do still need *some* access to some information from the inside the iframe to know if you have, for example, completed a challenge, so we'll need to be able to correctly sanitize that.  I'll definitely make sure that we look into moving error buddy inside the iframe, but at this point I don't think it'll happen before the holidays, so I'm going to try to get a simpler fix out today that will at least prevent the issues we know about.\n\nAgain, thanks for your work on reporting this!",
      "automated_response": false,
      "created_at": "2015-12-22T18:32:04.329Z",
      "updated_at": "2015-12-22T18:32:04.329Z",
      "actor": {
        "username": "benkraftka",
        "cleared": false,
        "verified": false,
        "url": "/benkraftka",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/044/789/4822709cf4ea46d7303ac6bb829a3cfb083ab085_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 729906,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "To give you another update, I now understand better how you're getting entirely around our sanitization.  It still seems like moving the error buddy inside the iframe is a difficult change; instead we're just going to make sure that all of the sanitization is happening outside the iframe; I hadn't realized that the sanitization we were doing was currently inside -- that clearly won't work.  Once we're doing it on the outside, everything we have has been decoded from JSON, so it should be easy enough to just make sure it gets sanitized before use.",
      "automated_response": false,
      "created_at": "2015-12-22T20:01:48.035Z",
      "updated_at": "2015-12-22T20:01:48.035Z",
      "actor": {
        "username": "benkraftka",
        "cleared": false,
        "verified": false,
        "url": "/benkraftka",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/044/789/4822709cf4ea46d7303ac6bb829a3cfb083ab085_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 734702,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "Okay, I believe this is now fixed by [d16b858](https://github.com/Khan/live-editor/commit/d16b858) which is now live on the site; we're doing all our sanitization outside the iframe to prevent users from bypassing the checks.  The solution isn't the cleanest but I think with some more work it will be, so I'm not sure if we'll decide it's worthwhile to move the error-buddy inside the iframe.  In any case, let us know if you see any more variations on this issue, and thanks again for reporting this in such detail!\n\nBest,\nBen",
      "automated_response": false,
      "created_at": "2015-12-28T23:20:57.282Z",
      "updated_at": "2015-12-28T23:20:57.282Z",
      "actor": {
        "username": "benkraftka",
        "cleared": false,
        "verified": false,
        "url": "/benkraftka",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/044/789/4822709cf4ea46d7303ac6bb829a3cfb083ab085_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "benburrill",
        "url": "/benburrill"
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 734875,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "Looks fixed to me.  Disclose?",
      "automated_response": false,
      "created_at": "2015-12-29T03:02:43.219Z",
      "updated_at": "2015-12-29T03:02:43.219Z",
      "first_to_agree": true,
      "actor": {
        "username": "benburrill",
        "cleared": false,
        "verified": false,
        "url": "/benburrill",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 735728,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "Sure, fine by me.",
      "automated_response": false,
      "created_at": "2015-12-29T20:46:52.050Z",
      "updated_at": "2015-12-29T20:46:52.050Z",
      "actor": {
        "username": "benkraftka",
        "cleared": false,
        "verified": false,
        "url": "/benkraftka",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/044/789/4822709cf4ea46d7303ac6bb829a3cfb083ab085_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    },
    {
      "id": 735729,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2015-12-29T20:46:52.312Z",
      "updated_at": "2015-12-29T20:46:52.312Z",
      "actor": {
        "username": "benkraftka",
        "cleared": false,
        "verified": false,
        "url": "/benkraftka",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/044/789/4822709cf4ea46d7303ac6bb829a3cfb083ab085_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "khanacademy"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "id": 1168,
      "category": "team",
      "content": "Several variations on an XSS in the CS platform, involving throwing a malformed error that caused the error buddy to interpret user-provided data as HTML.  We now make sure to sanitize all of the messages passed from the iframe before using them.",
      "user": {
        "id": 44789,
        "username": "benkraftka",
        "name": "Ben Kraft",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "http://www.khanacademy.org/about/the-team",
        "location": "",
        "created_at": "2015-12-03T00:40:17.016Z",
        "url": "https://hackerone.com/benkraftka",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/044/789/4822709cf4ea46d7303ac6bb829a3cfb083ab085_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/044/789/4822709cf4ea46d7303ac6bb829a3cfb083ab085_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/000/044/789/4822709cf4ea46d7303ac6bb829a3cfb083ab085_original.png/60f411638706d89ae3052af6fe8b88fa9a798e291deee40f6a22e81418d78d5f"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": [

      ]
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}