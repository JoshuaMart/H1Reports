{
  "id": 394253,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zOTQyNTM=",
  "url": "https://hackerone.com/reports/394253",
  "title": "Validation bypass for queries generated for PostgreSQL",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2018-08-13T14:44:39.511Z",
  "submitted_at": "2018-08-13T14:44:39.511Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ooooooo_q",
    "url": "/ooooooo_q",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/9a55e00ecd2cdf18a7f40678e6836e4cdc90bf95eb4b50c43f5fb775da40bb65"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22,
    "url": "https://hackerone.com/rails",
    "handle": "rails",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby on Rails",
      "twitter_handle": "rails",
      "website": "http://rubyonrails.org/security",
      "about": "Web development that doesn't hurt."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-11-19T22:55:14.323Z",
  "bug_reporter_agreed_on_going_public_at": "2018-11-19T22:55:14.272Z",
  "team_member_agreed_on_going_public_at": "2018-11-19T21:40:43.549Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "When using DB for PostgreSQL, I discovered that if a parameter of a query contains null character, there is a pattern in which subsequent strings are lost.\n\n\n### how to reproduce\n\n#### Prepare the environment\n\n\n```\n$ rails new postgresql_rails -TB --database=postgresql\n$ cd postgresql_rails\n\n$ bundle exec ruby -v\n> ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin16]\n$ bundle exec rails --version\n> Rails 5.2.1\n\n$ bundle install\n```\n\nPrepare models and schemas.\n\n```\n$ bundle exec rails generate model Article title:string text:text\n$ bundle exec rails db:create\n$ bundle exec rails db:migrate\n```\n\nSave test data.\n\n```ruby\n$ bundle exec rails console\nLoading development environment (Rails 5.2.1)\nirb(main):001:0> Article.create(title: 'test title', text: 'dummy')\n   (0.1ms)  BEGIN\n  Article Create (3.7ms)  INSERT INTO \"articles\" (\"title\", \"text\", \"created_at\", \"updated_at\") VALUES ($1, $2, $3, $4) RETURNING \"id\"  [[\"title\", \"test title\"], [\"text\", \"dummy\"], [\"created_at\", \"2018-08-13 13:31:37.689587\"], [\"updated_at\", \"2018-08-13 13:31:37.689587\"]]\n   (1.3ms)  COMMIT\n=> #<Article id: 1, title: \"test title\", text: \"dummy\", created_at: \"2018-08-13 13:31:37\", updated_at: \"2018-08-13 13:31:37\">\n```\n\n\n\n#### Confirm query\n\n```ruby\n $ bundle exec rails console\nLoading development environment (Rails 5.2.1)\n\n# Case A\nirb(main):001:0> Article.where(title: \"test title\")\n  Article Load (0.3ms)  SELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"title\" = $1 LIMIT $2  [[\"title\", \"test title\"], [\"LIMIT\", 11]]\n=> #<ActiveRecord::Relation [#<Article id: 1, title: \"test title\", text: \"dummy\", created_at: \"2018-08-13 13:31:37\", updated_at: \"2018-08-13 13:31:37\">]>\n\nirb(main):002:0> Article.where(title: \"test title\\0suffix\")\n  Article Load (0.3ms)  SELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"title\" = $1 LIMIT $2  [[\"title\", \"test title\\u0000suffix\"], [\"LIMIT\", 11]]\nTraceback (most recent call last):\nArgumentError (string contains null byte)\n\n\n# Case B\nirb(main):003:0> Article.find_by_title(\"test title\")\n  Article Load (0.4ms)  SELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"title\" = $1 LIMIT $2  [[\"title\", \"test title\"], [\"LIMIT\", 1]]\n=> #<Article id: 1, title: \"test title\", text: \"dummy\", created_at: \"2018-08-13 13:31:37\", updated_at: \"2018-08-13 13:31:37\">\n\nirb(main):004:0> Article.find_by_title(\"test title\\0suffix\")\n  Article Load (0.5ms)  SELECT  \"articles\".* FROM \"articles\" WHERE \"articles\".\"title\" = $1 LIMIT $2  [[\"title\", \"test title\\u0000suffix\"], [\"LIMIT\", 1]]\nTraceback (most recent call last):\n        1: from (irb):4\nArgumentError (string contains null byte)\n\n\n# Case C\nirb(main):005:0> Article.where(\"title = ?\", \"test title\")\n  Article Load (0.4ms)  SELECT  \"articles\".* FROM \"articles\" WHERE (title = 'test title') LIMIT $1  [[\"LIMIT\", 11]]\n=> #<ActiveRecord::Relation [#<Article id: 1, title: \"test title\", text: \"dummy\", created_at: \"2018-08-13 13:31:37\", updated_at: \"2018-08-13 13:31:37\">]>\n\nirb(main):006:0> Article.where(\"title = ?\", \"test title\\0suffix\")\n  Article Load (0.4ms)  SELECT  \"articles\".* FROM \"articles\" WHERE (title = 'test title') LIMIT $1  [[\"LIMIT\", 11]]\n=> #<ActiveRecord::Relation [#<Article id: 1, title: \"test title\", text: \"dummy\", created_at: \"2018-08-13 13:31:37\", updated_at: \"2018-08-13 13:31:37\">]>\n\n\n# Case D\nirb(main):007:0> Article.where(\"title = :title\", {title: \"test title\"})\n  Article Load (0.4ms)  SELECT  \"articles\".* FROM \"articles\" WHERE (title = 'test title') LIMIT $1  [[\"LIMIT\", 11]]\n=> #<ActiveRecord::Relation [#<Article id: 1, title: \"test title\", text: \"dummy\", created_at: \"2018-08-13 13:31:37\", updated_at: \"2018-08-13 13:31:37\">]>\n\nirb(main):008:0> Article.where(\"title = :title\", {title: \"test title\\0suffix\"})\n  Article Load (0.4ms)  SELECT  \"articles\".* FROM \"articles\" WHERE (title = 'test title') LIMIT $1  [[\"LIMIT\", 11]]\n=> #<ActiveRecord::Relation [#<Article id: 1, title: \"test title\", text: \"dummy\", created_at: \"2018-08-13 13:31:37\", updated_at: \"2018-08-13 13:31:37\">]>\n```\n\nIn Case A and Case B, an error has occurred when null characters are included.\nOn the other hand, in Case C and Case D, SQL is generated in such a way that the character string after the null character (`\\0suffix`) is ignored.\n\n### sanitize_sql_array\n\nFor comparison, list the results of `sanitize_sql_array` for each DB.\n\n#### PostgreSQL\n\n```ruby\n$ bundle exec rails console\nLoading development environment (Rails 5.2.1)\nirb(main):001:0> ActiveRecord::Base.send(:sanitize_sql_array,['SELECT * from articles WHERE title = ?', \"abc\\0suffix\"])\n=> \"SELECT * from articles WHERE title = 'abc'\"\n```\n\n#### MySQL\n\n```ruby\n$ bundle exec rails console\nLoading development environment (Rails 5.2.1)\nirb(main):001:0> ActiveRecord::Base.send(:sanitize_sql_array,['SELECT * from articles WHERE title = ?', \"abc\\0suffix\"])\n   (0.9ms)  SET NAMES utf8,  @@SESSION.sql_mode = CONCAT(CONCAT(@@sql_mode, ',STRICT_ALL_TABLES'), ',NO_AUTO_VALUE_ON_ZERO'),  @@SESSION.sql_auto_is_null = 0, @@SESSION.wait_timeout = 2147483\n=> \"SELECT * from articles WHERE title = 'abc\\\\0suffix'\"\n```\n\n#### SQLite3\n\n```ruby\n$ bundle exec rails console\nRunning via Spring preloader in process 55281\nLoading development environment (Rails 5.2.1)\nirb(main):001:0> ActiveRecord::Base.send(:sanitize_sql_array,['SELECT * from articles WHERE title = ?', \"abc\\0suffix\"])\n=> \"SELECT * from articles WHERE title = 'abc\\u0000suffix'\"\n```\n\n## Impact\n\nIn this problem, SQL injection can not be done, but bypass is possible when ruby side is performing blacklist and suffix validation (extension checking etc.).\n\n#### sample code\n\n```ruby\ntitle = \"test\\0dummy\"\ntitle != 'test' ?  Article.where(\"title = ?\", title) : nil\n> Article Load (1.9ms)  SELECT  \"articles\".* FROM \"articles\" WHERE (title = 'test') LIMIT $1  [[\"LIMIT\", 11]]\n```",
  "bounty_amount": "1500.0",
  "formatted_bounty": "$1,500",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2018-12-19T21:40:43.614Z",
  "allow_singular_disclosure_after": -150199589.1517293,
  "singular_disclosure_allowed": true,
  "vote_count": 21,
  "voters": [
    "kapytein",
    "sameerphad72",
    "bl4de",
    "s_p_q_r",
    "ali",
    "apapedulimu",
    "savitar0x01",
    "eveeez",
    "mobius07",
    "cyberunit",
    "and 11 more..."
  ],
  "structured_scope": {
    "databaseId": 160,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rails/rails",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 3190451,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi, and thanks for the report!\n\nI think this is actually an issue in the underlying `pg` library we use to escape those strings, so I've invited Lars, its main developer, to collaborate on this report.\n\nLars, it seems that some libpq calls, like https://github.com/ged/ruby-pg/blob/884eb9c848ba8990b6ccf1d9fbe57f6a69ae0cc2/ext/pg_connection.c#L1599-L1600 and similar, need to use StringValueCStr (or explicitly check for nulls) before passing the value along, _even though_ they're also passing a length: https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQESCAPESTRINGCONN clarifies that the length is treated as a `strncpy`-style maximum only, and null bytes will still cause silent truncation.",
      "automated_response": false,
      "created_at": "2018-08-14T05:21:27.425Z",
      "updated_at": "2018-08-14T05:21:27.425Z",
      "actor": {
        "username": "matthewd",
        "cleared": false,
        "verified": false,
        "url": "/matthewd",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/011/558/5df350e99e2e86f74de4e3bf90de8880ac877b25_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3190700,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ExternalUserJoined",
      "message": "",
      "automated_response": false,
      "created_at": "2018-08-14T07:26:39.708Z",
      "updated_at": "2018-08-14T07:26:39.708Z",
      "actor": {
        "username": "larskanis",
        "cleared": false,
        "verified": false,
        "url": "/larskanis",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3196068,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "That's true, there are some methods in pg, which truncate strings at the first zero byte. So far I kept this for backward compatibility, but already changed exec_params to use StringValueCStr years ago. Insofar I agree that the remaining methods should follow. I'll fix this in the next days and add it to pg-1.1.0.",
      "automated_response": false,
      "created_at": "2018-08-14T19:41:22.802Z",
      "updated_at": "2018-08-14T19:41:22.802Z",
      "actor": {
        "username": "larskanis",
        "cleared": false,
        "verified": false,
        "url": "/larskanis",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3212513,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I did the changes in question here: https://github.com/ged/ruby-pg/compare/master...larskanis:reject_zero_bytes\nTests pass [on travis CI](https://travis-ci.org/larskanis/ruby-pg) and  [on Appveyor](https://ci.appveyor.com/project/larskanis/ruby-pg-xa3f5).\n@matthewd Could you please invite ged ( ged@FaerieMUD.org ) as well, so that it's easier to discuss things together?",
      "automated_response": false,
      "created_at": "2018-08-17T22:55:55.447Z",
      "updated_at": "2018-08-17T22:55:55.447Z",
      "actor": {
        "username": "larskanis",
        "cleared": false,
        "verified": false,
        "url": "/larskanis",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3214524,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ExternalUserJoined",
      "message": "",
      "automated_response": false,
      "created_at": "2018-08-18T19:54:38.892Z",
      "updated_at": "2018-08-18T19:54:38.892Z",
      "actor": {
        "username": "ged",
        "cleared": false,
        "verified": false,
        "url": "/ged",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/332/121/09ce19f07e8c5f9a0f5903ff9bddf6f7bb57e333_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3253047,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "pg-1.1.0 is out and it fixes this vulnerability. Zero bytes in quoted strings, command string or params consistently raise a `ArgumentError (string contains null byte)` now.",
      "automated_response": false,
      "created_at": "2018-08-27T14:50:11.946Z",
      "updated_at": "2018-08-27T14:50:11.946Z",
      "actor": {
        "username": "larskanis",
        "cleared": false,
        "verified": false,
        "url": "/larskanis",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3279179,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I confirmed that an error occurred in version 1.1.2.\n\n```ruby\n$ bundle exec rails console\nLoading development environment (Rails 5.2.1)\nirb(main):001:0> ActiveRecord::Base.sanitize_sql_array(['SELECT * from articles WHERE title = ?', \"abc\\0suffix\"])\nTraceback (most recent call last):\n        1: from (irb):1\nArgumentError (string contains null byte)\n```\n\nWill this report be disclosed?",
      "automated_response": false,
      "created_at": "2018-09-01T13:44:35.987Z",
      "updated_at": "2018-09-01T13:44:35.987Z",
      "actor": {
        "username": "ooooooo_q",
        "cleared": false,
        "verified": false,
        "url": "/ooooooo_q",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/d9cda3948dbcdef886be5f7bc601358556d87dbd736cb28585026b898b9f4b13"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3286291,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I don't feel like I can make that call while it's under Ruby on Rails. I think we should disclose it for `pg`, however.",
      "automated_response": false,
      "created_at": "2018-09-03T17:49:15.827Z",
      "updated_at": "2018-09-03T17:49:15.827Z",
      "actor": {
        "username": "ged",
        "cleared": false,
        "verified": false,
        "url": "/ged",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/332/121/09ce19f07e8c5f9a0f5903ff9bddf6f7bb57e333_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3398192,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Yes. We should proceed and disclose it under pg. If you need we can request the CVE assignment here but I think it would be better if the pg team write the advisory.",
      "automated_response": false,
      "created_at": "2018-09-27T18:07:13.169Z",
      "updated_at": "2018-09-27T18:07:13.169Z",
      "actor": {
        "username": "rafaelfranca",
        "cleared": false,
        "verified": false,
        "url": "/rafaelfranca",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3431623,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "OK. I will wait for information to be released.",
      "automated_response": false,
      "created_at": "2018-10-03T22:49:30.548Z",
      "updated_at": "2018-10-03T22:49:30.548Z",
      "actor": {
        "username": "ooooooo_q",
        "cleared": false,
        "verified": false,
        "url": "/ooooooo_q",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/d9cda3948dbcdef886be5f7bc601358556d87dbd736cb28585026b898b9f4b13"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3681506,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "I'm closing this report since the issue is already fixed. I'm also going to ask the disclosure of the report to public so we can disclosure the information.",
      "automated_response": false,
      "created_at": "2018-11-19T21:38:02.188Z",
      "updated_at": "2018-11-19T21:38:02.188Z",
      "actor": {
        "username": "rafaelfranca",
        "cleared": false,
        "verified": false,
        "url": "/rafaelfranca",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "ooooooo_q",
        "url": "/ooooooo_q"
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3681518,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BountyAwarded",
      "message": "",
      "automated_response": false,
      "created_at": "2018-11-19T21:40:35.644Z",
      "updated_at": "2018-11-19T21:40:35.644Z",
      "actor": {
        "url": "/rails",
        "ibb": true,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Ruby on Rails"
        }
      },
      "bounty_amount": "1500.0",
      "bonus_amount": "0.0",
      "bounty_currency": "usd",
      "genius_execution_id": null,
      "team_handle": "rails",
      "collaborator": {
        "username": "ooooooo_q",
        "url": "/ooooooo_q"
      }
    },
    {
      "id": 3681519,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2018-11-19T21:40:43.569Z",
      "updated_at": "2018-11-19T21:40:43.569Z",
      "first_to_agree": true,
      "actor": {
        "username": "rafaelfranca",
        "cleared": false,
        "verified": false,
        "url": "/rafaelfranca",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3681807,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2018-11-19T22:55:14.297Z",
      "updated_at": "2018-11-19T22:55:14.297Z",
      "actor": {
        "username": "ooooooo_q",
        "cleared": false,
        "verified": false,
        "url": "/ooooooo_q",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/d9cda3948dbcdef886be5f7bc601358556d87dbd736cb28585026b898b9f4b13"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 3681808,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2018-11-19T22:55:14.342Z",
      "updated_at": "2018-11-19T22:55:14.342Z",
      "actor": {
        "username": "ooooooo_q",
        "cleared": false,
        "verified": false,
        "url": "/ooooooo_q",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/d9cda3948dbcdef886be5f7bc601358556d87dbd736cb28585026b898b9f4b13"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}