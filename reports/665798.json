{
  "id": 665798,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82NjU3OTg=",
  "url": "https://hackerone.com/reports/665798",
  "title": "Earn free DAI interest (inflation) through instant CDP+DSR in one tx",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2019-08-02T08:11:11.902Z",
  "submitted_at": "2019-08-02T08:11:11.902Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "lucash-dev",
    "url": "/lucash-dev",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/515/399/dd4a50c732c98417d7be59efa049e8c234259884_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 38065,
    "url": "https://hackerone.com/makerdao_bbp",
    "handle": "makerdao_bbp",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/PxXdq1Fo6fX6n4fzUk31AqPD/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/PxXdq1Fo6fX6n4fzUk31AqPD/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "BlockDev Sp. Z o.o",
      "twitter_handle": "makerdao",
      "website": "https://makerdao.com/",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-08-12T23:44:52.395Z",
  "bug_reporter_agreed_on_going_public_at": "2019-08-12T23:44:52.302Z",
  "team_member_agreed_on_going_public_at": "2019-08-12T15:17:59.163Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nThe MCD contracts contain different mechanisms for accumulating rates in different\ncontracts, namely `pot` and `jug` corresponding to the cost of a loan and interest\nearned on savings. Because these rates are not synchronised, and depend on the\ncall to the `drip` method to be calculated, it's possible to game the system\nto obtain returns on DAI \"savings\" that exist only within a transaction.\nThis means all holders of ETH/gems can costlessly and risklessly earn interest\nfrom the `pot` contract without ever holding DAI for any amount of time.\nThis leads to inflation of the DAI supply and transfer of value to attackers.\n\n## Detailed Description of the Attack Mechanism\n\nOne of the novel features introduced in the MC contracts is the concept of DSR\n(DAI Savings Rate) which incentivises investors to hold DAI, by allowing them\nto earn interest on DAI deposits in the `pot` contract.\nNormally that doesn't result in overall inflation of the DAI supply,\nas the only ways of obtaining the DAI to deposit on the \"savings account\" is by\neither acquiring a CDP (Collateralised Debt Position) or buying DAI from someone\nelse. As repaying a CDP will require an amount of DAI increasing with time, the\noverall economic effect is a net increase in DAI value.\n\nIn practice, however, both the Stability Fee rates and the DSR rate accrue at discrete\nmoments in time (rather than continuously), whenever a user calls the method\n`drip` on the `jug` or `pot` contracts. As these methods are not synchronised\nbetween the `jug` and `pot` contracts it is possible, by carefully sequencing\nmethod calls to perform a transaction with the following steps:\n\n1. Transform the ETH/token into gem balance, using the `join` contract.\n2. Create a CDP urn (vat.frob), obtaining the maximum amount of DAI from the gem balance.\n3. Deposit the resulting DAI balance into `pot` (`join` method).\n4. Update accumulated DSR rate (`pot.drip`).\n5. Withdraw DAI from `pot` (`exit` method), obtaining the DAI deposited in 3 plus\ninterest.\n6. Repay CDP (again, `vat.frob`), getting back the gem balance.\n7. Transform back the gem balance into ETH/token.\n\nAt first glance the attack might not seem very practical, since there's no way\nto guarantee that no other transaction with call `pot.drip` in the same block, and\nthat the time between calls to drip might be just a few seconds, earning a minimal\namount of interest.\nIn practice, a balance of several million USD worth of tokens would be enough to\nobtain interest payments larget than the gas cost of each call -- this could be\neasily crowdsourced in a trustless contract that splits the profits according to\nsize of ETH/token deposits by participants, or easily obtained by some individual\ninvestors (e.g. exchanges).\nEven if the attack doesn't earn an interest in every instance (due to `pot.drip`\nhaving already been called in the same block), a random portion of successful\noccurrences would be enough to make executing it repeatedly profitable. Moreover,\nthe crowdsourcing contract could obtain miner collaboration by paying them a portion of profits or\nextremely high fees.\n\nIf a crowdsourced attacker is correctly built and publicised, nothing prevents\nevery single ETH/token holder from depositing their holdings in it, and profitably\nparticipating (with minimal cost and no risk) in a continuous attack on the MCD contracts,\nearning interest on a total balance worth billions USD -- and considerably inflating\nthe DAI supply.\n\nThe attack will become clearer by inspecting a concrete example.\n\n\n## Reproducing the Attack - Example Crowdsourcer Contract\n\nPlease find attached the file `antivat.t.sol` which includes an example crowdsourcer\ncontract (AntiVat) capable of accepting ETH deposits from users, and executing\nthe CDP+DSR attack (`grabFreeDai` method). The contract also distributes profits\nproportionally between contributors.\n\nThe contract could be easily extended to support other gems and to provide an\nincentive to the miner.\n\nPlease note that this attacker contract is provided merely as an example for\nhelping in reproducing the bug.\n\n## Possible Fix\n\nAs a suggested fix, calling `pot.drip` from within the call to `vat.frob` would\nrender the attack impossible (interest would always be zero).\n\nPlease note that I make no claim that the above is the best way of fixing the issue.\nThe suggested fix is provided only as proof that this is a fixable bug in the\ncontracts.\n\n## Impact Analysis\n\nPlease refer to the \"Impact Analysis\" field below for a detailed analysis.\n\n## Impact\n\nThis section will proceed to demonstrate that this is a critical bug that meets\n(and exceeds) the requirements stated in the policy.\n\nIn the description above I've already made the points that:\n1 - The issue reported is fixable.\n2 - The attack has minimal cost when performed by a crowdsourced contract (or\nhigh-balance attacker).\n\nI'll proceed to show that:\n3 - It's possible to steal 10% (or more) of the value of the collateral in the\nsystem.\n\nThe attack described consists of repeatedly obtaining DAI interest over large\nbalances in ETH/token that could be used for collateral, but without increasing\nthe overall collateral locked in the system. As the DAI interest is paid for with\nnewly created DAI, this corresponds to a continuous inflation of the DAI supply,\ntransferring value continuously from legitimate holders of DAI.\n\nUltimately, given enough time, virtually all the DAI market cap could be in the hands of\nthe attackers. The only limiting factor is time, and the rate at which value can\nbe stolen is a function of the value of ETH and collateral tokens available to the\nattackers (which could well be the economic majority in the ETH ecosystem), the\nDSR rate, and the \"Line\" limit.\n\nAssuming, as an example, that the DSR rate is 2% a year, that the available ETH\nsupply is 20x that of the collateral in the MCD contracts, and that the \"Line\" limit\nis higher than that -- after one year (assuming successful attack in most blocks)\nthe attackers would have inflated the DAI\nsupply in 40%, transfering much more than 10% of collateral value to themselves.\n\nIt's impossible to know beforehand what values the DSR rate and the \"Line\" limit\nwill have, but all they can do without breaking the contract functionality is\nto slow down the theft. (a DSR rate of 0% would effectively kill the DAI savings\nfunctionality, and low \"Line\" values that prevent DAI from being created in the\nattack would also affect the possibility of new legitimate users joining the system)\n\n# Final Note\n\nI understand this is an involved attack, exploiting an issue in the interaction\nbetween several contracts, and with complex economic consequences.\nPlease don't hesitate in contacting me for further explanations or to provide\nany information that can help you reproduce and evaluate the issue.",
  "weakness": {
    "id": 65,
    "name": "Business Logic Errors"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 545462,
      "file_name": "antivat.t.sol",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/545/462/231e3c77a2f374943e4b32d1279cd1dd84c9a331/antivat.t.sol?response-content-disposition=attachment%3B%20filename%3D%22antivat.t.sol%22%3B%20filename%2A%3DUTF-8%27%27antivat.t.sol&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRWDIYOMA%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074059Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJHMEUCIFNLdnPGtLwKMqDt0NQfrZo0FnfieCdt70b8x7mZltnYAiEAvoj8eBF%2Fz9RmxiwioQTjaAkY5y8glP7YJHIdVEiSRjIqsgUIKBADGgwwMTM2MTkyNzQ4NDkiDKwmuAj4%2Be1s5lbylSqPBcomyuxhildk0NUANV3%2BftlYYJCWX1M%2B1xqa23Q06%2By7YS%2BQATcLYhjMRKLHIGZfd3bianhW%2FgdFm4gpQAmwDHRw2igbV1zSavkNvXqacnFdw4Oln9SHRd2e4zuwk%2F2GviKwn1nZunhhdOuu6g7A2DA%2FQefyAlyQYpy%2FHRGl7J9kIPlFGlBK9CAul0kzKyTjlygr3Hz7DB5F6X4FcS71gvzmFC%2Fa6bf1tdfq46kICi9nBXV8Yep%2FEmkoi%2FkPVN6jpqZHrrqGL%2BeKOCEw6yXkZefklvRs%2Bmud%2BPdLs6D35uN9GpF0h2lyRl7mI1tGYSVdAxrxhb%2FnLZ%2BBbcvE%2FzPbIbOkYt%2F4kzBjPA33r7a6gRZo6xBI%2BqcHTUEoZlsC%2FePoA0bzI%2BY%2B9Kn7r266PdCrFtOI0TtLDtrt1a%2FsYB7r39ZReNeBUZjFy71DofxHhuMplWoZ%2B5suYOSkCpnX8ox%2FexG03tPH%2B%2BYi%2B7JKgMNo8Ywg0LUY4FIgqUOY3m9G4vsQ2yNVvhHzc1zFQ%2BaZDinuNqUJycV22%2Bal4yI7Vu8zRPT0XS8nU9mRxPyMOxBhqiEpipRhHvEk6ruVgSYpVrhEqZHRnwv%2FiS2CGZuiFnzVyfzzNc0a1K3NA%2Bqp8X%2FGc2IrCqLgJiIar1EgInaI6d3yXHytJb5boQ1Ym5HsML5oSphvP1hBCFvgtrkpt3teC9sz%2F02EwDEGzubXTtTxqnHBOiqeNpfNEReBvGYlciW1L%2FxLQxgqD5RpQ5CUBnf67bJivw%2BtoZ%2BpV3UvOdvkG99R3Yb6KV5k2Ly3LruRvseHIOA2KILhuT0Arnm9FUq1BvuB593ehUm8src6x4P2nT6wjhA9E2kekyi7othxiuSueSwwyp66qAY6sQGfl2fsTY6VWTPrJHQD%2BPDh1xgsgnaytGIcrwK1OGEf8WVcLpw6bEJ6BKLFS7l9GZDwFvjz7J48x%2Bl7YfFRkEZXRmoO3ak0duYeBuy3U2I6DbXdUZZIWlnrcVoExjgWQHiADxJVCKngMqQP1GNwrY9M5Of5s5Z3zUQwD3EqxVcljRFvNHznFkHj8b2eCVcdpPMI6JyXX4H9nyjUW4XvHJwg%2F0AQay6G%2BksUHKVQvEI2UA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=629a583b87e70a1bb85956c2605fce60aa36d3d5101ae14a364d5196135865d4",
      "file_size": 5664,
      "type": "text/plain",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 61,
  "voters": [
    "an40r1",
    "n1m0",
    "dittyroma",
    "checkm50",
    "7odamoo",
    "p1stachios",
    "mashoud1122",
    "base_64",
    "sameerphad72",
    "stealthy",
    "and 51 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 29468,
    "asset_type": "OTHER",
    "asset_identifier": "MCD_POT",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 5488332,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugNeedsMoreInfo",
      "message": "@lucash-dev Thank you for your report. Would it be possible for you to paste the solidity tests you wrote into a comment here or in pastebin or a private gist? ",
      "automated_response": false,
      "created_at": "2019-08-02T13:14:17.968Z",
      "updated_at": "2019-08-02T13:14:46.476Z",
      "actor": {
        "username": "iamchrissmith",
        "cleared": false,
        "verified": false,
        "url": "/iamchrissmith",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp"
    },
    {
      "id": 5490383,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugNew",
      "message": " nvm, I got it. We will look into this report and let you know if we have other questions.",
      "automated_response": false,
      "created_at": "2019-08-02T16:44:11.955Z",
      "updated_at": "2019-08-02T16:44:11.955Z",
      "actor": {
        "username": "iamchrissmith",
        "cleared": false,
        "verified": false,
        "url": "/iamchrissmith",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp"
    },
    {
      "id": 5541649,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportSeverityUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2019-08-09T21:19:38.345Z",
      "updated_at": "2019-08-09T21:19:38.345Z",
      "additional_data": {
        "old_severity": "Critical",
        "new_severity": "High",
        "old_severity_id": 483650,
        "new_severity_id": 489370
      },
      "actor": {
        "username": "iamchrissmith",
        "cleared": false,
        "verified": false,
        "url": "/iamchrissmith",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp"
    },
    {
      "id": 5541651,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BountyAwarded",
      "message": "@lucash-dev thank you very much for reporting this bug. We've agreed that this is a bug in our business logic, and you've earned our $5000 bounty for finding a High Severity bug. Unfortunately, this does not comply with the requirements of our Critical bugs (specifically resulting in the theft of collateral tokens).",
      "automated_response": false,
      "created_at": "2019-08-09T21:21:14.412Z",
      "updated_at": "2019-08-09T21:21:14.412Z",
      "actor": {
        "url": "/makerdao_bbp",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/PxXdq1Fo6fX6n4fzUk31AqPD/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "BlockDev Sp. Z o.o"
        }
      },
      "bounty_currency": "usd",
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp",
      "collaborator": {
        "username": "lucash-dev",
        "url": "/lucash-dev"
      }
    },
    {
      "id": 5541653,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "We have implemented a fix for the bug [here](https://github.com/makerdao/dss/pull/49), look forward to disclosing your report and have initiated the bounty payment through HackerOne.",
      "automated_response": false,
      "created_at": "2019-08-09T21:21:43.654Z",
      "updated_at": "2019-08-09T21:21:43.654Z",
      "actor": {
        "username": "iamchrissmith",
        "cleared": false,
        "verified": false,
        "url": "/iamchrissmith",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "lucash-dev",
        "url": "/lucash-dev"
      },
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp"
    },
    {
      "id": 5545723,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi, @iamchrissmith.\n\nI've taken a look at your fix, and it seems to solve the issue -- my tests now fail. It's also a much better solution than the one I described above.\n\nAbout the requirements for Critical, after carefully re-reading your policy, I understand why it doesn't qualify.\n\nThank you for the bounty!\n\nAlso thank you for the feedback.\n\nI hope to collaborate to your program with new findings in the future.\n\n-- cheers",
      "automated_response": false,
      "created_at": "2019-08-10T17:26:22.757Z",
      "updated_at": "2019-08-10T17:26:22.757Z",
      "actor": {
        "username": "lucash-dev",
        "cleared": true,
        "verified": true,
        "url": "/lucash-dev",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/515/399/dd4a50c732c98417d7be59efa049e8c234259884_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp"
    },
    {
      "id": 5556885,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "Thank you @lucash-dev ! I'm glad our fix works on your end as well! We would like to disclose this report. Would you be okay with that?",
      "automated_response": false,
      "created_at": "2019-08-12T15:17:59.188Z",
      "updated_at": "2019-08-12T15:17:59.188Z",
      "first_to_agree": true,
      "actor": {
        "username": "iamchrissmith",
        "cleared": false,
        "verified": false,
        "url": "/iamchrissmith",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp"
    },
    {
      "id": 5557166,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Actually, sorry, it looks like HackerOne recommends the request process. Let us know.",
      "automated_response": false,
      "created_at": "2019-08-12T15:45:28.394Z",
      "updated_at": "2019-08-12T15:46:50.661Z",
      "actor": {
        "username": "iamchrissmith",
        "cleared": false,
        "verified": false,
        "url": "/iamchrissmith",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp"
    },
    {
      "id": 5560460,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "Sure. I don't see why not disclose, as the code is not yet deployed in the mainnet and the issue is already fixed.\n\nThank you",
      "automated_response": false,
      "created_at": "2019-08-12T23:44:52.330Z",
      "updated_at": "2019-08-12T23:44:52.330Z",
      "actor": {
        "username": "lucash-dev",
        "cleared": true,
        "verified": true,
        "url": "/lucash-dev",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/515/399/dd4a50c732c98417d7be59efa049e8c234259884_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp"
    },
    {
      "id": 5560461,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-08-12T23:44:52.424Z",
      "updated_at": "2019-08-12T23:44:52.424Z",
      "actor": {
        "username": "lucash-dev",
        "cleared": true,
        "verified": true,
        "url": "/lucash-dev",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/515/399/dd4a50c732c98417d7be59efa049e8c234259884_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "makerdao_bbp"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}