{
  "id": 100565,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDA1NjU=",
  "url": "https://hackerone.com/reports/100565",
  "title": "Executing scripts on slack-files.com using SVG",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-11-19T21:31:28.524Z",
  "submitted_at": "2015-11-19T21:31:28.524Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "kamil_hism",
    "url": "/kamil_hism",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/005/311/834a58ff0f4a82db11ee6fe0e38772150ea735f7_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 69,
    "url": "https://hackerone.com/slack",
    "handle": "slack",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/069/683fee312381bc46cadc7ea1950abc87944d12c3_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/069/683fee312381bc46cadc7ea1950abc87944d12c3_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Slack",
      "twitter_handle": "slackhq",
      "website": "https://slack.com",
      "about": "All your team communication in one place, instantly searchable, and available wherever you go."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2016-02-18T21:02:48.459Z",
  "bug_reporter_agreed_on_going_public_at": "2016-01-19T21:02:46.955Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Impact\n\nAlthough `slack-files.com` is a sandbox domain, there are many ways to gain the victim's trust during phishing attack. For example, an attacker might render a fake log-in form with \"You need to sign in to see this file\" message and trick users into handing out their passwords.\n\n\n## Steps to reproduce\n\n1) Download attached to report or use the following code snippet to create SVG file:\n\n```js\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert('script')\">\n  <script type=\"text/javascript\"><![CDATA[\n  // some exploit code here\n  ]]></script>\n\n  <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"green\" />\n</svg>\n```\n\nA SVG script and other DOM elements is equivalent to the elements in HTML, so in the example above `alert('script')` will be executed on svg load event.\n\n2) Upload constructed SVG file to some channel or dm in Slack.\n\n3) Click on message with just uploaded file.\n\n\n## Observed\nClicking on message opens a new tab and navigates user to `slack-files.com`. Once SVG loaded the `alert('script')` is executing.\n\nAlso this file can be shared via public link. In this case victim should click on image preview to start script execute.\n\n\n## Expected\nUsers expect that after clicking on message with file they will see this file or file will be downloaded.\n\n\n## Possible fix\nThere are three ways:\n* If you want to continue render SVG files directly in users browsers, you should refuse executing inline scripts by serving attachments with `Content-Security-Policy: default-src 'none';` header. For example GitHub uses this way (open dev console to observe CSP errors for SVG above: https://camo.githubusercontent.com/ce86214c84dcc6c0d85fc268c1c0b1a122fb37a0/687474703a2f2f6b616d696c2e6869736d2e72752f696d672f6578706c6f697461626c652e737667) But you need to be sure that users do not use deprecated browsers (see http://caniuse.com/#feat=contentsecuritypolicy)\n\n* Do not use `image/svg+xml` Content-Type when serving files. Use `text/plain`, so users will see just a raw inner of SVG file.\n\n* Serve SVG files with `Content-Disposition: attachment;` header. So browsers will start downloading attachment instead of render it in the browser.",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 62499,
      "file_name": "exploitable.svg",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/062/499/fe2abc8a231826baf63c5dbd4a4faf0067f6f47f/exploitable.svg?response-content-disposition=attachment%3B%20filename%3D%22exploitable.svg%22%3B%20filename%2A%3DUTF-8%27%27exploitable.svg&response-content-type=application%2Foctet-stream&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ764WDPOT%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T082144Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDAaCXVzLXdlc3QtMiJGMEQCIEJCpOT%2FnLAxlJy%2B%2B%2Fa0A%2Fuz9UJx%2BTkeR616HCfZ%2Bl5TAiBPgAvOCdyFK%2Fsu0e4HNruMfHePWlQ2%2B7jDR3qgABsc6SqwBQgpEAMaDDAxMzYxOTI3NDg0OSIMf%2BnUXay0WVRe0QUAKo0FTe%2F3%2F5R16%2FajyCApoURehraE8bgx4wMDslPTf6h5vkZ7QkD6mew0zmZSVVL71O%2BS%2FAAsUL9gjR64cxjTN0fyO6swbmSDfmOouN8529hjbJrHwKh%2Bg%2FqR14Qh%2FwtS9MNlvaaaFYjm15dxLjR1qbkNoM2VW66X%2BaIjFo%2Bjm1L3h4YvC7uD%2BkF5SvvermW8bkX9PbMNWbV0ri7d4nxEYyfmSygHPF3jBUj9qKtE5jIFlUFX7quLROd7IFutIjfbr9BzD5XjBcfDBgOelMJO%2FkBoiNdwlfV9uTG7ZKjiTRJNivEEwodRejMzwiSEZ6GcGSmQR9RpewFhhM%2Fz%2BYkhlE7gFMjx24KTCJ1K3CyskWpwdC68JN9Y8hXezAl7pK2gf3r62LKzvw1%2FJhkqmVuo8i7XCkeS0MYtV7XnpE5p3jBHKTK7q%2FumHS%2FwzVymb2EeSXBP6qNbvr3O18rzDvbqY5uBkazVycShPwpL%2BBDoPdQ%2FbeFqcglYv2oAounyiTXR9eWNtzw8kEZw6AKflmPiQ0DprqSHaiMMAb55fo7dbXjwr20ktZwBZZqenOtvB7eyoQN%2BG2WqO0K44it4aGb6g8ehgYvsRelS0oR5XwTwu2o4F0Fj%2BADJ3%2F5TzGpfal1VqsaCMrr4em0aQJ3rb4Remj%2F%2BJTVleGnaKGbF2teDXflsoK2zwP9nkJ4nvashggxSrAZooM%2BU4pbkYzpxDwMNvMOJWFOf9GozT%2FooeLq5CYQghwJHMTpJ71dTOR%2FqvCNyL8BZYjJA7Wc19LQQ%2FS016DeF1wTf5sdMO0l86aHqv8BSk77LD335DPvtqsjzrJ7qieEjW9dMYJJFmqBMM1OoakNug2zY166La6bNXU3UQhYwjai6qAY6sgHNsBk5AOLuBX1agqrXZLp%2BOkzGnqFdy%2FkFHE6bDXd5K%2BxlNQa21ZdjhDZitHh8OyVITBolLS2EIAdcZfL%2FRZstKTGRFPqW5I%2BMNOHFKWShLCpyVIcbI8q0Una9aOqcZOJOiV54v4hLyirFWKBhoo1td8jT%2BsTbcVm%2BjosOM7etsoiTgM%2FlTBDyy%2BG06%2FdRbqpBa7eB3ENMxwVCTWHA0QHkY6jW1%2F7VKmtouFFTKpcdL3mX&X-Amz-SignedHeaders=host&X-Amz-Signature=a972cc731d3327f62398d3efebad0ccb90c8a4e7f4d3638832da5e59ece01475",
      "file_size": 258,
      "type": "text/html",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2016-02-18T21:02:47.428Z",
  "allow_singular_disclosure_after": -239627936.63533816,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "test0x00",
    "sameerphad72",
    "kamil_hism"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 692217,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Seems like HackerOne changed attachment extension from `.svg` to `.html`. Correct format of POC SVG file is `.svg`",
      "automated_response": false,
      "created_at": "2015-11-19T21:37:15.381Z",
      "updated_at": "2015-11-19T21:37:15.381Z",
      "actor": {
        "username": "kamil_hism",
        "cleared": false,
        "verified": false,
        "url": "/kamil_hism",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/005/311/834a58ff0f4a82db11ee6fe0e38772150ea735f7_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    },
    {
      "id": 692466,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugNotApplicable",
      "message": "Thanks for your report.\n\nAs you mentioned, slack-files.com is a site specifically setup as a sandbox domain for file hosting.  Remember that XSS doesn't just mean 'executing JavaScript' (which you have here) but 'executing JavaScript in the target's origin' (which in this case would be *.slack.com -- an entirely different domain protected from this XSS by the Same-Origin Policy). At this time, Slack isn't accepting reports concerning XSS on slack-files.com and as such we will be closing this report.\n\nThanks and good luck with future bug hunting.",
      "automated_response": false,
      "created_at": "2015-11-20T01:27:27.934Z",
      "updated_at": "2015-11-20T01:27:27.934Z",
      "actor": {
        "username": "bugtriage-josh",
        "cleared": false,
        "verified": false,
        "url": "/bugtriage-josh",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    },
    {
      "id": 692976,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Yes, you are right, but actually I did not name it as XSS. Lack of secure headers on SVG files being served from `slack-files.com` -- is legitimate **security issue**.\n\nPlease just check this video out:\n\nhttps://youtu.be/PzL2JBcCojo\n\nUser clicks on **attachment** (not on **external** link to some website) and expects that file will be shown or downloaded. So probability that user will type his password in this fake login modal is very high, don't you think so?\n\nI am saying all of this not for bounty (though you awarded for similar issue: https://hackerone.com/reports/2617), I just want you take the threat seriously and mitigate this issue.\n",
      "automated_response": false,
      "created_at": "2015-11-20T14:27:54.615Z",
      "updated_at": "2015-11-20T14:27:54.615Z",
      "actor": {
        "username": "kamil_hism",
        "cleared": false,
        "verified": false,
        "url": "/kamil_hism",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/005/311/834a58ff0f4a82db11ee6fe0e38772150ea735f7_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    },
    {
      "id": 695296,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@bugtriage, please confirm that despite a proof of concept that leverages absence of security headers, you won't fix this issue and do not admit it is a valid security issue. Just wanna publicly disclose this vulnerability in this week in blog post.",
      "automated_response": false,
      "created_at": "2015-11-23T12:43:49.773Z",
      "updated_at": "2015-11-23T12:43:49.773Z",
      "actor": {
        "username": "kamil_hism",
        "cleared": false,
        "verified": false,
        "url": "/kamil_hism",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/005/311/834a58ff0f4a82db11ee6fe0e38772150ea735f7_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    },
    {
      "id": 763609,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "As I can see now, you chose and implemented 3rd solution from provided `Possible fixes` paragraph. Good job!\n\nNevertheless, you took this vulnerability seriously, fixed it and made product more secure against phishing attacks. I wish we could make this report public to show your BB program not so bad as everybody say ;)",
      "automated_response": false,
      "created_at": "2016-01-19T15:37:58.522Z",
      "updated_at": "2016-01-19T15:43:54.672Z",
      "actor": {
        "username": "kamil_hism",
        "cleared": false,
        "verified": false,
        "url": "/kamil_hism",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/005/311/834a58ff0f4a82db11ee6fe0e38772150ea735f7_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    },
    {
      "id": 763827,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugReopened",
      "message": "",
      "automated_response": false,
      "created_at": "2016-01-19T17:48:03.063Z",
      "updated_at": "2016-01-19T17:48:03.063Z",
      "actor": {
        "username": "slacka",
        "cleared": false,
        "verified": false,
        "url": "/slacka",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    },
    {
      "id": 763828,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "Hello kamil_hism,\n\nWe changed the logic here since there was a much more direct attack utilizing this weakness highlighted by another report, however I will mark this report as resolved as the root cause for your issue was mitigated by our changes.\n\nCheers,\nSlack",
      "automated_response": false,
      "created_at": "2016-01-19T17:48:12.983Z",
      "updated_at": "2016-01-19T17:48:12.983Z",
      "actor": {
        "username": "slacka",
        "cleared": false,
        "verified": false,
        "url": "/slacka",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "kamil_hism",
        "url": "/kamil_hism"
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    },
    {
      "id": 764236,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "But that \"much more direct attack\" wouldn't be possible if you'd simply fixed this \"weakness\" after I reported it, don't you think so? :) I thought the main purpose of BB programs is mitigation of _any_ security risk, not waiting while it'll start escalating.\n\nThanks. Accept public disclosure request please.",
      "automated_response": false,
      "created_at": "2016-01-19T21:02:46.977Z",
      "updated_at": "2016-01-19T21:02:46.977Z",
      "first_to_agree": true,
      "actor": {
        "username": "kamil_hism",
        "cleared": false,
        "verified": false,
        "url": "/kamil_hism",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/005/311/834a58ff0f4a82db11ee6fe0e38772150ea735f7_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    },
    {
      "id": 803398,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2016-02-18T21:02:48.541Z",
      "updated_at": "2016-02-18T21:02:48.541Z",
      "actor": {
        "url": "/slack",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/069/683fee312381bc46cadc7ea1950abc87944d12c3_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Slack"
        }
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    },
    {
      "id": 4642373,
      "is_internal": false,
      "editable": false,
      "type": "Activities::NotEligibleForBounty",
      "message": "We're going back through our old bounties and clearing out the history - we're updating this to reflect the past decision. Thank you for your understanding!",
      "automated_response": false,
      "created_at": "2019-04-25T15:34:19.947Z",
      "updated_at": "2019-04-25T15:34:19.947Z",
      "actor": {
        "url": "/slack",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/069/683fee312381bc46cadc7ea1950abc87944d12c3_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Slack"
        }
      },
      "genius_execution_id": null,
      "team_handle": "slack"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}