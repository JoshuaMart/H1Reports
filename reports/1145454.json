{
  "id": 1145454,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTQ1NDU0",
  "url": "https://hackerone.com/reports/1145454",
  "title": "lib/net/ftp.rb: trusting PASV responses allow client abuse",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2021-04-02T15:56:47.127Z",
  "submitted_at": "2021-04-02T15:56:47.192Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "sighook",
    "url": "/sighook",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 7724,
    "url": "https://hackerone.com/ruby",
    "handle": "ruby",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby",
      "twitter_handle": "",
      "website": "https://www.ruby-lang.org",
      "about": "A Programmer's Best Friend"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2021-31810",
    "CVE-2020-8284",
    "CVE-2007-1562"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-07-08T15:34:41.703Z",
  "bug_reporter_agreed_on_going_public_at": "2021-07-08T15:34:41.623Z",
  "team_member_agreed_on_going_public_at": "2021-07-08T01:10:42.993Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "When `net/ftp` performs a passive FTP transfer, it tries to using PASV.  Passive mode is what `net/ftp` uses by default.\nA server response to a PASV command includes the (IPv4) address and port number for the client to connect back to in order to perform the actual data\ntransfer.\n\nThis is how the FTP protocol is designed to work.[^1] \n\nA malicious server can use the PASV response to trick `net/ftp` into connecting back to a given IP address and port, and this way potentially make it extract information about services that are otherwise private and not disclosed, for example doing port scanning and service banner extractions.\nIf `net/ftp` operates on a URL provided by a user (with by all means is an unwise setup), a user can exploit that and pass in a URL to a malicious FTP server instance without needing any server breach to perform the attack.\n\nOther FTP clients have in the past also had this flaw and have fixed it at different points in time:\n* Chrome in 2009: https://github.com/chromium/chromium/commit/a1cea36673186829ab5d1d1408ac50ded3ca5850\n* Curl in 2020 (CVE-2020-8284) : https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8284\n* Firefox in 2007 (CVE-2007-1562): https://bugzilla.mozilla.org/show_bug.cgi?id=370559. In that bugzilla issue there's also a link to paper that describes exactly this and lists a few affected clients (link to archive.org since the original has vanished) https://web.archive.org/web/20070317052623/http://bindshell.net/papers/ftppasv/ftp-client-pasv-manipulation.pdf\n\n[^1]: With one exception: EPSV. The correct behaviour is  first try the EPSV command and if that is not supported,  fall back to using PASV.\n\n## Impact\n\nThis behavior is by design (unless `EPSV ALL` is sent) but it could still lead to security issues depending on the context. \nI encountered this issue within a web application with a server-side request forgery (SSRF) issue (but this issue applies to any form of SSRF with `net/ftp` as the request processor). In that context, one can get the following additional capabilities:\n\n* Reliable tcp port scanning (this is not normally possible by just providing a random ip:port to `net/ftp`)\n* Network service banner extraction (we setup the data channel on the target ip:port and extract for example an ssh banner: `SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.8` without any errors)\n* Potential bypass of ip/port restrictions, e.g. the server might be filtering internal IPs or allowing only specific ports (but still allowing FTP)\n\n# PoC\n\nI used the following simple code:\n```ruby\nrequire 'net/ftp'\nftp = Net::FTP.new\nftp.connect(ARGV[0], ARGV[1])\nftp.login\n#ftp.passive = true # by default\nftp.getbinaryfile('/whatever', 'whatever')\nftp.close\n```\nAnd the custom ftp-server:\n```\n[Parent] Got connection from 192.168.100.2:43520... Spawned process 31749 to handle connection\n[PID 31749] SEND: 220 FTP PASV Demo Server v1.0\n[PID 31749] RECV: USER anonymous\n[PID 31749] SEND: 331 Please specify the password.\n[PID 31749] RECV: PASS anonymous@\n[PID 31749] SEND: 230 Login successful.\n[PID 31749] RECV: TYPE I\n[PID 31749] SEND: 200 Switching to Binary mode.\n[PID 31749] RECV: PASV\n[PID 31750] Handling incoming request to PASV port\n>>> Sending 127.0.0.1:8123\n[PID 31750] SEND: 227 Entering Passive Mode (127,0,0,1,31,187)\n[PID 31750] Exiting\n-------------------------------- The Port is Open ---------------------------------\n[PID 31749] RECV: RETR /whatever\n[PID 31749] SEND: 150 Opening BINARY mode data connection for /whatever (0 bytes).\n[PID 31749] SEND: 226 File send OK.\n[PID 31749] Exiting\n----------------------------------------------------------------------------------\n[Parent] Got connection from 192.168.100.2:43524... Spawned process 31787 to handle connection\n[PID 31787] SEND: 220 FTP PASV Demo Server v1.0\n[PID 31787] RECV: USER anonymous\n[PID 31787] SEND: 331 Please specify the password.\n[PID 31787] RECV: PASS anonymous@\n[PID 31787] SEND: 230 Login successful.\n[PID 31787] RECV: TYPE I\n[PID 31787] SEND: 200 Switching to Binary mode.\n[PID 31787] RECV: PASV\n[PID 31788] Handling incoming request to PASV port\n>>> 127.0.0.1:8080\n[PID 31788] SEND: 227 Entering Passive Mode (127,0,0,1,31,144)\n[PID 31788] Exiting\n------------------------------- The Port is Closed --------------------------------\n[PID 31787] RECV: ERROR: unmatched reply\n[PID 31787] Exiting\n----------------------------------------------------------------------------------\n```\n\n# Mitigation\n\nCurrently, `net/ftp` can mitigate this flaw by disabling passive mode, which is enabled by default.  But this is not the best solution to this problem, perhaps, as well as disabling passive mode by default.\n\nFor example, firefox just ignores the ip address that is sent from the server. But Curl provides the option which tell to not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection. Instead curl will re-use the same IP address it already uses for the control connection. The second seems more reasonable.",
  "bounty_amount": "500.0",
  "formatted_bounty": "$500",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2021-08-07T01:10:43.134Z",
  "allow_singular_disclosure_after": -67154433.68963335,
  "singular_disclosure_allowed": true,
  "vote_count": 9,
  "voters": [
    "sw33tlie",
    "run_win",
    "ali",
    "citril",
    "cryptographer",
    "mindofhacker",
    "ekgaribadmi",
    "thelilnix",
    "anton_ivanov"
  ],
  "severity": {
    "rating": "low",
    "score": 3.7,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 28212,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/ruby/ruby",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 11225069,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thank you for the report. @shugo, can you please check this ticket?",
      "automated_response": false,
      "created_at": "2021-04-02T16:30:06.676Z",
      "updated_at": "2021-04-02T16:30:06.676Z",
      "actor": {
        "username": "mame",
        "cleared": false,
        "verified": false,
        "url": "/mame",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/8vhoh1hyan61xovrmfhy7kmi4gib/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 11250718,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks for your report.\n\nI'd like to fix net/ftp to ignore the IP address sent from the server by default, and to add a new option `use_pasv_ip` to use the IP address sent from the server.  I think it's a rare case that `use_pasv_ip` is necessary.\nDo you have any concerns?\n\n",
      "automated_response": false,
      "created_at": "2021-04-05T05:51:06.853Z",
      "updated_at": "2021-04-05T05:51:06.853Z",
      "actor": {
        "username": "shugo",
        "cleared": false,
        "verified": false,
        "url": "/shugo",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 11250800,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Nope. It seems reasonable.",
      "automated_response": false,
      "created_at": "2021-04-05T06:09:36.310Z",
      "updated_at": "2021-04-05T06:09:36.310Z",
      "actor": {
        "username": "sighook",
        "cleared": false,
        "verified": false,
        "url": "/sighook",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 11251254,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "",
      "automated_response": false,
      "created_at": "2021-04-05T07:38:17.579Z",
      "updated_at": "2021-04-05T07:38:17.579Z",
      "actor": {
        "username": "hsbt",
        "cleared": false,
        "verified": false,
        "url": "/hsbt",
        "profile_picture_urls": {
          "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/dx6z1zqthgan1c4rv9ppn4jx3832/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%222eUvHh_4_400x400.png%22%3B%20filename%2A%3DUTF-8%27%272eUvHh_4_400x400.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5NIKTYBN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T071116Z&X-Amz-Expires=2430&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJHMEUCIQCM2la1GSZwFkbzZwAlaXr0SDHvL7evb0H8C%2BcAyp6rJwIgUS%2FvPViGx2g0I162nhXzz0XdF2Xh43GEuLX0y03wgpgqsgUIIxADGgwwMTM2MTkyNzQ4NDkiDNqaUM2zKa0nRrRjPiqPBY3HR7dtjU%2FqgV%2Bme1Vi2BF0srTbVHaeVx7AXFxoOny%2FWf6dy0NtyNi5jqQtZSPTNusRUoRBEVYluoE2pTzC4h8vkvORrE9JykyZYTHH8ocgk5lc0APz3GbNdw8EDi7TxEfkQrfeNcb9De%2FCYblR%2BcD3eIOuf0HhbFpNONPshVMD2bahKYX2YefU56UpZ3VXRBwPkoVPMgab%2BFva6rLt69nWaBZT3wd3EIEFt5XoYZDHjSKORRTdwTs%2FDCgqPEoyGhV0VrhBCUYqQbAukt7wGk7NrNDWs7mZmkL9Kv28fQIY1Q7h9exaudTPtQP0E2yZtr3wKCcWNQFiX57yas%2B0bvmeuA3ym%2BSzBLvdO1P9ziA8htBG3pApMoYNVRcJXqB9Ulg7ZaIeoGHU8ucHynNO64xiJkECfQ%2F83m0uusP%2FCbg8v%2FC8x09sz0WJsbCM5h90DddiMkeTK%2B47Ho2K%2FzWj9Vax4pTTeyBAgNycvbE1C5SdrAIC8ofvTBgjD9VJnS4%2Fm%2FaSERgD%2FpHxyUa3F9f2xwK2zzZHVjSUL9gImPRAlJZ6Nh8ldRy7Y8qAeEkVVgxlkabpkSUzkeJFYWeyAIFxnGiALPstIyZO91J3sBSrtYKPCa81FT%2BAe5FdP%2F16dX7M8G2QBoHlOCiborPNR188kYqbrtspQiMLdSdCqE06hDUFQ3PcbE8pZjc3H5dcny%2BqL2xr08qLnFp5WdXxcvFRdgKAOAiyBUtpuXF6qITm0ms7xwUQpzSFqpQFGxJNdqYxaBQFXFr1B8dripk5f1Qg734MxZRFa8OXrC0SUBclX%2FIsJJJqUWr7uq4q66njtMMLeKaRxJh4vXuOMKGmNrytwHC7GauHczb7gJBY9EaCQsEwyfu4qAY6sQHEE5yo4qz1nHc7W%2FmuNCkeiEC06BT2KXW5Ye7wR%2BJRqa4RD1Evl5MaAbKYOUm3j3RKv8ZiQXgBRIDsjMyLkeHJDlM30wkC5GTlhwpLfAXvVAeC%2BGlwLLBvL176VeFL7S7mGPxQhRCLoa8DCYKS9rPurVlp6T5EPeBgnNUxOC0WTs38l8ylcSgu2HURNvrOIIHuAxsNQYx%2Bnc4wcFv0RnkFptS7LlYhwcWV%2FKYEjxiy5O8%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=387c822e2fdda6fd4f396a1150f32cbc43a485c5eeeaa97fc23846b6c6c88548"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 11269598,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I've made the following patch.\nUnfortunately new versions of Ruby have just been released yesterday, and the severity of this issue is low, so the fix will be included in the next releases of Ruby (maybe a few or several months later).\n\n```\ncommit be549bd6e68877731ec77f163f712189894743f7\nAuthor: Shugo Maeda <shugo@ruby-lang.org>\nDate:   Mon Apr 5 17:03:25 2021 +0900\n\n    Ignore IP addresses in PASV responses by default, and add new option use_pasv_ip\n    \n    This fixes CVE-2020-8284.\n    Reported by Alexandr Savca.\n\ndiff --git a/lib/net/ftp.rb b/lib/net/ftp.rb\nindex dc498e0..eeca328 100644\n--- a/lib/net/ftp.rb\n+++ b/lib/net/ftp.rb\n@@ -98,6 +98,10 @@ module Net\n     # When +true+, the connection is in passive mode.  Default: +true+.\n     attr_accessor :passive\n \n+    # When +true+, use the IP address in PASV responses.  Otherwise, it uses\n+    # the same IP address for the control connection.  Default: +false+.\n+    attr_accessor :use_pasv_ip\n+\n     # When +true+, all traffic to and from the server is written\n     # to +$stdout+.  Default: +false+.\n     attr_accessor :debug_mode\n@@ -206,6 +210,9 @@ module Net\n     #                          handshake.\n     #                          See Net::FTP#ssl_handshake_timeout for\n     #                          details.  Default: +nil+.\n+    # use_pasv_ip::  When +true+, use the IP address in PASV responses.\n+    #                Otherwise, it uses the same IP address for the control\n+    #                connection.  Default: +false+.\n     # debug_mode::  When +true+, all traffic to and from the server is\n     #               written to +$stdout+.  Default: +false+.\n     #\n@@ -266,6 +273,7 @@ module Net\n       @open_timeout = options[:open_timeout]\n       @ssl_handshake_timeout = options[:ssl_handshake_timeout]\n       @read_timeout = options[:read_timeout] || 60\n+      @use_pasv_ip = options[:use_pasv_ip] || false\n       if host\n         connect(host, options[:port] || FTP_PORT)\n         if options[:username]\n@@ -1380,7 +1388,12 @@ module Net\n         raise FTPReplyError, resp\n       end\n       if m = /\\((?<host>\\d+(?:,\\d+){3}),(?<port>\\d+,\\d+)\\)/.match(resp)\n-        return parse_pasv_ipv4_host(m[\"host\"]), parse_pasv_port(m[\"port\"])\n+        if @use_pasv_ip\n+          host = parse_pasv_ipv4_host(m[\"host\"])\n+        else\n+          host = @bare_sock.remote_address.ip_address\n+        end\n+        return host, parse_pasv_port(m[\"port\"])\n       else\n         raise FTPProtoError, resp\n       end\ndiff --git a/test/net/ftp/test_ftp.rb b/test/net/ftp/test_ftp.rb\nindex 14afef8..8ab5181 100644\n--- a/test/net/ftp/test_ftp.rb\n+++ b/test/net/ftp/test_ftp.rb\n@@ -61,7 +61,7 @@ class FTPTest < Test::Unit::TestCase\n   end\n \n   def test_parse227\n-    ftp = Net::FTP.new\n+    ftp = Net::FTP.new(nil, use_pasv_ip: true)\n     host, port = ftp.send(:parse227, \"227 Entering Passive Mode (192,168,0,1,12,34)\")\n     assert_equal(\"192.168.0.1\", host)\n     assert_equal(3106, port)\n@@ -80,6 +80,14 @@ class FTPTest < Test::Unit::TestCase\n     assert_raise(Net::FTPProtoError) do\n       ftp.send(:parse227, \"227 ) foo bar (\")\n     end\n+\n+    ftp = Net::FTP.new\n+    sock = OpenStruct.new\n+    sock.remote_address = OpenStruct.new\n+    sock.remote_address.ip_address = \"10.0.0.1\"\n+    ftp.instance_variable_set(:@bare_sock, sock)\n+    host, port = ftp.send(:parse227, \"227 Entering Passive Mode (192,168,0,1,12,34)\")\n+    assert_equal(\"10.0.0.1\", host)\n   end\n \n   def test_parse228\n@@ -2509,10 +2517,155 @@ EOF\n     end\n   end\n \n+  def test_ignore_pasv_ip\n+    commands = []\n+    binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3\n+    server = create_ftp_server(nil, \"127.0.0.1\") { |sock|\n+      sock.print(\"220 (test_ftp).\\r\\n\")\n+      commands.push(sock.gets)\n+      sock.print(\"331 Please specify the password.\\r\\n\")\n+      commands.push(sock.gets)\n+      sock.print(\"230 Login successful.\\r\\n\")\n+      commands.push(sock.gets)\n+      sock.print(\"200 Switching to Binary mode.\\r\\n\")\n+      line = sock.gets\n+      commands.push(line)\n+      data_server = TCPServer.new(\"127.0.0.1\", 0)\n+      port = data_server.local_address.ip_port\n+      sock.printf(\"227 Entering Passive Mode (999,0,0,1,%s).\\r\\n\",\n+                  port.divmod(256).join(\",\"))\n+      commands.push(sock.gets)\n+      sock.print(\"150 Opening BINARY mode data connection for foo (#{binary_data.size} bytes)\\r\\n\")\n+      conn = data_server.accept\n+      binary_data.scan(/.{1,1024}/nm) do |s|\n+        conn.print(s)\n+      end\n+      conn.shutdown(Socket::SHUT_WR)\n+      conn.read\n+      conn.close\n+      data_server.close\n+      sock.print(\"226 Transfer complete.\\r\\n\")\n+    }\n+    begin\n+      begin\n+        ftp = Net::FTP.new\n+        ftp.passive = true\n+        ftp.read_timeout *= 5 if defined?(RubyVM::MJIT) && RubyVM::MJIT.enabled? # for --jit-wait\n+        ftp.connect(\"127.0.0.1\", server.port)\n+        ftp.login\n+        assert_match(/\\AUSER /, commands.shift)\n+        assert_match(/\\APASS /, commands.shift)\n+        assert_equal(\"TYPE I\\r\\n\", commands.shift)\n+        buf = ftp.getbinaryfile(\"foo\", nil)\n+        assert_equal(binary_data, buf)\n+        assert_equal(Encoding::ASCII_8BIT, buf.encoding)\n+        assert_equal(\"PASV\\r\\n\", commands.shift)\n+        assert_equal(\"RETR foo\\r\\n\", commands.shift)\n+        assert_equal(nil, commands.shift)\n+      ensure\n+        ftp.close if ftp\n+      end\n+    ensure\n+      server.close\n+    end\n+  end\n+\n+  def test_use_pasv_ip\n+    commands = []\n+    binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3\n+    server = create_ftp_server(nil, \"127.0.0.1\") { |sock|\n+      sock.print(\"220 (test_ftp).\\r\\n\")\n+      commands.push(sock.gets)\n+      sock.print(\"331 Please specify the password.\\r\\n\")\n+      commands.push(sock.gets)\n+      sock.print(\"230 Login successful.\\r\\n\")\n+      commands.push(sock.gets)\n+      sock.print(\"200 Switching to Binary mode.\\r\\n\")\n+      line = sock.gets\n+      commands.push(line)\n+      data_server = TCPServer.new(\"127.0.0.1\", 0)\n+      port = data_server.local_address.ip_port\n+      sock.printf(\"227 Entering Passive Mode (127,0,0,1,%s).\\r\\n\",\n+                  port.divmod(256).join(\",\"))\n+      commands.push(sock.gets)\n+      sock.print(\"150 Opening BINARY mode data connection for foo (#{binary_data.size} bytes)\\r\\n\")\n+      conn = data_server.accept\n+      binary_data.scan(/.{1,1024}/nm) do |s|\n+        conn.print(s)\n+      end\n+      conn.shutdown(Socket::SHUT_WR)\n+      conn.read\n+      conn.close\n+      data_server.close\n+      sock.print(\"226 Transfer complete.\\r\\n\")\n+    }\n+    begin\n+      begin\n+        ftp = Net::FTP.new\n+        ftp.passive = true\n+        ftp.use_pasv_ip = true\n+        ftp.read_timeout *= 5 if defined?(RubyVM::MJIT) && RubyVM::MJIT.enabled? # for --jit-wait\n+        ftp.connect(\"127.0.0.1\", server.port)\n+        ftp.login\n+        assert_match(/\\AUSER /, commands.shift)\n+        assert_match(/\\APASS /, commands.shift)\n+        assert_equal(\"TYPE I\\r\\n\", commands.shift)\n+        buf = ftp.getbinaryfile(\"foo\", nil)\n+        assert_equal(binary_data, buf)\n+        assert_equal(Encoding::ASCII_8BIT, buf.encoding)\n+        assert_equal(\"PASV\\r\\n\", commands.shift)\n+        assert_equal(\"RETR foo\\r\\n\", commands.shift)\n+        assert_equal(nil, commands.shift)\n+      ensure\n+        ftp.close if ftp\n+      end\n+    ensure\n+      server.close\n+    end\n+  end\n+\n+  def test_use_pasv_invalid_ip\n+    commands = []\n+    binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3\n+    server = create_ftp_server(nil, \"127.0.0.1\") { |sock|\n+      sock.print(\"220 (test_ftp).\\r\\n\")\n+      commands.push(sock.gets)\n+      sock.print(\"331 Please specify the password.\\r\\n\")\n+      commands.push(sock.gets)\n+      sock.print(\"230 Login successful.\\r\\n\")\n+      commands.push(sock.gets)\n+      sock.print(\"200 Switching to Binary mode.\\r\\n\")\n+      line = sock.gets\n+      commands.push(line)\n+      sock.print(\"227 Entering Passive Mode (999,0,0,1,48,57).\\r\\n\")\n+      commands.push(sock.gets)\n+    }\n+    begin\n+      begin\n+        ftp = Net::FTP.new\n+        ftp.passive = true\n+        ftp.use_pasv_ip = true\n+        ftp.read_timeout *= 5 if defined?(RubyVM::MJIT) && RubyVM::MJIT.enabled? # for --jit-wait\n+        ftp.connect(\"127.0.0.1\", server.port)\n+        ftp.login\n+        assert_match(/\\AUSER /, commands.shift)\n+        assert_match(/\\APASS /, commands.shift)\n+        assert_equal(\"TYPE I\\r\\n\", commands.shift)\n+        assert_raise(SocketError) do\n+          ftp.getbinaryfile(\"foo\", nil)\n+        end\n+      ensure\n+        ftp.close if ftp\n+      end\n+    ensure\n+      server.close\n+    end\n+  end\n+\n   private\n \n-  def create_ftp_server(sleep_time = nil)\n-    server = TCPServer.new(SERVER_ADDR, 0)\n+  def create_ftp_server(sleep_time = nil, addr = SERVER_ADDR)\n+    server = TCPServer.new(addr, 0)\n     @thread = Thread.start do\n       if sleep_time\n         sleep(sleep_time)\n```\n",
      "automated_response": false,
      "created_at": "2021-04-06T00:51:52.055Z",
      "updated_at": "2021-04-06T00:51:52.055Z",
      "actor": {
        "username": "shugo",
        "cleared": false,
        "verified": false,
        "url": "/shugo",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 11277988,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "LGTM. I also checked the `EPSV/LPSV` message parsing just in case, and everything is fine there as well. Great.\n\nP.S. `parse228/LPSV` is nevertheless vulnerable (when parsing `host/port`), but since it is not used, everything is fine. The main thing is not to forget to fix it if you suddenly decide to introduce support for `LPSV` :)",
      "automated_response": false,
      "created_at": "2021-04-06T11:33:30.570Z",
      "updated_at": "2021-04-06T11:33:30.570Z",
      "actor": {
        "username": "sighook",
        "cleared": false,
        "verified": false,
        "url": "/sighook",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 11278311,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "> LGTM. I also checked the `EPSV/LPSV` message parsing just in case, and everything is fine there as well. Great.\n\nThanks for your review.\n\n> P.S. `parse228/LPSV` is nevertheless vulnerable (when parsing `host/port`), but since it is not used, everything is fine. The main thing is not to forget to fix it if you suddenly decide to introduce support for `LPSV` :)\n\nYes, parse228 is confusing.\nI'd like to remove it after this fix is released.",
      "automated_response": false,
      "created_at": "2021-04-06T11:50:03.290Z",
      "updated_at": "2021-04-06T11:50:03.290Z",
      "actor": {
        "username": "shugo",
        "cleared": false,
        "verified": false,
        "url": "/shugo",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 11423623,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "This report was discussed in the previous developers' meeting, and we agreed that this qualifies as a security issue. I'll ask for CVE later.",
      "automated_response": false,
      "created_at": "2021-04-17T08:27:15.814Z",
      "updated_at": "2021-04-17T08:27:15.814Z",
      "actor": {
        "username": "mame",
        "cleared": false,
        "verified": false,
        "url": "/mame",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/8vhoh1hyan61xovrmfhy7kmi4gib/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 11650084,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": " CVE-2021-31810 has been assigned:\n\n> [Suggested description]\n> An issue was discovered in Ruby through 2.6.7, 2.7.x through 2.7.3, and 3.x through 3.0.1.\n> A malicious FTP server can use the PASV response to trick Net::FTP\n> into connecting back to a given IP address and port. This\n> potentially makes curl extract information about services that are\n> otherwise private and not disclosed (e.g., the attacker can conduct port scans\n> and service banner extractions).\n>\n> ------------------------------------------\n>\n> [VulnerabilityType Other]\n> Incorrect Access Control\n>\n> ------------------------------------------\n>\n> [Vendor of Product]\n> the Ruby community\n>\n> ------------------------------------------\n>\n> [Affected Product Code Base]\n> Ruby - 3.0.1 or before\n> Ruby - 2.7.3 or before\n> Ruby - 2.6.7 or before\n>\n> ------------------------------------------\n>\n> [Affected Component]\n> Net::FTP\n>\n> ------------------------------------------\n>\n> [Attack Type]\n> Remote\n>\n> ------------------------------------------\n>\n> [Impact Information Disclosure]\n> true\n>\n> ------------------------------------------\n>\n> [Attack Vectors]\n> To exploit vulnerability, a user must connect to a malicious FTP server.\n>\n> ------------------------------------------\n>\n> [Reference]\n> https://hackerone.com/reports/1145454\n>\n> ------------------------------------------\n>\n> [Has vendor confirmed or acknowledged the vulnerability?]\n> true\n>\n> ------------------------------------------\n>\n> [Discoverer]\n> Alexandr Savca\nUse CVE-2021-31810.\n--\nCVE Assignment Team\nM/S M300, 202 Burlington Road, Bedford, MA 01730 USA\n[ A PGP key is available for encrypted communications at\n  https://cve.mitre.org/cve/request_id.html ]",
      "automated_response": false,
      "created_at": "2021-05-07T00:14:02.800Z",
      "updated_at": "2021-05-07T00:14:02.800Z",
      "actor": {
        "username": "shugo",
        "cleared": false,
        "verified": false,
        "url": "/shugo",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 11650823,
      "is_internal": false,
      "editable": false,
      "type": "Activities::CveIdAdded",
      "message": "",
      "automated_response": false,
      "created_at": "2021-05-07T02:42:39.366Z",
      "updated_at": "2021-05-07T02:42:39.366Z",
      "cve_ids": [
        "CVE-2021-31810"
      ],
      "actor": {
        "username": "hsbt",
        "cleared": false,
        "verified": false,
        "url": "/hsbt",
        "profile_picture_urls": {
          "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/dx6z1zqthgan1c4rv9ppn4jx3832/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%222eUvHh_4_400x400.png%22%3B%20filename%2A%3DUTF-8%27%272eUvHh_4_400x400.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5NIKTYBN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T071116Z&X-Amz-Expires=2430&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJHMEUCIQCM2la1GSZwFkbzZwAlaXr0SDHvL7evb0H8C%2BcAyp6rJwIgUS%2FvPViGx2g0I162nhXzz0XdF2Xh43GEuLX0y03wgpgqsgUIIxADGgwwMTM2MTkyNzQ4NDkiDNqaUM2zKa0nRrRjPiqPBY3HR7dtjU%2FqgV%2Bme1Vi2BF0srTbVHaeVx7AXFxoOny%2FWf6dy0NtyNi5jqQtZSPTNusRUoRBEVYluoE2pTzC4h8vkvORrE9JykyZYTHH8ocgk5lc0APz3GbNdw8EDi7TxEfkQrfeNcb9De%2FCYblR%2BcD3eIOuf0HhbFpNONPshVMD2bahKYX2YefU56UpZ3VXRBwPkoVPMgab%2BFva6rLt69nWaBZT3wd3EIEFt5XoYZDHjSKORRTdwTs%2FDCgqPEoyGhV0VrhBCUYqQbAukt7wGk7NrNDWs7mZmkL9Kv28fQIY1Q7h9exaudTPtQP0E2yZtr3wKCcWNQFiX57yas%2B0bvmeuA3ym%2BSzBLvdO1P9ziA8htBG3pApMoYNVRcJXqB9Ulg7ZaIeoGHU8ucHynNO64xiJkECfQ%2F83m0uusP%2FCbg8v%2FC8x09sz0WJsbCM5h90DddiMkeTK%2B47Ho2K%2FzWj9Vax4pTTeyBAgNycvbE1C5SdrAIC8ofvTBgjD9VJnS4%2Fm%2FaSERgD%2FpHxyUa3F9f2xwK2zzZHVjSUL9gImPRAlJZ6Nh8ldRy7Y8qAeEkVVgxlkabpkSUzkeJFYWeyAIFxnGiALPstIyZO91J3sBSrtYKPCa81FT%2BAe5FdP%2F16dX7M8G2QBoHlOCiborPNR188kYqbrtspQiMLdSdCqE06hDUFQ3PcbE8pZjc3H5dcny%2BqL2xr08qLnFp5WdXxcvFRdgKAOAiyBUtpuXF6qITm0ms7xwUQpzSFqpQFGxJNdqYxaBQFXFr1B8dripk5f1Qg734MxZRFa8OXrC0SUBclX%2FIsJJJqUWr7uq4q66njtMMLeKaRxJh4vXuOMKGmNrytwHC7GauHczb7gJBY9EaCQsEwyfu4qAY6sQHEE5yo4qz1nHc7W%2FmuNCkeiEC06BT2KXW5Ye7wR%2BJRqa4RD1Evl5MaAbKYOUm3j3RKv8ZiQXgBRIDsjMyLkeHJDlM30wkC5GTlhwpLfAXvVAeC%2BGlwLLBvL176VeFL7S7mGPxQhRCLoa8DCYKS9rPurVlp6T5EPeBgnNUxOC0WTs38l8ylcSgu2HURNvrOIIHuAxsNQYx%2Bnc4wcFv0RnkFptS7LlYhwcWV%2FKYEjxiy5O8%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=387c822e2fdda6fd4f396a1150f32cbc43a485c5eeeaa97fc23846b6c6c88548"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 12392109,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "We have released new versions of Ruby and have published the vulnerability.\n\n  https://www.ruby-lang.org/en/news/2021/07/07/trusting-pasv-responses-in-net-ftp/\n\nThank you.",
      "automated_response": false,
      "created_at": "2021-07-08T01:10:29.806Z",
      "updated_at": "2021-07-08T01:10:29.806Z",
      "actor": {
        "username": "shugo",
        "cleared": false,
        "verified": false,
        "url": "/shugo",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "sighook",
        "url": "/sighook"
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 12392113,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2021-07-08T01:10:43.035Z",
      "updated_at": "2021-07-08T01:10:43.035Z",
      "first_to_agree": true,
      "actor": {
        "username": "shugo",
        "cleared": false,
        "verified": false,
        "url": "/shugo",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 12392187,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BountyAwarded",
      "message": "",
      "automated_response": false,
      "created_at": "2021-07-08T01:38:53.572Z",
      "updated_at": "2021-07-08T01:38:53.572Z",
      "actor": {
        "url": "/ruby",
        "ibb": true,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Ruby"
        }
      },
      "bounty_amount": "500.0",
      "bonus_amount": "0.0",
      "bounty_currency": "usd",
      "genius_execution_id": null,
      "team_handle": "ruby",
      "collaborator": {
        "username": "sighook",
        "url": "/sighook"
      }
    },
    {
      "id": 12404179,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2021-07-08T15:34:41.654Z",
      "updated_at": "2021-07-08T15:34:41.654Z",
      "actor": {
        "username": "sighook",
        "cleared": false,
        "verified": false,
        "url": "/sighook",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    },
    {
      "id": 12404180,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2021-07-08T15:34:41.749Z",
      "updated_at": "2021-07-08T15:34:41.749Z",
      "actor": {
        "username": "sighook",
        "cleared": false,
        "verified": false,
        "url": "/sighook",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "ruby"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}