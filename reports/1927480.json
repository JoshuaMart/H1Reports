{
  "id": 1927480,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xOTI3NDgw",
  "url": "https://hackerone.com/reports/1927480",
  "title": "DiffieHellman doesn't generate keys after setting a key",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2023-03-31T13:33:05.838Z",
  "submitted_at": "2023-03-31T13:33:06.125Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bensmyth",
    "url": "/bensmyth",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/7v1s2nnar9u3rbd28col4xwngzgi/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2023-30590"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2023-07-20T20:59:27.162Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2023-06-20T20:59:24.533Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "DiffieHellman doesn't generate keys after setting a key\n\n## Steps To Reproduce:\n\n  1. Instantiate: `const dh = crypto.createDiffieHellman(1024);`\n  2. Set private key: \n```\n//set private key to 2\ndh.setPrivateKey(Buffer.from(\"02\", 'hex'));        \n//outputs 02 (as expected)\nconsole.log(dh.getPrivateKey().toString('hex'));  \n```\n  3. Generate random private key:\n```\n//generate random private key\ndh.generateKeys();                                 \n//outputs 02: zero day.\nconsole.log(dh.getPrivateKey().toString('hex'));   \n```\n\n## Underlying issue:\n\nOpenSSL (https://github.com/majek/openssl/blob/master/crypto/dh/dh_key.c) doesn't generate keys when they're already instantiated: \n\n```\nif (dh->priv_key == NULL)\n  {\n  priv_key=BN_new();\n  if (priv_key == NULL) goto err;\n  generate_new_key=1;\n  }\nelse\n  priv_key=dh->priv_key;\n\nif (dh->pub_key == NULL)\n  {\n  pub_key=BN_new();\n  if (pub_key == NULL) goto err;\n  }\nelse\n  pub_key=dh->pub_key;\n```\n\nnode:crypto should use OpenSSL correctly. Method `generateKeys()` should re-instantiate OpenSSL before requesting a key, thereby avoiding the above.\n\n## Impact\n\nDiffieHellman may be used as the basis for application level security, implications are consequently broad. E.g., key reuse can cause major problems, cryptanalysis may break confidentiality, integrity, ...",
  "weakness": {
    "id": 227,
    "name": "Inconsistency Between Implementation and Documented Design"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2023-07-20T20:59:24.636Z",
  "allow_singular_disclosure_after": -5565284.036793817,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "zy9ard3",
    "bensmyth",
    "haxorjim",
    "salman_hunted"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 21062502,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks for the report @bensmyth. The (legacy) DH/ECDH APIs are relatively thin wrappers around OpenSSL and do have some significant design issues, and some of those are certainly not documented well. [I added `crypto.diffieHellman()` a while ago as a modern alternative](https://github.com/nodejs/node/pull/31178) but it likely does not cover all low-level use cases.\n\nIIRC, `generateKeys()` only generates _missing_ (or outdated) keys, that is, it only generates a private key if none has been set yet, but the function is also needed to compute the corresponding public key after calling `setPrivateKey()`.\n\n```js\nconst crypto = require('crypto');\n{\n  const dh = crypto.createDiffieHellman(1024);\n  // Both the private and the public key are missing: generateKeys() generates both.\n  dh.generateKeys();\n}\n{\n  const dh = crypto.createDiffieHellman(1024);\n  dh.setPrivateKey(Buffer.from('01020304', 'hex'));\n  // Only the public key is missing: generateKeys() generates only the public key.\n  dh.generateKeys();\n}\n{\n  const dh = crypto.createDiffieHellman(1024);\n  dh.generateKeys();\n  // Neither key is missing: generateKeys() does nothing.\n  dh.generateKeys();\n}\n{\n  const dh = crypto.createDiffieHellman(1024);\n  // Both the private and the public key are missing: generateKeys() generates both.\n  dh.generateKeys();\n  dh.setPrivateKey(Buffer.from('01020304', 'hex'));\n  // The public key is outdated: generateKeys() generates only the public key.\n  dh.generateKeys();\n}\n```\n\nA similar design issue is that `getPublicKey()` will return a stale public key if you call `setPrivateKey()` without a subsequent `generateKeys()`.\n\n`DiffieHellmanGroup` behaves similarly (and is usually preferable over `DiffieHellman`). It is also much faster, so there is usually no need to reuse `DiffieHellmanGroup` instances. (`DiffieHellman` used to be fast enough to not be reused, but is now somewhat slow due to expensive parameter validation.)\n\n> Method `generateKeys()` should re-instantiate OpenSSL before requesting a key, thereby avoiding the above.\n\nUnless I'm missing something, your proposed solution would break applications that use `generateKeys()` to generate the public key that corresponds to a known private key.\n\nI am not quite sure yet how we can best address these design issues. These APIs have been around for a long time and should likely be deprecated eventually, unless we can significantly improve their design without breaking too many existing applications.",
      "automated_response": false,
      "created_at": "2023-03-31T15:04:10.575Z",
      "updated_at": "2023-03-31T15:04:10.575Z",
      "actor": {
        "username": "tniessen",
        "cleared": false,
        "verified": false,
        "url": "/tniessen",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21062747,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks for the speedy response @tniessen.\n\n> IIRC, generateKeys() only generates missing (or outdated) keys, that is, it only generates a private key if none has been set yet...\n\nThat's not what the documentation says: _Generates private and public Diffie-Hellman key values..._ \n\n> A similar design issue is that getPublicKey() will return a stale public key if you call setPrivateKey() without a subsequent generateKeys().\n\nAgain, that's not what the documentation says: _Returns the Diffie-Hellman public key..._\n\nThis looks rather bad---developers following documentation may have built vulnerable applications. At the very least, documentation should be corrected and developers alerted, zero-days may be widespread.\n\nDeprecating DiffieHellman in favour of DiffieHellmanGroup doesn't ever seem viable: DiffieHellmanGroup uses only modp groups, which introduces issues.",
      "automated_response": false,
      "created_at": "2023-03-31T15:26:25.816Z",
      "updated_at": "2023-03-31T15:26:25.816Z",
      "actor": {
        "username": "bensmyth",
        "cleared": false,
        "verified": false,
        "url": "/bensmyth",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/7v1s2nnar9u3rbd28col4xwngzgi/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21071423,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I've been thinking how to improve.\n\nSince `crypto.createDiffieHellman()` is expensive, we want to reuse the resulting DiffieHellman object, but that's not actually possible (when private keys are generated internally).\n\n**Quick review**\n\n`getGenerator()` returns generator g\n`getPrime()` returns prime p\n\n`setPrivateKey(x)` sets private key x and `getPrivateKey()` returns private key x (throws an error if no private key has been set).\n\n`computeSecret(g^y)` returns shared secret g^yx where x is the private key (throws an error if no private key has been set).\n\nThe above behaviour is as expected. \n\n**What's `setPublicKey()` for?**\n\nI can't see a use for this method (beyond internal use by `generateKeys()`).\n\nSuggestion: Deprecate public access.\n\n**Unexpected behaviour: `getPublicKey()`**\n\nMethod `getPublicKey()` throws an error when `generateKeys()` hasn't been called, returns public key g^x when `setPrivateKey(x)` has been called exactly once and `generateKeys()` has been called and `setPublicKey()` hasn't been called, similarly returns public key g^x without any calls to `setPrivateKey()` nor `setPublicKey()` and arbitrarily many calls to `generateKeys()` wherein the first such call generated private key x, otherwise returning the last public key assigned by `setPublicKey()` (which may have been called via `generateKeys()`).\n\n(At least, I think I've gotten that right.)\n\nSuggestion: Deprecate  `setPrivateKey()` and `setPublicKey()`. Define `setPrivate(x) = {setPrivateKey(x); generateKeys()}`. We'd then have `getPublicKey()` behaving as expect.\n\n**Expected behaviour: `generateKeys()` for public key generation only**\n\nWhen method `generateKeys()` is used to generate only a public key, i.e., private key x has been set via `setPrivateKey(x)`, expected behaviour is observed, we can reuse the DiffieHellman object.\n\n**Unexpected behaviour: `generateKeys()` for key pair generation**\n\nWhen method `generateKeys()` is used to generate key pairs, we cannot reuse the DiffieHellman object, this is unexpected and I recommend a breaking change to avoid security vulnerabilities.\n\n*I'll think about this a little more and may comment further.*\n\nPlease do let me know what you think in the interim!\n",
      "automated_response": false,
      "created_at": "2023-04-01T07:43:06.947Z",
      "updated_at": "2023-04-01T07:43:06.947Z",
      "actor": {
        "username": "bensmyth",
        "cleared": false,
        "verified": false,
        "url": "/bensmyth",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/7v1s2nnar9u3rbd28col4xwngzgi/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21285399,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportVulnerabilityTypesUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2023-04-14T11:28:18.247Z",
      "updated_at": "2023-04-14T11:28:18.247Z",
      "additional_data": {
        "added_weaknesses": [
          {
            "id": 227,
            "name": "Inconsistency Between Implementation and Documented Design"
          }
        ],
        "removed_weaknesses": [
          {
            "id": 32,
            "name": "Cryptographic Issues - Generic"
          }
        ]
      },
      "actor": {
        "username": "tniessen",
        "cleared": false,
        "verified": false,
        "url": "/tniessen",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21328178,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Just checking in: Where are we?",
      "automated_response": false,
      "created_at": "2023-04-15T11:09:44.350Z",
      "updated_at": "2023-04-15T11:09:44.350Z",
      "actor": {
        "username": "bensmyth",
        "cleared": false,
        "verified": false,
        "url": "/bensmyth",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/7v1s2nnar9u3rbd28col4xwngzgi/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21415068,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "While this does appear to be an API deficiency, I'm not convinced it qualifies as a security vulnerability and is likely something that can be dealt with via public issues. I could be convinced otherwise if it can be demonstrated to be easily exploitable. ",
      "automated_response": false,
      "created_at": "2023-04-18T18:17:09.378Z",
      "updated_at": "2023-04-18T18:17:09.378Z",
      "actor": {
        "username": "jasnell",
        "cleared": false,
        "verified": false,
        "url": "/jasnell",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21415071,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "",
      "automated_response": false,
      "created_at": "2023-04-18T18:17:27.331Z",
      "updated_at": "2023-04-18T18:17:27.331Z",
      "actor": {
        "username": "jasnell",
        "cleared": false,
        "verified": false,
        "url": "/jasnell",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 21429532,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@jasnell A nonce must be used just once; using a nonce more than once is a security vulnerability. As concrete examples: Forward secrecy of TLS and IND-CPA of ElGamal would be trivially lost if Node.js's DH were used as a building block.",
      "automated_response": false,
      "created_at": "2023-04-19T09:34:11.295Z",
      "updated_at": "2023-04-19T09:39:45.797Z",
      "actor": {
        "username": "bensmyth",
        "cleared": false,
        "verified": false,
        "url": "/bensmyth",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/7v1s2nnar9u3rbd28col4xwngzgi/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22308155,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportSeverityUpdated",
      "message": "Thank you for your patience @bensmyth.\n\nThis is a design issue that has been around for many years and, while poorly documented, mirrors OpenSSL's behavior. As discussed above, these APIs are old and should likely be deprecated in the future, but changing their behavior during a security release is not possible due to potential breakage in the ecosystem. Newer APIs exist and should be extended to fully so that they can fully replace these old APIs.\n\nWhile misuse of the affected APIs is possible and could lead to significant negative impact, we have not seen any evidence of these APIs being misused in the described way in the Node.js ecosystem. A HIGH severity would indicate to users that they should upgrade Node.js immediately, which is not the case here due to the nature of CWE-1068. Therefore, I am reducing the severity of the issue.\n\nThe current behavior will be documented as part of an upcoming security release. API changes will be made through public pull requests.",
      "automated_response": false,
      "created_at": "2023-06-12T16:58:43.610Z",
      "updated_at": "2023-06-12T16:58:43.610Z",
      "additional_data": {
        "old_severity": "High (8.8)",
        "new_severity": "Medium",
        "old_severity_id": 1929463,
        "new_severity_id": 2040940
      },
      "actor": {
        "username": "tniessen",
        "cleared": false,
        "verified": false,
        "url": "/tniessen",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22349138,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @bensmyth! Would you like to be credited in the release notes? If yes, which name would you like us to use?\n\nExample:\n\nThanks, to bensmyth for reporting this vulnerability and to [Tobias Nießen](https://github.com/tniessen) for fixing it.",
      "automated_response": false,
      "created_at": "2023-06-14T19:03:53.235Z",
      "updated_at": "2023-06-14T19:03:53.235Z",
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22429835,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@tniessen I'd be cautious about downgrading severity: Users need to check whether they have a gaping security hole in their system. The danger is: Users writing high quality code---taking advantage of efficiency gains---doing everything right, they're at risk here. I'd suggest bringing this to users attention---they need to check whether their code is vulnerable to attack. Fixing the issue draws attention, attackers will be actively seeking out. I don't see this as \"misuse of the affected APIs,\" I believe this is an issue with Javascript---I only discovered by accident, I was getting constant random numbers... (I don't see mirroring of OpenSSL's behaviour; OpenSSL doesn't support this functionality---this is an issue with Javascript.)\n\nWhat \"[n]ewer APIs exist\"?",
      "automated_response": false,
      "created_at": "2023-06-20T13:51:55.343Z",
      "updated_at": "2023-06-20T13:51:55.343Z",
      "actor": {
        "username": "bensmyth",
        "cleared": false,
        "verified": false,
        "url": "/bensmyth",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/7v1s2nnar9u3rbd28col4xwngzgi/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22429851,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@rafaelgss You can credit me as \"Ben Smyth\"",
      "automated_response": false,
      "created_at": "2023-06-20T13:53:20.578Z",
      "updated_at": "2023-06-20T13:53:20.578Z",
      "actor": {
        "username": "bensmyth",
        "cleared": false,
        "verified": false,
        "url": "/bensmyth",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/7v1s2nnar9u3rbd28col4xwngzgi/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22436221,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "",
      "automated_response": false,
      "created_at": "2023-06-20T20:59:17.433Z",
      "updated_at": "2023-06-20T20:59:17.433Z",
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "bensmyth",
        "url": "/bensmyth"
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22436222,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2023-06-20T20:59:24.578Z",
      "updated_at": "2023-06-20T20:59:24.578Z",
      "first_to_agree": true,
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22443074,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "[Dumb, newbie Q:] Where can I find patched code?",
      "automated_response": false,
      "created_at": "2023-06-21T08:41:42.024Z",
      "updated_at": "2023-06-21T08:41:42.024Z",
      "actor": {
        "username": "bensmyth",
        "cleared": false,
        "verified": false,
        "url": "/bensmyth",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/7v1s2nnar9u3rbd28col4xwngzgi/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22443138,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Also, what's the CVE ID?",
      "automated_response": false,
      "created_at": "2023-06-21T08:44:36.730Z",
      "updated_at": "2023-06-21T08:44:36.730Z",
      "actor": {
        "username": "bensmyth",
        "cleared": false,
        "verified": false,
        "url": "/bensmyth",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/7v1s2nnar9u3rbd28col4xwngzgi/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22445766,
      "is_internal": false,
      "editable": false,
      "type": "Activities::CveIdAdded",
      "message": "",
      "automated_response": false,
      "created_at": "2023-06-21T12:17:36.130Z",
      "updated_at": "2023-06-21T12:17:36.130Z",
      "cve_ids": [
        "CVE-2023-30590"
      ],
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22445767,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "https://github.com/nodejs/node/commit/4a82c8fda00b45663cf0f24bc3d6f369f4cc5215",
      "automated_response": false,
      "created_at": "2023-06-21T12:17:41.041Z",
      "updated_at": "2023-06-21T12:17:41.041Z",
      "actor": {
        "username": "rafaelgss",
        "cleared": false,
        "verified": false,
        "url": "/rafaelgss",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/kjrbv0uq2i8ccibs0uuw51m04586/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22483009,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "> I'd suggest bringing this to users attention---they need to check whether their code is vulnerable to attack.\n\n@bensmyth That's exactly why we are treating this as a security issue. The API has always behaved in the way that it does, only the documentation is inaccurate. We all agree that the API design is poor (mostly due to historical reasons), but there is not much we can do about that in a security release  The severity estimate exists mostly so that end users, not necessarily application developers or package authors, can estimate how urgent the upgrade is. Since the patch in this case was a documentation update, end users do not necessarily need to update Node.js. We mostly assigned a CVE for visibility in the community.\n\n> I don't see mirroring of OpenSSL's behaviour; OpenSSL doesn't support this functionality\n\nSee [`DH_generate_key()`](https://www.openssl.org/docs/man3.0/man3/DH_generate_key.html) (emphasis added):\n\n\"DH_generate_key() expects dh to contain the shared parameters dh->p and dh->g. It generates a random private DH value **unless dh->priv_key is already set**, and computes the corresponding public value dh->pub_key, which can then be published.\"\n\n> What \"[n]ewer APIs exist\"?\n\nMost importantly, `crypto.generateKeyPair('dh')` and `crypto.diffieHellman()`. As I said before, these do not fully replace the older DiffieHellman APIs yet.",
      "automated_response": false,
      "created_at": "2023-06-23T12:09:23.130Z",
      "updated_at": "2023-06-23T12:09:23.130Z",
      "actor": {
        "username": "tniessen",
        "cleared": false,
        "verified": false,
        "url": "/tniessen",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    },
    {
      "id": 22932892,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2023-07-20T20:59:27.246Z",
      "updated_at": "2023-07-20T20:59:27.246Z",
      "actor": {
        "url": "/nodejs",
        "ibb": true,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Node.js"
        }
      },
      "genius_execution_id": null,
      "team_handle": "nodejs"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}