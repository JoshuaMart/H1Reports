{
  "id": 398163,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zOTgxNjM=",
  "url": "https://hackerone.com/reports/398163",
  "title": "DOM based XSS on *.██████.com via document.domain sink in Safari",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-02-09T16:40:08.000Z",
  "submitted_at": "2015-02-09T16:40:08.000Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "filedescriptor",
    "url": "/filedescriptor",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 31807,
    "url": "https://hackerone.com/redact",
    "handle": "redact",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [

    ],
    "profile": {
      "name": "██████",
      "twitter_handle": "",
      "website": "",
      "about": "██████ "
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": true,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-08-22T17:12:06.764Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "█████████████████████████████████",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 336596,
      "file_name": "chrome.jpg",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/336/596/57636e96c09809604b6d1da8a34e14dabeb51849/chrome.jpg?response-content-disposition=attachment%3B%20filename%3D%22chrome.jpg%22%3B%20filename%2A%3DUTF-8%27%27chrome.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRWDIYOMA%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074956Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJHMEUCIFNLdnPGtLwKMqDt0NQfrZo0FnfieCdt70b8x7mZltnYAiEAvoj8eBF%2Fz9RmxiwioQTjaAkY5y8glP7YJHIdVEiSRjIqsgUIKBADGgwwMTM2MTkyNzQ4NDkiDKwmuAj4%2Be1s5lbylSqPBcomyuxhildk0NUANV3%2BftlYYJCWX1M%2B1xqa23Q06%2By7YS%2BQATcLYhjMRKLHIGZfd3bianhW%2FgdFm4gpQAmwDHRw2igbV1zSavkNvXqacnFdw4Oln9SHRd2e4zuwk%2F2GviKwn1nZunhhdOuu6g7A2DA%2FQefyAlyQYpy%2FHRGl7J9kIPlFGlBK9CAul0kzKyTjlygr3Hz7DB5F6X4FcS71gvzmFC%2Fa6bf1tdfq46kICi9nBXV8Yep%2FEmkoi%2FkPVN6jpqZHrrqGL%2BeKOCEw6yXkZefklvRs%2Bmud%2BPdLs6D35uN9GpF0h2lyRl7mI1tGYSVdAxrxhb%2FnLZ%2BBbcvE%2FzPbIbOkYt%2F4kzBjPA33r7a6gRZo6xBI%2BqcHTUEoZlsC%2FePoA0bzI%2BY%2B9Kn7r266PdCrFtOI0TtLDtrt1a%2FsYB7r39ZReNeBUZjFy71DofxHhuMplWoZ%2B5suYOSkCpnX8ox%2FexG03tPH%2B%2BYi%2B7JKgMNo8Ywg0LUY4FIgqUOY3m9G4vsQ2yNVvhHzc1zFQ%2BaZDinuNqUJycV22%2Bal4yI7Vu8zRPT0XS8nU9mRxPyMOxBhqiEpipRhHvEk6ruVgSYpVrhEqZHRnwv%2FiS2CGZuiFnzVyfzzNc0a1K3NA%2Bqp8X%2FGc2IrCqLgJiIar1EgInaI6d3yXHytJb5boQ1Ym5HsML5oSphvP1hBCFvgtrkpt3teC9sz%2F02EwDEGzubXTtTxqnHBOiqeNpfNEReBvGYlciW1L%2FxLQxgqD5RpQ5CUBnf67bJivw%2BtoZ%2BpV3UvOdvkG99R3Yb6KV5k2Ly3LruRvseHIOA2KILhuT0Arnm9FUq1BvuB593ehUm8src6x4P2nT6wjhA9E2kekyi7othxiuSueSwwyp66qAY6sQGfl2fsTY6VWTPrJHQD%2BPDh1xgsgnaytGIcrwK1OGEf8WVcLpw6bEJ6BKLFS7l9GZDwFvjz7J48x%2Bl7YfFRkEZXRmoO3ak0duYeBuy3U2I6DbXdUZZIWlnrcVoExjgWQHiADxJVCKngMqQP1GNwrY9M5Of5s5Z3zUQwD3EqxVcljRFvNHznFkHj8b2eCVcdpPMI6JyXX4H9nyjUW4XvHJwg%2F0AQay6G%2BksUHKVQvEI2UA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=79a222301c03994c6e267f600e746b8b701c636b5a8aa1b7ee846fa9a402c402",
      "file_size": 85927,
      "type": "image/jpeg",
      "moderated": null
    },
    {
      "id": 336597,
      "file_name": "safari.jpg",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/336/597/0b304a67eb93db98488d0c815bb492d5d332fa6d/safari.jpg?response-content-disposition=attachment%3B%20filename%3D%22safari.jpg%22%3B%20filename%2A%3DUTF-8%27%27safari.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRWDIYOMA%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074956Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJHMEUCIFNLdnPGtLwKMqDt0NQfrZo0FnfieCdt70b8x7mZltnYAiEAvoj8eBF%2Fz9RmxiwioQTjaAkY5y8glP7YJHIdVEiSRjIqsgUIKBADGgwwMTM2MTkyNzQ4NDkiDKwmuAj4%2Be1s5lbylSqPBcomyuxhildk0NUANV3%2BftlYYJCWX1M%2B1xqa23Q06%2By7YS%2BQATcLYhjMRKLHIGZfd3bianhW%2FgdFm4gpQAmwDHRw2igbV1zSavkNvXqacnFdw4Oln9SHRd2e4zuwk%2F2GviKwn1nZunhhdOuu6g7A2DA%2FQefyAlyQYpy%2FHRGl7J9kIPlFGlBK9CAul0kzKyTjlygr3Hz7DB5F6X4FcS71gvzmFC%2Fa6bf1tdfq46kICi9nBXV8Yep%2FEmkoi%2FkPVN6jpqZHrrqGL%2BeKOCEw6yXkZefklvRs%2Bmud%2BPdLs6D35uN9GpF0h2lyRl7mI1tGYSVdAxrxhb%2FnLZ%2BBbcvE%2FzPbIbOkYt%2F4kzBjPA33r7a6gRZo6xBI%2BqcHTUEoZlsC%2FePoA0bzI%2BY%2B9Kn7r266PdCrFtOI0TtLDtrt1a%2FsYB7r39ZReNeBUZjFy71DofxHhuMplWoZ%2B5suYOSkCpnX8ox%2FexG03tPH%2B%2BYi%2B7JKgMNo8Ywg0LUY4FIgqUOY3m9G4vsQ2yNVvhHzc1zFQ%2BaZDinuNqUJycV22%2Bal4yI7Vu8zRPT0XS8nU9mRxPyMOxBhqiEpipRhHvEk6ruVgSYpVrhEqZHRnwv%2FiS2CGZuiFnzVyfzzNc0a1K3NA%2Bqp8X%2FGc2IrCqLgJiIar1EgInaI6d3yXHytJb5boQ1Ym5HsML5oSphvP1hBCFvgtrkpt3teC9sz%2F02EwDEGzubXTtTxqnHBOiqeNpfNEReBvGYlciW1L%2FxLQxgqD5RpQ5CUBnf67bJivw%2BtoZ%2BpV3UvOdvkG99R3Yb6KV5k2Ly3LruRvseHIOA2KILhuT0Arnm9FUq1BvuB593ehUm8src6x4P2nT6wjhA9E2kekyi7othxiuSueSwwyp66qAY6sQGfl2fsTY6VWTPrJHQD%2BPDh1xgsgnaytGIcrwK1OGEf8WVcLpw6bEJ6BKLFS7l9GZDwFvjz7J48x%2Bl7YfFRkEZXRmoO3ak0duYeBuy3U2I6DbXdUZZIWlnrcVoExjgWQHiADxJVCKngMqQP1GNwrY9M5Of5s5Z3zUQwD3EqxVcljRFvNHznFkHj8b2eCVcdpPMI6JyXX4H9nyjUW4XvHJwg%2F0AQay6G%2BksUHKVQvEI2UA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=0b23d4eccaea0c527e6d11420e594f58b40f6c6b67bf9ad732fdf34330849016",
      "file_size": 49626,
      "type": "image/jpeg",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 87,
  "voters": [
    "barbie_girl",
    "jokebookservice1",
    "n1m0",
    "tomdev",
    "cdl",
    "mvc",
    "kapytein",
    "base_64",
    "bogdantcaciuc",
    "muon4",
    "and 77 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 3231661,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "",
      "automated_response": false,
      "created_at": "2017-11-30T16:40:08.000Z",
      "updated_at": "2017-11-30T16:40:08.000Z",
      "actor": {
        "username": "filedescriptor",
        "cleared": false,
        "verified": false,
        "url": "/filedescriptor",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "filedescriptor",
        "url": "/filedescriptor"
      },
      "genius_execution_id": null,
      "team_handle": "redact"
    },
    {
      "id": 3231698,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2018-08-22T17:12:06.815Z",
      "updated_at": "2018-08-22T17:12:06.815Z",
      "actor": {
        "username": "filedescriptor",
        "cleared": false,
        "verified": false,
        "url": "/filedescriptor",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "redact"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 9837,
      "category": "researcher",
      "content": "\n██████ has a lot of services hosted on subdomains (e.g. mail.██████.com and news.██████.com). Naturally, SSO is used to centralize authentication. Because the authentication service is hosted on auth.██████.com, there needs to be a way for the session token to be passed to other subdomains due to SOP. One way to do cross origin messaging is `window.postMessage()`. While being supported in all modern browsers, it does not work well in Internet Explorer 9 and below. Since ██████ also targets users using old browers, `document.domain` was used instead.\n\n`document.domain` is an old technique to loosen SOP. If two origins with the same \"superdomain\" want to communicate to each other (e.g. foo.example.com and bar.example.com), they can both do `document.domain = 'example.com`, and then they can access each other's DOM. This was exactly what ██████ did.\n\nFile: [http://auth.██████.com/receiver.html](https://example.com)\n\nCode: \n```javascript\n        var q = location.hash.substr(1).split('&');\n\n        for (var i = 0, l = q.length; i < l; i++) {\n            var p = q[i].split('=');\n            params[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);\n        }\n        try {\n            if (params['domain']) {\n                document.domain = params['domain']; // document.domain assignment\n            }\n            var broker = window.opener.broker; // reference to opener's function to handle session token \n            if (params['status'] == 'ok') {\n                broker.onSuccess(params);\n            } else {\n                broker.onFailure(params);\n            }\n            window.close();\n        } catch (e) {\n            window.close();\n        }\n    };\n```\n\nThis page passes everything in URL fragment, including session token, to the opener. It accepts parameter `domain` and assigns it to `document.domain`. A service on *.██████.com looking to automatically authenticate users would do the following:\n\n1. Execute `document.domain = '██████.com`\n2. Open [https://auth.██████.com](https://example.com) which redirects to [https://auth.██████.com/receiver.html#domain=██████.com&token=...](https://example.com)\n4. `window.opener.broker.onSuccess` is now accessible to auth.██████.com\n\nThere is one thing not mentioned yet: what is a \"superdomain\"? It differs for diffrent browsers. Can foo.com and bar.com, sharing the \"superdomain\" `com`, both do `document.domain = 'com'` and communicate to each other? The answer is no, at least for most browsers. Websites can only set `document.domain` up to [eTLD+1](https://publicsuffix.org/). This is a security measure preventing lazy developers from over loosening SOP by making their website's DOM accessible universally. Assigning `document.domain` to something like `com`, or even `co.uk`, would result in an error:\n{F336596}\n\nHowever, Safari does not have such restrictions. `document.domain = 'com'` would not result in any error. If foo.com does `document.domain = 'com'`, evil.com can do the same and access its DOM. This is exactly the issue of ██████'s SSO apporach. \n{F336597}\n\nPoC (assuming hosted on https://evil.com and visited in Safari):\n```html\n<script>\ndocument.domain = 'com';\n</script>\n<iframe src=\"https://auth.██████.com/receiver.html#domain=com\"\nonload=\"contentWindow.alert(location)\"></iframe>\n```\n\nThe best part is, apparently every service that wants to use SSO needs to do `document.domain = '██████.com'`. Therefore, a XSS on any subdomain of ██████ can access all other subdomain's DOM. In this particular issue for example, after getting DOM access on auth.██████.com, we can do  `document.domain = '██████.com'` and pop alerts on any subdomains.",
      "user": {
        "id": 9081,
        "username": "filedescriptor",
        "name": "filedescriptor",
        "bio": "\\\"",
        "cleared": false,
        "verified": false,
        "website": "https://www.youtube.com/channel/UCCp25j1Zh9vc_WFm-nB9fhQ",
        "location": "",
        "created_at": "2014-08-16T03:54:09.722Z",
        "url": "https://hackerone.com/filedescriptor",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": [

      ]
    }
  ]
}