{
  "id": 508446,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDg0NDY=",
  "url": "https://hackerone.com/reports/508446",
  "title": "XSS in Bootbox",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-03-12T13:44:08.840Z",
  "submitted_at": "2019-03-12T13:44:08.840Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "yonjah",
    "url": "/yonjah",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-05-04T16:52:39.177Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-04-04T16:52:38.971Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi.  \n  \nSorry for taking the time with this report.  \n  \nThis is already publicly disclosed issue at -[https://github.com/makeusabrew/bootbox/issues/661](https://github.com/makeusabrew/bootbox/issues/661)  \n  \nIn essence all dialogs of bootbox vulnurable to XSS injections ( bootbox.alert(\"\\<script\\>alert(1);\\</script\\>\"); )  \n\nThis is apparently a feature to allow injecting HTML in messages but it is not very clear from the documentation.  \nEven though this issue has been reported for a while no changes were made to fix this issue or even update the documentation\n\nKind Regards,  \nYoni\n\n## Impact\n\nWebsites using bootbox to display messages containing user input are vulnerable to XSS",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2019-05-04T16:52:39.058Z",
  "allow_singular_disclosure_after": -138466259.88443124,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "ali",
    "m7mdharoun",
    "bhalls",
    "kemejii"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 4307835,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hello,\nThanks for reporting this to us. Someone will quickly look at this report and triage it.",
      "automated_response": true,
      "created_at": "2019-03-12T13:44:14.861Z",
      "updated_at": "2019-03-12T13:44:14.861Z",
      "actor": {
        "username": "vdeturckheim_dev",
        "cleared": false,
        "verified": false,
        "url": "/vdeturckheim_dev",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4352961,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi Just wondering if there was any progress with this one",
      "automated_response": false,
      "created_at": "2019-03-19T14:06:51.663Z",
      "updated_at": "2019-03-19T14:06:51.663Z",
      "actor": {
        "username": "yonjah",
        "cleared": false,
        "verified": false,
        "url": "/yonjah",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426159,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@yonjah \n\nThank you for taking the time to write this report. This is a Cross-site Scripting vulnerability.\n\nI've invited the maintainer\n\nI read the threads in the issues on the GitHub project page.\n\nhttps://github.com/makeusabrew/bootbox/issues/661\nhttps://github.com/makeusabrew/bootbox/issues/683",
      "automated_response": false,
      "created_at": "2019-03-30T17:55:18.740Z",
      "updated_at": "2019-03-30T17:55:18.740Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426162,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "",
      "automated_response": false,
      "created_at": "2019-03-30T17:55:28.820Z",
      "updated_at": "2019-03-30T17:55:28.820Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426361,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ExternalUserJoined",
      "message": "",
      "automated_response": false,
      "created_at": "2019-03-30T20:06:42.234Z",
      "updated_at": "2019-03-30T20:06:42.234Z",
      "actor": {
        "username": "tiesont",
        "cleared": false,
        "verified": false,
        "url": "/tiesont",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/564/246/b69a482e75db313db8a2daad00e73f0d3d9ee86b_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426376,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "The documentation was updated earlier this year (or late last year; I'd have to check my commit history to be sure) to note that we don't sanitize values (see http://bootboxjs.com/documentation.html#bb-note-input-values) - are you asking for something more explicit?\n\nI'll repeat what I noted in #661 - I don't think sanitizing the content loaded into the body of a Bootbox dialog is something that Bootbox should be doing - there are perfectly valid reasons to inject a script tag into the dialog. Whether it's the right way to accomplish something is doubtful, but I think making content safe before applying it to a dialog is the responsibility of the developer using Bootbox.",
      "automated_response": false,
      "created_at": "2019-03-30T20:18:34.592Z",
      "updated_at": "2019-03-30T20:18:34.592Z",
      "actor": {
        "username": "tiesont",
        "cleared": false,
        "verified": false,
        "url": "/tiesont",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/564/246/b69a482e75db313db8a2daad00e73f0d3d9ee86b_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426777,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@tiesont \n\nWould you mind putting the warning about unsanitized values closer to this line, \"Your message can also contain HTML.\"\n\nhttp://bootboxjs.com/documentation.html#bb-note-input-values\n\nLooking at libraries like React for examples of how to warn library users in these situations.\n\nhttps://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml",
      "automated_response": false,
      "created_at": "2019-03-31T02:24:43.041Z",
      "updated_at": "2019-03-31T02:24:43.041Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426790,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I can, when I find some time and motivation. The docs are also open source (they are generated from the gh-pages branch), so anyone can make a pull-request with their suggested changes. \n\nThat being said, to paraphrase Tarmo's comment (https://github.com/makeusabrew/bootbox/issues/683#issuecomment-431566597), the options which are injectable with HTML are all set by the developer who's using Bootbox, not users of the application, so by the time those values are being set, the content _should_ have been sanitized already. \n\nI'd probably be more motivated to make some updates to the docs, and/or the library itself, if someone could show me use-cases where XSS in a Bootbox dialog can happen when a developer has done their due diligence.",
      "automated_response": false,
      "created_at": "2019-03-31T02:44:56.276Z",
      "updated_at": "2019-03-31T02:44:56.276Z",
      "actor": {
        "username": "tiesont",
        "cleared": false,
        "verified": false,
        "url": "/tiesont",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/564/246/b69a482e75db313db8a2daad00e73f0d3d9ee86b_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426839,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@tiesont \n\nIt has become common practice for library maintainers to warn their users (the developers using their libraries) of the risks associated with specific usage patterns. You've done that here. \n\nThe ask is to move the documentation closer to the place where a developers might read it and make the risk clearer. It doesn't sound like you're interested in doing that right now so I'll consider this resolved for now.",
      "automated_response": false,
      "created_at": "2019-03-31T03:07:21.187Z",
      "updated_at": "2019-03-31T03:07:21.187Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426841,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "",
      "automated_response": false,
      "created_at": "2019-03-31T03:07:36.101Z",
      "updated_at": "2019-03-31T03:07:36.101Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "yonjah",
        "url": "/yonjah"
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4427021,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @ronperris  Thanks for taking the time to look at this.\nDocumenting the issue is probably the first step but I couldn't find any documentation that clearly explain that this package is vulnerable to XSS  or how inputs should be sanitized.\n\nIf you go to the examples (as anyone who just want to quickly use a library is probably do )  you can see the first one -\n\n```js\nbootbox.alert(\"This is the default alert!\");\n```\n\nNo where does it let you know that the message passed to the alert is actually parsed as HTML and not treated as text.\nIt is easy to assume that the following code will be safe -\n\n```js\nbootbox.alert(error.message);\nbootbox.alert(`${username} is unavailable`);\n```\n\nBut both actually introduce XSS into the site.\nThe rest of the examples are very similar and most of them don't use html at all.\n\nThe fix for this issue doesn't need to include any sanitation it just need to make sure the message is set as a text node and not as html.  If html is needed than there can either be specific  option to enable it or use another method like `htmlAlert` (needless to say that if the developer explicitly chooses an html message it's his responsibility to sanitize the message).\nUnfortunately since this module default to html elements it will be a breaking change.\n\nEven allowing html by default but having a `textAlert` method instead will be a big improvement (even though it will not protect clueless users and will require clear documentation)\nAs @kpagcha  mentioned in at issue #683 he knows he doesn't sue html in his message but since he has no way to send pure text alerts he has to sanitize it first. which as @tiesont mentioned is extremely hard and error prone.\nso if as a developer I know I'm only using text for alerts (Which I would argue is more common than rich HTML ones) I still have to sanitize them cause there is no safe method which just sets the message as a text node.\n\nSo the fix is simple. I also linked to a similar issue with a `SweetAlert` a module which is very similar to `bootbox`.\nSweet alert all messages are treated as text. if you want to use a html for your message you can use the `content` property. since the content property also accepts a DOM node as it's input it's not only solves the XSS issue but also provides a much nicer API cause you have full control on the node that is being injected into the DOM.\n\nSo not only they solved this security issue they also offers a richer experience at almost no added complexity\n\nI think documentation is highly important but it shouldn't come at the expense of actually fixing an issue, especially so trivial to fix.\n\n* Just to be clear the `alert` method was given as an example all bootbox dialog method are affected by this issue",
      "automated_response": false,
      "created_at": "2019-03-31T05:10:22.173Z",
      "updated_at": "2019-03-31T05:10:22.173Z",
      "actor": {
        "username": "yonjah",
        "cleared": false,
        "verified": false,
        "url": "/yonjah",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4427049,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "> especially so trivial to fix.\n\nNot really, but as I mentioned, pull-requests are welcomed. The code itself is easy enough to change, but the library has used jQuery.html() pretty much since the beginning, so changing it to use jQuery.text() or similar is a very much breaking change. Contrary to \"... I would argue is more common than rich HTML ones\", I use messages with HTML quite often; I emphasize certain portions of my alerts, like \n\n> Really delete this record? **This action cannot be undone**.\n\nThere are basically three issues here:\n- I find sanitizing content to be out-of-scope for Bootbox. I haven't been convinced otherwise.\n- I am not the owner of Bootbox. I **am** probably the only _active_ collaborator (Tarmo mostly pokes his head into the issues list from time to time), so I fix things, add features, and respond to issues as I have time.\n- I don't have a ton of free time these days, so I spend it on things that I find worthwhile. See #1 and #2 for why I'm not too keen on putting too much effort into what, again, I think is an out-of-scope problem.\n\nI'm not really arguing that the potential for XSS isn't there, I just think there are upstream things you, as a user of Bootbox, can do to mitigate them on your own. I'm not trying to be harsh or critical, it's just my take on this.",
      "automated_response": false,
      "created_at": "2019-03-31T05:44:36.649Z",
      "updated_at": "2019-03-31T05:44:36.649Z",
      "actor": {
        "username": "tiesont",
        "cleared": false,
        "verified": false,
        "url": "/tiesont",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/564/246/b69a482e75db313db8a2daad00e73f0d3d9ee86b_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4427090,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @tiesont \n>  I find sanitizing content to be out-of-scope for Bootbox. I haven't been convinced otherwise.\nI  completely agree I don't even see how doing sanitation by bootbox is a valid solution.\n\n> the library has used jQuery.html() pretty much since the beginning, so changing it to use jQuery.text() or similar is a very much breaking change\nAlso no one argues using html is not beneficial. only that there should be a way to switch between `text` and `html`.\nTo improve security this has to be `text` by default which is indeed a breaking change,  but I would argue is a necessary one.\nI would also argue that even if we add the option to switch now but use html as default it will still improve the current issue and will allow introducing the breaking change in a softer way later on.\n\nSince your not the owner of this package I can see why you are not keen to introduce a breaking change ( At the time I also offered to submit a PR to solve this issue but as you are, I'm reluctant to spend my time implementing a solution before I know it is a solution accepted by the project owner).  Maybe @makeusabrew can be invited to this discussion and give his input how he think it's best to resolve this issue",
      "automated_response": false,
      "created_at": "2019-03-31T06:12:43.201Z",
      "updated_at": "2019-03-31T06:12:43.201Z",
      "actor": {
        "username": "yonjah",
        "cleared": false,
        "verified": false,
        "url": "/yonjah",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4428768,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Invited Nick Payne.\n\n@yonjah While I agree with you, the library should do more to warn users about unsanitized HTML, I can find counter examples like jQuery[1] which make no mention of the issues with adding HTML directly to pages without sanitization or escaping. The underlying innerHTML API documentation does contain a warning[2], so it seems that the community is divided on how to address these types of issues.\n\n[1] http://api.jquery.com/html/\n[2] https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations",
      "automated_response": false,
      "created_at": "2019-03-31T14:27:18.500Z",
      "updated_at": "2019-03-31T14:35:12.837Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4431559,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@ronperris I think giving `jQuery.html` and `el.innerHTML`  DOM API is a great example of how this issue should be fixed.\n\n`jQuery.html` offers a clear understanding on what it does. set the html of the element. \nUser who knows how html works and it's full potential can understand that the `html` method will have side effects if not treated carefully, just in case a documentation explanation was added.\n\nMDN documentation for `innerHTML` does the same but also mention an alternative use `Node.textContent` if you don't need html.\n\nThis three important fixes are missing from bootbox -\n1. it is not clear the `alert` method is actually handling strings or any input as html instead of text\n2. there is no alternative to use a secure method that will treat is as text like `jQuery.text` and `Node.textContent`\n3. there is no clear documentation on the `alert` method or any other method to point to this problem and it's solution\n\nFixing the documentation is highly valuable but only after the first two issues are addressed as well (It doesn't help if there is no alternative and users don't always read the documentation)\n\nI want to make it clear using HTML in dialogues is an important feature and I'm not suggesting to remove it or add any kind of sanitation to it.\n\nOn a side note there is now a few suggestion to reduce the risks of XSS even more when using `innerHTML` or `jQuery.html` by using trusted types -\nhttps://github.com/WICG/trusted-types\n\nThis is in a way similar to my original suggestion in [comment for 661](https://github.com/makeusabrew/bootbox/issues/661#issuecomment-414554240) but it's main disadvantage is that it's relatively uncommon approach and I'm not sure how most users will feel about using it\n\nAny way I'd be happy to help with a PR to any solution @tiesont and Nick Payne will see reasonable ",
      "automated_response": false,
      "created_at": "2019-04-01T09:14:09.559Z",
      "updated_at": "2019-04-01T09:16:02.390Z",
      "actor": {
        "username": "yonjah",
        "cleared": false,
        "verified": false,
        "url": "/yonjah",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4434596,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@yonjah \n\n> 1. it is not clear the alert method is actually handling strings or any input as html instead of text\n\nIt is made clear in the documentation. `Your message can also contain HTML.` http://bootboxjs.com/documentation.html\n\n> 3. there is no clear documentation on the alert method or any other method to point to this problem and it's solution\n\nThere is documentation here. `Prompt values are not sanitized` http://bootboxjs.com/documentation.html#known-limitations\n\nI agree that it could be made more clear in the documentation and that the API could be changed.",
      "automated_response": false,
      "created_at": "2019-04-01T17:22:57.635Z",
      "updated_at": "2019-04-01T17:22:57.635Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4466806,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "As I had a new locale to merge, I added a short message to our list of gotchas: http://bootboxjs.com/documentation.html#bb-note-html\n\nThat's pretty much the extent of what I plan on doing. If you actually get a response from Nick, he obviously can choose whether we change how we handle HTML content or not.\n\nI'm not dismissing XSS as \"fake news\" or denying that it's a genuine concern, but, as I've said a few times, I don't think it's something that Bootbox should be addressing. Sanitizing HTML properly is a very complicated endeavor ([here's the test suite from what I use in .NET, for example](https://github.com/mganss/HtmlSanitizer/blob/master/test/HtmlSanitizer.Tests/Tests.cs)), one that I don't have enough knowledge to do properly _on my own_, and since I'm pretty much it in terms of active developers on this project, I'm what you get.",
      "automated_response": false,
      "created_at": "2019-04-03T22:00:46.699Z",
      "updated_at": "2019-04-03T22:00:46.699Z",
      "actor": {
        "username": "tiesont",
        "cleared": false,
        "verified": false,
        "url": "/tiesont",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/564/246/b69a482e75db313db8a2daad00e73f0d3d9ee86b_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4478939,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-04-04T16:52:38.994Z",
      "updated_at": "2019-04-04T16:52:38.994Z",
      "first_to_agree": true,
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4742557,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-05-04T16:52:39.197Z",
      "updated_at": "2019-05-04T16:52:39.197Z",
      "actor": {
        "url": "/nodejs-ecosystem",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Node.js third-party modules"
        }
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}