{
  "id": 423073,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MjMwNzM=",
  "url": "https://hackerone.com/reports/423073",
  "title": "Improper UUID validation results in bypass of #419896",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2018-10-12T19:18:06.645Z",
  "submitted_at": "2018-10-12T19:18:06.645Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "popeax",
    "url": "/popeax",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/062/350/7af44ed51419e756a0f92b59a8f66ae3285cf890_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13,
    "url": "https://hackerone.com/security",
    "handle": "security",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "HackerOne",
      "twitter_handle": "Hacker0x01",
      "website": "https://hackerone.com",
      "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-10-25T22:38:41.919Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2018-10-25T22:38:35.207Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "This was found while evaluating the vulnerability and patch identified in #419896.  I determined the deployed patch to be effective.  However, I noticed tracer values could be sent which didn't conform to the UUID specification as characters outside of the a-f and 0-9 ranges could be used.  For example, a value such as \"zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzzzz\" was accepted by the server as valid.  Likely this indicates a problem with a regex filter that needs to be slightly changed.  \n\nSteps\n1. Navigate to a program which allows anonymous submissions.\n2. Open the report submission form and add an attachment.\n3. Observe the request sent to /attachments includes a client side generated UUID in the tracer field.\n4. Replay the request from step 3.  Use an invalid UUID (e.g. \"zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzzzz\") for the tracer and observe the server accepts the value.\n\n## Impact\n\nThe impact is unknown, but it is believed to have a cascading side effect.  I was asked to submit this by @jobert.",
  "weakness": {
    "id": 107,
    "name": "Improper Input Validation"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2018-11-24T22:38:35.307Z",
  "allow_singular_disclosure_after": -152356163.2908529,
  "singular_disclosure_allowed": true,
  "vote_count": 78,
  "voters": [
    "jokebookservice1",
    "smither",
    "n1m0",
    "arneswinnen",
    "sp1d3rs",
    "europa",
    "bogdantcaciuc",
    "sameerphad72",
    "vp40",
    "spam404",
    "and 68 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 7.7,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "high",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 3,
    "asset_type": "URL",
    "asset_identifier": "hackerone.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 3472481,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportTitleUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2018-10-12T19:19:10.998Z",
      "updated_at": "2018-10-12T19:19:10.998Z",
      "additional_data": {
        "old_title": "Invalid tracer value",
        "new_title": "Invalid UUID tracer value"
      },
      "actor": {
        "username": "popeax",
        "cleared": false,
        "verified": false,
        "url": "/popeax",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/062/350/7af44ed51419e756a0f92b59a8f66ae3285cf890_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "security"
    },
    {
      "id": 3533787,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportSeverityUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2018-10-25T17:21:21.197Z",
      "updated_at": "2018-10-25T17:21:21.197Z",
      "additional_data": {
        "old_severity": "Medium (6.1)",
        "new_severity": "High (7.7)",
        "old_severity_id": 223676,
        "new_severity_id": 229277
      },
      "actor": {
        "username": "jobert",
        "cleared": true,
        "verified": true,
        "url": "/jobert",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": true
      },
      "genius_execution_id": null,
      "team_handle": "security"
    },
    {
      "id": 3533791,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportTitleUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2018-10-25T17:22:02.733Z",
      "updated_at": "2018-10-25T17:22:02.733Z",
      "additional_data": {
        "old_title": "Invalid UUID tracer value",
        "new_title": "Improper UUID validation results in bypass of #419896"
      },
      "actor": {
        "username": "jobert",
        "cleared": true,
        "verified": true,
        "url": "/jobert",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": true
      },
      "genius_execution_id": null,
      "team_handle": "security"
    },
    {
      "id": 3533851,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "Hi @popeax - thanks for submitting this to us and your patience with us. After you completed the retest for #419896 we realized that your comment was actually a bypass for the original fix. Because of the input validation we used for the other endpoint we determined that this had something to do with the way the null bytes were (incorrectly) interpreted. However, when we looked into another endpoint that was vulnerable to the same issue, we determined that this was not the case. Here's a technical writeup what happened exactly and why your comment bypassed the fix.\n\nConsider the following controller method:\n\n```ruby\ndef some_method\n  return unless params[:something].present?\n\n  SomeObject.where something: params[:something]\nend\n```\n\nThe `SomeObject` model is implemented as the code shown below. Notice that the `something` column is of type `uuid`.\n\n```ruby\nclass SomeObject < ApplicationRecord\nend\n\n# == Schema Information\n#\n# Table name: some_objects\n#\n#  id                        :integer          not null, primary key\n#  something                 :uuid\n```\n\nAt first sight, it seems that there's no way the `where` method call would ever execute the following query due to the `present?` check:\n\n```sql\nSELECT some_objects.* FROM some_objects WHERE something IS NULL\n```\n\nIt turns out that `uuid` columns behaves different from a `text`, `int`, or `varchar` column. ActiveRecord determines whether the user input is actually a valid UUID format. In case it isn't, it'll coerce the input to nil, which causes the constructed query to execute an `IS NULL` query instead of an exact text match on the given value.\n\nHere's a copy from a Rails console to show this behavior:\n\n```\n[1] pry(main)> SomeObject.where(something: \"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaaaa\").to_sql\n=> \"SELECT \\\"some_objects\\\".* FROM \\\"some_objects\\\" WHERE \\\"some_objects\\\".\\\"something\\\" = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaaaa'\"\n[2] pry(main)> SomeObject.where(something: \"zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzzzz\").to_sql\n=> \"SELECT \\\"some_objects\\\".* FROM \\\"some_objects\\\" WHERE \\\"some_objects\\\".\\\"something\\\" IS NULL\"\n```\n\nThis was rather unexpected. The regular expression that we implemented matched on `a-z0-9` instead of `a-f0-9`, so an attacker could've picked any valid UUID and changed a single character to a `z` to fool the input validation, invalidate the UUID, and then execute the `IS NULL` query.\n\nAll in all, this was a valid bypass for the original security vulnerability, which is why we'll be awarding you with a $7,500 bounty. Thanks for your thorough review of the security fix, it's much appreciated!",
      "automated_response": false,
      "created_at": "2018-10-25T17:23:54.106Z",
      "updated_at": "2018-10-25T17:23:54.106Z",
      "actor": {
        "username": "jobert",
        "cleared": true,
        "verified": true,
        "url": "/jobert",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": true
      },
      "reporter": {
        "username": "popeax",
        "url": "/popeax"
      },
      "genius_execution_id": null,
      "team_handle": "security"
    },
    {
      "id": 3533852,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportVulnerabilityTypesUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2018-10-25T17:24:21.332Z",
      "updated_at": "2018-10-25T17:24:21.332Z",
      "additional_data": {
        "added_weaknesses": [
          {
            "id": 107,
            "name": "Improper Input Validation"
          }
        ],
        "removed_weaknesses": [
          {
            "id": 65,
            "name": "Business Logic Errors"
          }
        ]
      },
      "actor": {
        "username": "jobert",
        "cleared": true,
        "verified": true,
        "url": "/jobert",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": true
      },
      "genius_execution_id": null,
      "team_handle": "security"
    },
    {
      "id": 3535824,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BountyAwarded",
      "message": "",
      "automated_response": false,
      "created_at": "2018-10-25T22:38:15.090Z",
      "updated_at": "2018-10-25T22:38:15.090Z",
      "actor": {
        "url": "/security",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "HackerOne"
        }
      },
      "bounty_currency": "usd",
      "genius_execution_id": null,
      "team_handle": "security",
      "collaborator": {
        "username": "popeax",
        "url": "/popeax"
      }
    },
    {
      "id": 3535825,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2018-10-25T22:38:35.229Z",
      "updated_at": "2018-10-25T22:38:35.229Z",
      "first_to_agree": true,
      "actor": {
        "username": "jobert",
        "cleared": true,
        "verified": true,
        "url": "/jobert",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": true
      },
      "genius_execution_id": null,
      "team_handle": "security"
    },
    {
      "id": 3535826,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ManuallyDisclosed",
      "message": "",
      "automated_response": false,
      "created_at": "2018-10-25T22:38:41.883Z",
      "updated_at": "2018-10-25T22:38:41.883Z",
      "actor": {
        "username": "jobert",
        "cleared": true,
        "verified": true,
        "url": "/jobert",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": true
      },
      "genius_execution_id": null,
      "team_handle": "security"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}