{
  "id": 389108,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zODkxMDg=",
  "url": "https://hackerone.com/reports/389108",
  "title": "Handling of `tracking` command allows making arbitrary blind requests with user's cookies from Grammarly Extension's origin",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2018-08-01T01:12:27.640Z",
  "submitted_at": "2018-08-01T01:12:27.640Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "metnew",
    "url": "/metnew",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22746,
    "url": "https://hackerone.com/grammarly",
    "handle": "grammarly",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/746/a2bf7f90c683af5214fcc74c1df6804286ee97ce_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/746/a2bf7f90c683af5214fcc74c1df6804286ee97ce_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Grammarly",
      "twitter_handle": "",
      "website": "https://www.grammarly.com",
      "about": "Grammarly makes sure everything you type is clear, effective, and mistake-free."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-08-01T15:59:18.760Z",
  "bug_reporter_agreed_on_going_public_at": "2019-07-27T17:33:33.768Z",
  "team_member_agreed_on_going_public_at": "2019-08-01T15:59:18.219Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## **Summary:**\n\nAttacker could trigger Grammarly extension's `gnar._fetch` command using a crafted page to perform XHR with cookies and any configurational params to any cross-origin resource.\n\n## **Description:** \n\n### Page could Init Grammarly popup editor [no user gesture, helper]\n\nEvents have `isTrusted` property, which allows to determinate, whether current event is trusted(initiated by user). Grammarly popup editor could be initiated by page.\n\nAs I understood: injected content script could successfully emit events to background page only if popup was initiated earlier. \nThat means, attacker needs to initiate the popup somehow to communicate with background page through injected content script.\n\nNot sure about the root cause of this behavior. Probably, because popup is created by background page origin, that's why background page becomes accessible after this.\n\n## Sending commands to Grammarly content script\n\nActive page could send commands to injected Grammarly content script using `window.postMessage`.\n\nCommand structure:\n``` js\nwindow.postMessage({\n    grammarly: true,\n    action: 'tracking',\n    method: 'gnar._fetch',\n    props: {}\n    params: {}\n}, \"*\")\n```\n\n## Commands handling in injected content script\n\nGrammarly content script \"parses\" commands using this snippet:\n\n``` js\nfunction Z(e) {\n    var t, n = e.action;\n    ... \n    \"tracking\" === n && e.method && g.call(e.method, e.param, e.props)\n    ...\n}\n```\n\n`tracking` commands are later passed to this snippet:\n``` js\nf.emitBackground(\"tracking-call\", {\n    msg: e, // command's \"method\" field\n    data: t // command's \"props\" + \"params\" fields\n }, s)\n```\n\nThis `f.emitBackground` sends event to background page.\n\n### Commands handling in extension's background page\n\nThe extension uses next snippet to handle `tracking` commands from content script:\n\n``` js\nfunction w(e, t) { // t = params + props\n    var n, a = o(e.split(\".\"), 2), // a = command's \"method\" field splitted by dot into array\n        c = a[0],\n        s = a[1];\n    if (\"gnar\" === c) \n        if (p.tracker.gnar)\n            if (\"track\" === s) {\n                var u = o(t, 2),\n                    l = u[0], // \n                    f = u[1];\n                p.tracker.gnar.track(r({\n                    eventName: g.gnarAppName + \"/\" + l // something not discovered yet \n                }, f))\n            } else\n                p.tracker.gnar[s] ? (n = p.tracker.gnar)[s].apply(n, i(t)) : b.error(\n                    \"gnar client does not have method '\" + s + \"' for '\" +\n                    e + \"' in runMessage\");\n    else b.error(\"gnar client not available for '\" + e + \"' in runMessage\");\n    else b.error(\"unrecognized'\" + e + \"' in runMessage \")\n}\n```\n\n#### `p.tracker.gnar`\n\nThat's an object with next structure:\n```js\n{\n    _batchId: 8,\n    _client: \"chromeExt\",\n    _clientVersion: \"14.858.1756\",\n    _containerIdManager: t {primaryStorage: t, secondaryStorages: Array(3), _logger: t, _metric: e,  _cacheSuccessTimeoutMillis: 1000, …},\n    _eventsUrl: \"https://gnar.grammarly.com/events\",\n    _fetch: ƒ (),\n    _instanceId: \"nxIwqgPE\",\n    _isTest: false,\n    _isUserReady: true,\n    _liteUrl: \"https://gnar.grammarly.com/lite\",\n    _logger: t {name: \"gnar\", level: 2, context: e, appender: ƒ},\n    _metric: t {name: \"gnar\", timersSink: ƒ, countersSink: ƒ, _fetch: ƒ, _sendTimeout: 7500, …},\n    _queue: [],\n    _storePingTimestamp: true,\n    _userId: \"701014151\n}\n```\n\nAdditionally, it has a set of methods.\n\n> I guess `p.tracker.gnar` controls reporting telemetry events to Grammarly.\n\n#### Attacker-controllable function call\n\n``` js\np.tracker.gnar[s] ? (n = p.tracker.gnar)[s].apply(n, i(t))\n```\n\n`s` = that's the second part of command's \"method\" field. E.g. `\"method\": \"hello.grammarly\"` -> s = 'grammarly'\n`t` = `params` and `props`\n\nThis snippet could be rewritten as:\n\n``` js\nGNAR[methodsMethod].apply(GNAR,  toArray(paramsAndProps))\n```\n\n#### `p.tracker.gnar`s `.constructor` and methods\n\n`p.tracker.gnar` object could be overwritten using `.constructor`  and `.setUser` methods those allow changing some `p.tracker.gnar` properties. \n\n`p.tracker.gnar`s `.constructor`\n```\nfunction e(e, t, n, r, o, i, c, s) { // Attacker controls e and t params + non-listed params using `setUser`\n            void 0 === s && (s = !1),\n            this._client = t,\n            this._clientVersion = n,\n            this._fetch = r,\n            this._containerIdManager = o,\n            this._logger = i,\n            this._metric = c,\n            this._storePingTimestamp = s,\n            this._instanceId = a.alphanumeric(8),\n            this._batchId = 0,\n            this._isUserReady = !1,\n            this._queue = [],\n            this._eventsUrl = e + \"/events\",\n            this._liteUrl = e + \"/lite\",\n            this._pingMaybe()\n        }\n```\n\n##### `gnar.setUser`/`gnar._execQueue` / `gnar._send` / `gnar._doSend` / `gnar._enqueue` \n\n`p.tracker.gnar` has a set of interesting methods like `setUser`. Grammarly extension uses `setUser` to invalidate session. \n\n``` js\na[\"session-invalidate\"] = function (e, t, n, r, o) {\n        ...\n        s.call(\"gnar.setUser\", i, c)\n        ...\n}\n```\n\n> I'm not sure, but looks like calling this method with crafted payload may lead to incorrect userId in telemetry. \n\nTeam probably should know how much powerful listed above funcstions are. \n\n#### `_fetch`\n\n`p.tracker.gnar` has `_fetch` property which points to `fetch` function.\nMore interesting is that, it's a polyfill, not a native function.\n\n> I guess this polyfill isn't compliable to WHATWG fetch, because it allows making requests to `data:/chrome-extension:/` origins.\n\nThat means, it's possible to call `fetch()` with attacker's params from the extension.\n\n```\np.tracker.gnar_fetch.apply(p.tracker.gnar, [\"FetchURL\", \"FetchParams\"])\n```\n\nPage has to call `window.postMessage` with next object to call `fetch` from the extension\n```\nx = window.top.postMessage({\n    grammarly: true,\n    action: 'tracking',\n    method: 'gnar._fetch',\n    props: { // FetchParams\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    },\n    param: 'https://mail.google.com/mail/u/0/#inbox' // <FetchURL>\n}, \"*\")\n```\n\n#### XHR + cookies\n\nGrammarly extension has permissions to access all URLs and cookies from all origins. \nGrammarly makes all XHR requests with cookies -> it's possible for attacker to make blind requests with cookies to any origin.\n\n> (except `chrome://`, however, `chrome-extension://` is allowed because of polyfill for `fetch`).\n\n> More details in \"Impact\" section.\n\n## Browsers Verified In:\n\nChrome 70.0.3508.0 Canary\nChrome 68.0.3440.75 Stable\nGrammarly: 14.858.1756\n\n## Steps To Reproduce:\n\n### Change user's name in Grammarly\n1. Open `app-grammarly-csfr.html`\n2. Page makes request to `https://auth.grammarly.com/v3/user` to change your name to \"Anonymous User\" \n\n### GET Gmail as proof\n1. Open Grammarly extension debug page in Chrome\n2. Open `get-request-to-gmail.html`\n3. Open \"Network\" tab in the debug page\n4. Note that extension made a GET request to Gmail (with cookies)\n5. Open request preview\n6. Note that request includes your gmail content\n7.  That means, it's possible to initiate requests with cookies to any origin. Web applications without \"direct CSRF protection\" (e.g. `hidden` field with some value, not token in cookies ) are controllable by attacker.\n\n## Supporting Material/References:\n\n1. Screencast for POST to`https://auth.grammarly.com/v3/user`. [1st PoC]\n2. Screencast to prove that Grammarly makes requests with cookies to cross-origin domains. [2nd PoC] \n\n> I didn't know a good CSRF target, so I've recorded a second screencast with Gmail and GET request. I think that's enough to prove the vulnerability.\n\n## Impact\n\n## Universal CSRF\n> Actually, \"Universal CSRF\" isn't a correct definition 😉. But I think it correctly expresses impact of the vulnerability.\n\nAttacker could trigger Grammarly extension's `gnar._fetch` command  using crafted page to perform XHR with any configurational params to any origin [without user gesture]. \n\nWeb applications without good protection against CSRF (`hidden` field in form, not cookies/origin check/etc.) are vulnerable to CSRF. \n\nPage could made **any number of blind requests through Grammarly extension with cookies**. \n\n## Overwrite `p.tracker.gnar` and call any method of this object\n\n`p.tracker.gnar` has a set of interesting methods like `setUser`. Grammarly extension uses `setUser` to invalidate session.\n\n> I assume, calling this methods leads to sending invalid telemetry data to Grammarly.\n\n## Possible UXSS via data manipulation\n\nAttacker could overwrite `p.tracker.gnar` with arbitrary data. However, `postMessage` doesn't allow to send [non-clonable objects](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).\n\nAttacker could call something like:\n\n```\nAnythingClonable.apply(Object, [AnythingClonable])\n```\n\n> I didn't test this with `File/Blob/FileList` non-clonnable objects. However, I think it's not possible to turn the snippet above into XSS.\n \n> P.S: Grammarly, sorry for typos/mistakes if any. Your extension has some bugs at `hackerone.com` domain.",
  "bounty_amount": "3000.0",
  "formatted_bounty": "$3,000",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 327032,
      "file_name": "grammarly-ucsrf-username.mp4",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/327/032/467b124971903936f000ca14379c97eddc0d9b1a/grammarly-ucsrf-username.mp4?response-content-disposition=attachment%3B%20filename%3D%22grammarly-ucsrf-username.mp4%22%3B%20filename%2A%3DUTF-8%27%27grammarly-ucsrf-username.mp4&response-content-type=video%2Fmp4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3C7WDVGJ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074115Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJHMEUCIDn3me4BiYTd9cEhiJgERTjoUKuLBgplckyo1gv%2Bebm1AiEAoY8YKDOvzgyQ3egDWlUq%2Bg%2BoNFbGN1HoNJcuLub14nsqsQUIKBADGgwwMTM2MTkyNzQ4NDkiDEqDO33z8UmFn3D1piqOBXBmutxLn4O8upRMZQVOHUfAZz%2F5H956nuLFNB1w4dHM76Efd6Esqgkx2W3whuKEdFaGEO2k4o2AP0w7OpJczkeT3IDGGn4RUI5bPh%2BiJMkqVI8tK3UzEpJJUSF6HbMTrwao7Uati6%2BREOOmMX2yjZ83ZIRyEqtTJSLCS4BGXULPEFPojDY4qjNA5b60yyjAnPj6gbXk%2BZoo550WZHFsUcA0FJSu69aScHPCXoxh2hDEQf8HLfH4FrgkK4qMpYKxTdxDKK46CLw%2Fg8T4YuK2rOrqRiOsGsGglYhAi9L5PX6QU8fFeU49TJFGG%2BkWWZX7ZXAb53PZjbJmvmXB%2FTEgBADExPBqb0GtBwSXjsfeg2MUkJ1JJKrjSnftn2uF44Lwl3eXcyZ%2FLbiRYRl8qOKyOuIMKOV4yidbKYdgPdbf35OZMs6zr%2F%2FRxFnwc%2FHV68T%2BizwT%2BFlshKH3y%2B%2BbJFOP6i0T1v7M7nKQFvxNABDtplEI%2B9fqUGW1Dg7ibbsBkVWXePr29ZQd73EmOTWK8CQDFOrZf9Oy4UK9y%2FKH%2Bc21lt7H7ZwU%2Fa2h97u0mRoHMoHc1rVbSje1tINDMsdaGwQRGz3ysdTjmviAJnhwBli9m9wXmWXllBnkXU4%2BfQtLWMu4iVOFewLKkpWUKsLuXh6jx3JosBPmfDd1N42E7Fr4XdEKa0y47oWruRIqlmjxP4X6JXrTROYLdF2CZ0zhGeAUylgD%2B4xxKokPK%2FGkiiw5BiLcaWolpFCXanJqcdWdwy6yMeRcmWXvrr50l3xmx4ZVenDU%2FJtgoI%2BVznl1w5kWpZyrrryWGATyEfw47VeINLtjJXQiBm%2FtsdJKR%2FUNyu1wxs4SPRLdf%2Fje9wnFOdNjAzD4n7qoBjqxAclBXSZX5G1EGG0VOqTUzC21u2MNyu51phI1ys1%2B6uIP3wgenMeIXpBmciTImpA3aFP4ng9cLZGSnZTRsU0zXZxH4%2FyvKBheT7YuS%2F6dlvGllnxjsRJpJSxFtvt%2BwQMln5HVRmPnEIWXGkSOdOWIYAiRkfYoHWEIfPVniUKAcjpGHmd44L06V2hWu2jHKJz33sdHWQxZVh5RDQ0uL0bYoUosxbzl%2BjgtMDeHkZmRLFwM3Q%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=f68ed778d3d559c029a07dc0cedb71a36c2d3035ec1d4387a9fc623b95f55cab",
      "file_size": 843252,
      "type": "video/mp4",
      "moderated": null
    },
    {
      "id": 327034,
      "file_name": "grammarly-gmail-get-as-proof.mp4",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/327/034/33c5d7b689653dd16536ca9f4d84e73fc317c5ab/grammarly-gmail-get-as-proof.mp4?response-content-disposition=attachment%3B%20filename%3D%22grammarly-gmail-get-as-proof.mp4%22%3B%20filename%2A%3DUTF-8%27%27grammarly-gmail-get-as-proof.mp4&response-content-type=video%2Fmp4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3C7WDVGJ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074115Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJHMEUCIDn3me4BiYTd9cEhiJgERTjoUKuLBgplckyo1gv%2Bebm1AiEAoY8YKDOvzgyQ3egDWlUq%2Bg%2BoNFbGN1HoNJcuLub14nsqsQUIKBADGgwwMTM2MTkyNzQ4NDkiDEqDO33z8UmFn3D1piqOBXBmutxLn4O8upRMZQVOHUfAZz%2F5H956nuLFNB1w4dHM76Efd6Esqgkx2W3whuKEdFaGEO2k4o2AP0w7OpJczkeT3IDGGn4RUI5bPh%2BiJMkqVI8tK3UzEpJJUSF6HbMTrwao7Uati6%2BREOOmMX2yjZ83ZIRyEqtTJSLCS4BGXULPEFPojDY4qjNA5b60yyjAnPj6gbXk%2BZoo550WZHFsUcA0FJSu69aScHPCXoxh2hDEQf8HLfH4FrgkK4qMpYKxTdxDKK46CLw%2Fg8T4YuK2rOrqRiOsGsGglYhAi9L5PX6QU8fFeU49TJFGG%2BkWWZX7ZXAb53PZjbJmvmXB%2FTEgBADExPBqb0GtBwSXjsfeg2MUkJ1JJKrjSnftn2uF44Lwl3eXcyZ%2FLbiRYRl8qOKyOuIMKOV4yidbKYdgPdbf35OZMs6zr%2F%2FRxFnwc%2FHV68T%2BizwT%2BFlshKH3y%2B%2BbJFOP6i0T1v7M7nKQFvxNABDtplEI%2B9fqUGW1Dg7ibbsBkVWXePr29ZQd73EmOTWK8CQDFOrZf9Oy4UK9y%2FKH%2Bc21lt7H7ZwU%2Fa2h97u0mRoHMoHc1rVbSje1tINDMsdaGwQRGz3ysdTjmviAJnhwBli9m9wXmWXllBnkXU4%2BfQtLWMu4iVOFewLKkpWUKsLuXh6jx3JosBPmfDd1N42E7Fr4XdEKa0y47oWruRIqlmjxP4X6JXrTROYLdF2CZ0zhGeAUylgD%2B4xxKokPK%2FGkiiw5BiLcaWolpFCXanJqcdWdwy6yMeRcmWXvrr50l3xmx4ZVenDU%2FJtgoI%2BVznl1w5kWpZyrrryWGATyEfw47VeINLtjJXQiBm%2FtsdJKR%2FUNyu1wxs4SPRLdf%2Fje9wnFOdNjAzD4n7qoBjqxAclBXSZX5G1EGG0VOqTUzC21u2MNyu51phI1ys1%2B6uIP3wgenMeIXpBmciTImpA3aFP4ng9cLZGSnZTRsU0zXZxH4%2FyvKBheT7YuS%2F6dlvGllnxjsRJpJSxFtvt%2BwQMln5HVRmPnEIWXGkSOdOWIYAiRkfYoHWEIfPVniUKAcjpGHmd44L06V2hWu2jHKJz33sdHWQxZVh5RDQ0uL0bYoUosxbzl%2BjgtMDeHkZmRLFwM3Q%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b5f00cd10c3aaa58072c7814bd9c01a6984c64e0e4dff88b4755404dba7971de",
      "file_size": 1628434,
      "type": "video/mp4",
      "moderated": null
    },
    {
      "id": 327036,
      "file_name": "app-grammarly-csfr.html",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/327/036/3e603eb3104e711215f08184bf72c7cd184c048a/app-grammarly-csfr.html?response-content-disposition=attachment%3B%20filename%3D%22app-grammarly-csfr.html%22%3B%20filename%2A%3DUTF-8%27%27app-grammarly-csfr.html&response-content-type=application%2Foctet-stream&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3C7WDVGJ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074115Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJHMEUCIDn3me4BiYTd9cEhiJgERTjoUKuLBgplckyo1gv%2Bebm1AiEAoY8YKDOvzgyQ3egDWlUq%2Bg%2BoNFbGN1HoNJcuLub14nsqsQUIKBADGgwwMTM2MTkyNzQ4NDkiDEqDO33z8UmFn3D1piqOBXBmutxLn4O8upRMZQVOHUfAZz%2F5H956nuLFNB1w4dHM76Efd6Esqgkx2W3whuKEdFaGEO2k4o2AP0w7OpJczkeT3IDGGn4RUI5bPh%2BiJMkqVI8tK3UzEpJJUSF6HbMTrwao7Uati6%2BREOOmMX2yjZ83ZIRyEqtTJSLCS4BGXULPEFPojDY4qjNA5b60yyjAnPj6gbXk%2BZoo550WZHFsUcA0FJSu69aScHPCXoxh2hDEQf8HLfH4FrgkK4qMpYKxTdxDKK46CLw%2Fg8T4YuK2rOrqRiOsGsGglYhAi9L5PX6QU8fFeU49TJFGG%2BkWWZX7ZXAb53PZjbJmvmXB%2FTEgBADExPBqb0GtBwSXjsfeg2MUkJ1JJKrjSnftn2uF44Lwl3eXcyZ%2FLbiRYRl8qOKyOuIMKOV4yidbKYdgPdbf35OZMs6zr%2F%2FRxFnwc%2FHV68T%2BizwT%2BFlshKH3y%2B%2BbJFOP6i0T1v7M7nKQFvxNABDtplEI%2B9fqUGW1Dg7ibbsBkVWXePr29ZQd73EmOTWK8CQDFOrZf9Oy4UK9y%2FKH%2Bc21lt7H7ZwU%2Fa2h97u0mRoHMoHc1rVbSje1tINDMsdaGwQRGz3ysdTjmviAJnhwBli9m9wXmWXllBnkXU4%2BfQtLWMu4iVOFewLKkpWUKsLuXh6jx3JosBPmfDd1N42E7Fr4XdEKa0y47oWruRIqlmjxP4X6JXrTROYLdF2CZ0zhGeAUylgD%2B4xxKokPK%2FGkiiw5BiLcaWolpFCXanJqcdWdwy6yMeRcmWXvrr50l3xmx4ZVenDU%2FJtgoI%2BVznl1w5kWpZyrrryWGATyEfw47VeINLtjJXQiBm%2FtsdJKR%2FUNyu1wxs4SPRLdf%2Fje9wnFOdNjAzD4n7qoBjqxAclBXSZX5G1EGG0VOqTUzC21u2MNyu51phI1ys1%2B6uIP3wgenMeIXpBmciTImpA3aFP4ng9cLZGSnZTRsU0zXZxH4%2FyvKBheT7YuS%2F6dlvGllnxjsRJpJSxFtvt%2BwQMln5HVRmPnEIWXGkSOdOWIYAiRkfYoHWEIfPVniUKAcjpGHmd44L06V2hWu2jHKJz33sdHWQxZVh5RDQ0uL0bYoUosxbzl%2BjgtMDeHkZmRLFwM3Q%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8225ed6f6c97c0358094310aebd874cf465b1ee99edcb4bed588bf2221e52f77",
      "file_size": 1039,
      "type": "text/html",
      "moderated": null
    },
    {
      "id": 327037,
      "file_name": "get-request-to-gmail.html",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/327/037/50ce0ebc9c51f2be2c7914fd304f72431c56377a/get-request-to-gmail.html?response-content-disposition=attachment%3B%20filename%3D%22get-request-to-gmail.html%22%3B%20filename%2A%3DUTF-8%27%27get-request-to-gmail.html&response-content-type=application%2Foctet-stream&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3C7WDVGJ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074115Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJHMEUCIDn3me4BiYTd9cEhiJgERTjoUKuLBgplckyo1gv%2Bebm1AiEAoY8YKDOvzgyQ3egDWlUq%2Bg%2BoNFbGN1HoNJcuLub14nsqsQUIKBADGgwwMTM2MTkyNzQ4NDkiDEqDO33z8UmFn3D1piqOBXBmutxLn4O8upRMZQVOHUfAZz%2F5H956nuLFNB1w4dHM76Efd6Esqgkx2W3whuKEdFaGEO2k4o2AP0w7OpJczkeT3IDGGn4RUI5bPh%2BiJMkqVI8tK3UzEpJJUSF6HbMTrwao7Uati6%2BREOOmMX2yjZ83ZIRyEqtTJSLCS4BGXULPEFPojDY4qjNA5b60yyjAnPj6gbXk%2BZoo550WZHFsUcA0FJSu69aScHPCXoxh2hDEQf8HLfH4FrgkK4qMpYKxTdxDKK46CLw%2Fg8T4YuK2rOrqRiOsGsGglYhAi9L5PX6QU8fFeU49TJFGG%2BkWWZX7ZXAb53PZjbJmvmXB%2FTEgBADExPBqb0GtBwSXjsfeg2MUkJ1JJKrjSnftn2uF44Lwl3eXcyZ%2FLbiRYRl8qOKyOuIMKOV4yidbKYdgPdbf35OZMs6zr%2F%2FRxFnwc%2FHV68T%2BizwT%2BFlshKH3y%2B%2BbJFOP6i0T1v7M7nKQFvxNABDtplEI%2B9fqUGW1Dg7ibbsBkVWXePr29ZQd73EmOTWK8CQDFOrZf9Oy4UK9y%2FKH%2Bc21lt7H7ZwU%2Fa2h97u0mRoHMoHc1rVbSje1tINDMsdaGwQRGz3ysdTjmviAJnhwBli9m9wXmWXllBnkXU4%2BfQtLWMu4iVOFewLKkpWUKsLuXh6jx3JosBPmfDd1N42E7Fr4XdEKa0y47oWruRIqlmjxP4X6JXrTROYLdF2CZ0zhGeAUylgD%2B4xxKokPK%2FGkiiw5BiLcaWolpFCXanJqcdWdwy6yMeRcmWXvrr50l3xmx4ZVenDU%2FJtgoI%2BVznl1w5kWpZyrrryWGATyEfw47VeINLtjJXQiBm%2FtsdJKR%2FUNyu1wxs4SPRLdf%2Fje9wnFOdNjAzD4n7qoBjqxAclBXSZX5G1EGG0VOqTUzC21u2MNyu51phI1ys1%2B6uIP3wgenMeIXpBmciTImpA3aFP4ng9cLZGSnZTRsU0zXZxH4%2FyvKBheT7YuS%2F6dlvGllnxjsRJpJSxFtvt%2BwQMln5HVRmPnEIWXGkSOdOWIYAiRkfYoHWEIfPVniUKAcjpGHmd44L06V2hWu2jHKJz33sdHWQxZVh5RDQ0uL0bYoUosxbzl%2BjgtMDeHkZmRLFwM3Q%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=13265d5afd5d35094db0a4992a5f5537e3450eda404990ed213c07ec4643b5d1",
      "file_size": 717,
      "type": "text/html",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2019-08-26T17:33:33.931Z",
  "allow_singular_disclosure_after": -128614061.26387063,
  "singular_disclosure_allowed": true,
  "vote_count": 191,
  "voters": [
    "tsyogesh40",
    "daehee",
    "n1m0",
    "d0xing",
    "dee-see",
    "p1stachios",
    "rez0",
    "mashoud1122",
    "kapytein",
    "muon4",
    "and 181 more..."
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 3577,
    "asset_type": "OTHER",
    "asset_identifier": "Browser Extensions",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 3124342,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Typo: `File/Blob/FileList` **clonnable** objects",
      "automated_response": false,
      "created_at": "2018-08-01T01:13:42.832Z",
      "updated_at": "2018-08-01T01:13:42.832Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3124838,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "**UPD:** it's possible to disclose Grammarly extension id in a browser using `gnar._fetch()`:\n1. Run `server.js` (`npm i serve-handler && node server.js`) \n2. Open `http://localhost:5000/to-localhost.html` (assuming both files are in the same dir)\n3. Server logs headers for `http://localhost:5000/detect-id` requests\n4. Find `origin: 'chrome-extension://<id>'` in process output\n\nNeed some time to investigate this issue deeper. Maybe it's possible to escalate this bug to full RCE.\n\n> Note that requests made using `gnar._fetch` includes \"Origin\" header.",
      "automated_response": false,
      "created_at": "2018-08-01T06:39:29.813Z",
      "updated_at": "2018-08-01T06:45:31.487Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "attachments": [
        {
          "id": 327105,
          "filename": "server.js",
          "type": "text/plain",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/327/105/bb20c3a5428d55ddabd07650a13750a2caa1eb89/server.js?response-content-disposition=attachment%3B%20filename%3D%22server.js%22%3B%20filename%2A%3DUTF-8%27%27server.js&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3C7WDVGJ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074115Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJHMEUCIDn3me4BiYTd9cEhiJgERTjoUKuLBgplckyo1gv%2Bebm1AiEAoY8YKDOvzgyQ3egDWlUq%2Bg%2BoNFbGN1HoNJcuLub14nsqsQUIKBADGgwwMTM2MTkyNzQ4NDkiDEqDO33z8UmFn3D1piqOBXBmutxLn4O8upRMZQVOHUfAZz%2F5H956nuLFNB1w4dHM76Efd6Esqgkx2W3whuKEdFaGEO2k4o2AP0w7OpJczkeT3IDGGn4RUI5bPh%2BiJMkqVI8tK3UzEpJJUSF6HbMTrwao7Uati6%2BREOOmMX2yjZ83ZIRyEqtTJSLCS4BGXULPEFPojDY4qjNA5b60yyjAnPj6gbXk%2BZoo550WZHFsUcA0FJSu69aScHPCXoxh2hDEQf8HLfH4FrgkK4qMpYKxTdxDKK46CLw%2Fg8T4YuK2rOrqRiOsGsGglYhAi9L5PX6QU8fFeU49TJFGG%2BkWWZX7ZXAb53PZjbJmvmXB%2FTEgBADExPBqb0GtBwSXjsfeg2MUkJ1JJKrjSnftn2uF44Lwl3eXcyZ%2FLbiRYRl8qOKyOuIMKOV4yidbKYdgPdbf35OZMs6zr%2F%2FRxFnwc%2FHV68T%2BizwT%2BFlshKH3y%2B%2BbJFOP6i0T1v7M7nKQFvxNABDtplEI%2B9fqUGW1Dg7ibbsBkVWXePr29ZQd73EmOTWK8CQDFOrZf9Oy4UK9y%2FKH%2Bc21lt7H7ZwU%2Fa2h97u0mRoHMoHc1rVbSje1tINDMsdaGwQRGz3ysdTjmviAJnhwBli9m9wXmWXllBnkXU4%2BfQtLWMu4iVOFewLKkpWUKsLuXh6jx3JosBPmfDd1N42E7Fr4XdEKa0y47oWruRIqlmjxP4X6JXrTROYLdF2CZ0zhGeAUylgD%2B4xxKokPK%2FGkiiw5BiLcaWolpFCXanJqcdWdwy6yMeRcmWXvrr50l3xmx4ZVenDU%2FJtgoI%2BVznl1w5kWpZyrrryWGATyEfw47VeINLtjJXQiBm%2FtsdJKR%2FUNyu1wxs4SPRLdf%2Fje9wnFOdNjAzD4n7qoBjqxAclBXSZX5G1EGG0VOqTUzC21u2MNyu51phI1ys1%2B6uIP3wgenMeIXpBmciTImpA3aFP4ng9cLZGSnZTRsU0zXZxH4%2FyvKBheT7YuS%2F6dlvGllnxjsRJpJSxFtvt%2BwQMln5HVRmPnEIWXGkSOdOWIYAiRkfYoHWEIfPVniUKAcjpGHmd44L06V2hWu2jHKJz33sdHWQxZVh5RDQ0uL0bYoUosxbzl%2BjgtMDeHkZmRLFwM3Q%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=7fe2cddc8536835937d49cb35b084bc98860194a1bbb6c3e22e18a16a4d2ea13"
        },
        {
          "id": 327104,
          "filename": "to-localhost.html",
          "type": "text/html",
          "url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/327/104/b9c7710672a643f79cb6b87ff2a190b21b357226/to-localhost.html?response-content-disposition=attachment%3B%20filename%3D%22to-localhost.html%22%3B%20filename%2A%3DUTF-8%27%27to-localhost.html&response-content-type=application%2Foctet-stream&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3C7WDVGJ%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074115Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC8aCXVzLXdlc3QtMiJHMEUCIDn3me4BiYTd9cEhiJgERTjoUKuLBgplckyo1gv%2Bebm1AiEAoY8YKDOvzgyQ3egDWlUq%2Bg%2BoNFbGN1HoNJcuLub14nsqsQUIKBADGgwwMTM2MTkyNzQ4NDkiDEqDO33z8UmFn3D1piqOBXBmutxLn4O8upRMZQVOHUfAZz%2F5H956nuLFNB1w4dHM76Efd6Esqgkx2W3whuKEdFaGEO2k4o2AP0w7OpJczkeT3IDGGn4RUI5bPh%2BiJMkqVI8tK3UzEpJJUSF6HbMTrwao7Uati6%2BREOOmMX2yjZ83ZIRyEqtTJSLCS4BGXULPEFPojDY4qjNA5b60yyjAnPj6gbXk%2BZoo550WZHFsUcA0FJSu69aScHPCXoxh2hDEQf8HLfH4FrgkK4qMpYKxTdxDKK46CLw%2Fg8T4YuK2rOrqRiOsGsGglYhAi9L5PX6QU8fFeU49TJFGG%2BkWWZX7ZXAb53PZjbJmvmXB%2FTEgBADExPBqb0GtBwSXjsfeg2MUkJ1JJKrjSnftn2uF44Lwl3eXcyZ%2FLbiRYRl8qOKyOuIMKOV4yidbKYdgPdbf35OZMs6zr%2F%2FRxFnwc%2FHV68T%2BizwT%2BFlshKH3y%2B%2BbJFOP6i0T1v7M7nKQFvxNABDtplEI%2B9fqUGW1Dg7ibbsBkVWXePr29ZQd73EmOTWK8CQDFOrZf9Oy4UK9y%2FKH%2Bc21lt7H7ZwU%2Fa2h97u0mRoHMoHc1rVbSje1tINDMsdaGwQRGz3ysdTjmviAJnhwBli9m9wXmWXllBnkXU4%2BfQtLWMu4iVOFewLKkpWUKsLuXh6jx3JosBPmfDd1N42E7Fr4XdEKa0y47oWruRIqlmjxP4X6JXrTROYLdF2CZ0zhGeAUylgD%2B4xxKokPK%2FGkiiw5BiLcaWolpFCXanJqcdWdwy6yMeRcmWXvrr50l3xmx4ZVenDU%2FJtgoI%2BVznl1w5kWpZyrrryWGATyEfw47VeINLtjJXQiBm%2FtsdJKR%2FUNyu1wxs4SPRLdf%2Fje9wnFOdNjAzD4n7qoBjqxAclBXSZX5G1EGG0VOqTUzC21u2MNyu51phI1ys1%2B6uIP3wgenMeIXpBmciTImpA3aFP4ng9cLZGSnZTRsU0zXZxH4%2FyvKBheT7YuS%2F6dlvGllnxjsRJpJSxFtvt%2BwQMln5HVRmPnEIWXGkSOdOWIYAiRkfYoHWEIfPVniUKAcjpGHmd44L06V2hWu2jHKJz33sdHWQxZVh5RDQ0uL0bYoUosxbzl%2BjgtMDeHkZmRLFwM3Q%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=90a42f405acf8a6ba277adbf7a222d3f6c28f4fc28002bb1933c607c3b61d804"
        }
      ],
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3124915,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "### Attack Scenario\n\n> [3-5 steps are only theoretical currently]\n\nI've got an assumption about the attack scenario that could lead to RCE. However, it has one requirement:\n\n1. User visits attacker's page\n2. Page triggers XHR from background page to attacker's server and discloses extension's id\n3. [Assumption] #389076 or `window.open` could be triggered to open a page on `*://*.grammarly.com` URL. Grammarly has some domains those aren't listed on hackerone and could be vulnerable. XSS on \"unprotected\" `*.grammarly.com` domain is enough to trigger step 4.\n4. Page at `*://*.grammarly.com` vulnerable to XSS calls `chrome.runtime.connect` with extension id from step 2.\n5. Result: attacker has a page connected to Grammarly's background page and could send own commands to Grammarly extension.",
      "automated_response": false,
      "created_at": "2018-08-01T07:37:08.070Z",
      "updated_at": "2018-08-01T07:48:58.973Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3130408,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "## Firefox\n\nI was able to repro this with Grammarly for Firefox 8.828.1757 on 63.0a1 (2018-07-31) Mozilla Nightly\n",
      "automated_response": false,
      "created_at": "2018-08-01T21:36:06.151Z",
      "updated_at": "2018-08-01T21:36:06.151Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3131711,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @metnew,\n\nThanks for your submission. We are currently reviewing your report and will get back to you once we have additional information to share.\n\nKind regards,\n@chessmast3r ",
      "automated_response": false,
      "created_at": "2018-08-02T08:54:42.629Z",
      "updated_at": "2018-08-02T08:54:42.629Z",
      "actor": {
        "username": "chessmast3r",
        "cleared": false,
        "verified": false,
        "url": "/chessmast3r",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/220/459/6b3c5fca9df9cde7fe36b55238b13d2cea86ea80_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3139501,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "#### Schema modifying\n> Theoretically: Object schema modification is possible when sending an object from the page to content script. Maybe object with modified schema could be sent to background page too.\n\n> Probably it's possible to change `Object.prototype.apply` to something that attacker wants and sent to background page + bypass `JSON.stringify` with additional getters/setters/property config. I'll check this attack vector too.",
      "automated_response": false,
      "created_at": "2018-08-04T03:11:50.837Z",
      "updated_at": "2018-08-04T03:11:50.837Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3141566,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Sorry, I forgot that the extension's `id` is static and assigned by Chrome marketplace. I'll submit another report if a page could connect to background page from `*.grammarly.com`. ",
      "automated_response": false,
      "created_at": "2018-08-04T22:12:21.428Z",
      "updated_at": "2018-08-04T22:12:21.428Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3154461,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "Hi @metnew,\n\nThanks for your submission! This appears to be reproducible, but we need to check further with the product team to see if this is an issue they intend to fix. If not, it's possible this issue will be closed accordingly. We are still marking as triaged to indicate we've processed your issue and are looking into it further. Thanks for your patience.\n\nBest regards,\n@chessmast3r ",
      "automated_response": false,
      "created_at": "2018-08-07T09:23:06.988Z",
      "updated_at": "2018-08-07T09:23:06.988Z",
      "actor": {
        "username": "chessmast3r",
        "cleared": false,
        "verified": false,
        "url": "/chessmast3r",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/220/459/6b3c5fca9df9cde7fe36b55238b13d2cea86ea80_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3155756,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@chessmast3r I don't understand why this issue could be closed. The patch is easy - just remove `_fetch` from the `p.tracker.gnar` object -> attacker can't call `fetch` from the extension with own args.",
      "automated_response": false,
      "created_at": "2018-08-07T15:08:00.611Z",
      "updated_at": "2018-08-07T15:08:00.611Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3159426,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BountyAwarded",
      "message": "@metnew, we do appreciate your efforts and the time you invested into our extension code which allowed you to discover this critical vulnerability. We're doubling the bonus as the extension is our focus area and we would appreciate your further help and closer cooperation on extension vulnerability testing.",
      "automated_response": false,
      "created_at": "2018-08-08T09:12:04.208Z",
      "updated_at": "2018-08-08T09:12:04.208Z",
      "actor": {
        "url": "/grammarly",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/746/a2bf7f90c683af5214fcc74c1df6804286ee97ce_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Grammarly"
        }
      },
      "bounty_amount": "1400.0",
      "bonus_amount": "1600.0",
      "bounty_currency": "usd",
      "genius_execution_id": null,
      "team_handle": "grammarly",
      "collaborator": {
        "username": "metnew",
        "url": "/metnew"
      }
    },
    {
      "id": 3159430,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "@metnew This is now closed and released per my records. Please, validate at your end",
      "automated_response": false,
      "created_at": "2018-08-08T09:12:42.797Z",
      "updated_at": "2018-08-08T09:12:42.797Z",
      "actor": {
        "username": "andriy_derevyanko",
        "cleared": false,
        "verified": false,
        "url": "/andriy_derevyanko",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/232/429/8d025f5ca823ddfa62ce186084ff79b3e72542ed_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "metnew",
        "url": "/metnew"
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3162947,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @grammarly \nThanks for the great bounty!\n@andriy_derevyanko  - Yeah, the issue was fixed. Thanks for the quick resolution. \n> I hope that's only the beginning 😈",
      "automated_response": false,
      "created_at": "2018-08-08T19:09:50.348Z",
      "updated_at": "2018-08-08T19:09:50.348Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3184387,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@grammarly @andriy_derevyanko  I think it is possible to send not only \"blind\" XHRs, because of this header in `fetch` polyfill:\n``` js\nurl: \"responseURL\"in i ? i.responseURL : /^X-Request-URL:/m.test(i.getAllResponseHeaders()) ? i.getResponseHeader(\"X-Request-URL\") : void 0\n```\n\nAttacker just needs to include own server url to `X-Request-URL` header. \n\nSome additional materials:\n1. https://github.com/github/fetch/issues/443#issuecomment-262225338\n\n> May it increases bounty somehow if I'll attach a PoC?)",
      "automated_response": false,
      "created_at": "2018-08-13T01:51:52.779Z",
      "updated_at": "2018-08-13T01:51:52.779Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3186547,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@metnew thanks for extra information. Let us, please, review this case internally and I'll revert back to you with the response.",
      "automated_response": false,
      "created_at": "2018-08-13T09:43:51.210Z",
      "updated_at": "2018-08-13T09:43:51.210Z",
      "actor": {
        "username": "andriy_derevyanko",
        "cleared": false,
        "verified": false,
        "url": "/andriy_derevyanko",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/232/429/8d025f5ca823ddfa62ce186084ff79b3e72542ed_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3189936,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I've made a deeper research and it seems impossible to redirect response using Origin/Host headers :(\n@andriy_derevyanko ",
      "automated_response": false,
      "created_at": "2018-08-14T01:21:39.257Z",
      "updated_at": "2018-08-14T01:21:39.257Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3190913,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@andriy_derevyanko Also, I've read your review on this report [thanks :)]. However, H1 team didn't disclose  Grammarly team contact details. I'd be glad if you can send me details by email: ██████",
      "automated_response": false,
      "created_at": "2018-08-14T08:32:36.684Z",
      "updated_at": "2019-08-01T16:44:23.408Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3193549,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@metnew thanks for your contact. I also have them from Git – will drop you an email today.\nWith regards to this ticket. Are we considering it closed, right?",
      "automated_response": false,
      "created_at": "2018-08-14T09:38:46.783Z",
      "updated_at": "2018-08-14T09:38:46.783Z",
      "actor": {
        "username": "andriy_derevyanko",
        "cleared": false,
        "verified": false,
        "url": "/andriy_derevyanko",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/232/429/8d025f5ca823ddfa62ce186084ff79b3e72542ed_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3193556,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Yeah, closed",
      "automated_response": false,
      "created_at": "2018-08-14T09:44:10.142Z",
      "updated_at": "2018-08-14T09:44:10.142Z",
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3806352,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2018-12-11T15:49:03.018Z",
      "updated_at": "2018-12-11T15:49:03.018Z",
      "first_to_agree": true,
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3830762,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportTitleUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2018-12-15T03:25:44.991Z",
      "updated_at": "2018-12-15T03:25:44.991Z",
      "additional_data": {
        "old_title": "\"Universal CSRF\" through extension (XHR to any origin with cookies) + control over `p.tracker.gnar` + [im]possible UXSS",
        "new_title": "Handling of `tracking` command allows making arbitrary requests with user's cookies"
      },
      "actor": {
        "username": "gr_triage",
        "cleared": false,
        "verified": false,
        "url": "/gr_triage",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 3942297,
      "is_internal": false,
      "editable": false,
      "type": "Activities::CancelledDisclosureRequest",
      "message": "@vladimir_suslenko per our agreement, we are postponing the disclosure to clarify all the details (external communication and legal aspects). ",
      "automated_response": false,
      "created_at": "2019-01-08T12:55:28.392Z",
      "updated_at": "2019-01-08T12:55:28.392Z",
      "actor": {
        "username": "andriy_derevyanko",
        "cleared": false,
        "verified": false,
        "url": "/andriy_derevyanko",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/232/429/8d025f5ca823ddfa62ce186084ff79b3e72542ed_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 5445035,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-07-27T17:33:33.820Z",
      "updated_at": "2019-07-27T17:33:33.820Z",
      "first_to_agree": true,
      "actor": {
        "username": "metnew",
        "cleared": false,
        "verified": false,
        "url": "/metnew",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/544/baa5f77ccb2413a76bf96b3253ba88024ab50a33_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 5471313,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportTitleUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2019-07-31T15:14:53.902Z",
      "updated_at": "2019-07-31T15:14:53.902Z",
      "additional_data": {
        "old_title": "Handling of `tracking` command allows making arbitrary requests with user's cookies",
        "new_title": "Handling of `tracking` command allows making arbitrary blind requests with user's cookies from Grammarly Extension's origin"
      },
      "actor": {
        "username": "gr_triage",
        "cleared": false,
        "verified": false,
        "url": "/gr_triage",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 5480761,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-08-01T15:59:18.461Z",
      "updated_at": "2019-08-01T15:59:18.461Z",
      "actor": {
        "username": "gr_triage",
        "cleared": false,
        "verified": false,
        "url": "/gr_triage",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    },
    {
      "id": 5480762,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-08-01T15:59:18.819Z",
      "updated_at": "2019-08-01T15:59:18.819Z",
      "actor": {
        "username": "gr_triage",
        "cleared": false,
        "verified": false,
        "url": "/gr_triage",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "grammarly"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}