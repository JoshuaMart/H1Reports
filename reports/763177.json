{
  "id": 763177,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83NjMxNzc=",
  "url": "https://hackerone.com/reports/763177",
  "title": "User can link non-public file attachments, leading to file disclose on edit by higher-privileged user",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-12-22T12:58:26.335Z",
  "submitted_at": "2019-12-22T12:58:26.335Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "foobar7",
    "url": "/foobar7",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/197/817/efb62be6777043aba724654aa495ebeccabb9e72_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 18,
    "url": "https://hackerone.com/phabricator",
    "handle": "phabricator",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [

    ],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Phabricator",
      "twitter_handle": "phabricator",
      "website": "http://phacility.com/phabricator/",
      "about": "Phabricator is a collection of open source web applications that help software companies build better software."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-06-26T18:25:25.860Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2022-05-27T18:25:18.766Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "CVSS\n----\n\nMedium 6.5 [CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N](https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N)\n\nDescription\n-----------\n\nUploaded files can be linked to from anywhere by referencing their ID. If the user viewing the reference to the file has permission to access the file, it will be rendered. Otherwise, the reference will be displayed as text.\n\nIf a user references a file from a private location in a public location, the file permissions will silently be updated and the file will be made available publicly as well (if the user has permission to access the file; otherwise, permissions will remain unchanged).\n\nThis behavior results in problems when a higher-privileged user edits the post of a lower-privileged user which contains a reference to a private file. The file will be disclosed publicly, without the user intending this or being aware of it.\n\nPOC\n---\n\nSetup:\n\n- Create a private task (task is just one example, all components are affected by this): `/maniphest/` -> create task -> Visible to / Editable by: administrators (or some other high-privileged group).\n- Add an attachment: leave a comment -> Upload file. Note the file ID.\n\nAttack:\n\n- With a lower-privileged user, create a public task (or some other component): `/maniphest/` -> create task -> Include a reference to the private file in the description, eg `{F27}`. Include some formatting mistakes, typos, profanity, etc to entice a higher-privileged user into editing the post.\n- Wait for a higher-privileged user viewing the task. The user will see the file attachment resolve normally, edit the task and fix the formatting error. Nothing will indicate that a private file has been made public.\n- After the user has edited the post, the file will be available to the lower-privileged user.\n\n## Impact\n\ndisclosure of private file attachments when a user with access to the attachment edits a post of a user without access to it.",
  "bounty_amount": "500.0",
  "formatted_bounty": "$500",
  "weakness": {
    "id": 65,
    "name": "Business Logic Errors"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2022-06-26T18:25:18.859Z",
  "allow_singular_disclosure_after": -39184613.06789214,
  "singular_disclosure_allowed": true,
  "vote_count": 11,
  "voters": [
    "dyls",
    "zy9ard3",
    "yassinek3ch",
    "polem4rch",
    "h4x0r_dz",
    "hotmuffin",
    "shivammusic",
    "menandro",
    "mrfaws",
    "amitwebx",
    "and 1 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 6608220,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "sorry, forgot \"mongoose\".",
      "automated_response": false,
      "created_at": "2019-12-22T13:01:42.488Z",
      "updated_at": "2019-12-22T13:01:42.488Z",
      "actor": {
        "username": "foobar7",
        "cleared": true,
        "verified": true,
        "url": "/foobar7",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/197/817/efb62be6777043aba724654aa495ebeccabb9e72_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 6608685,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Ah, thanks. I agree this behavior is a problem.\n\nOne possible change is to attach only *newly* mentioned files, similar to how `@username` mentions currently work. I think this should mostly work well in defusing the particular attack here, although it still leaves open a more narrow attack: the attacker creates a task with `{F12x34}` (an inactive file embed with an intentional error inside the text string) and complains to a high-privilege user that their embed doesn't work and they can't figure it out, enticing the high-privilege user to remove the obvious \"x\" and fix the file reference. This seems more difficult and less deniable, but might still be within the realm of plausibility. (There's also a similar \"help me create a task\" / \"chosen comment text\" attack, see below.)\n\nA more aggressive change might be to prompt users on submit, before attaching files (\"These files will be newly attached by your edit, are you sure?\"). I worry that this would be a false positive about 99.99% of the time, though.\n\nWe could reduce the false positive rate by submitting a list of known intended attachments. If the user drags and drops a file into a text area, we don't need to prompt them for *that* file when they submit. We'd still have ambiguity if they copy/paste text with `{F123}` embeds, though. This is rare, but enticing attack-edits are presumably *very* rare, so it would probably still be a false positive 99% of the time.\n\nAn even more narrow approach might be to prompt for: newly added files; that weren't explicitly attached; that the previous editor does not have permission to see. But this feels like it's already too far down the road of obscure complexity.\n\nEven if we add \"previous editor\" rules, the attacker can still perform the attack with a different story: \"When I try to create a new task with summary X, it gives me an error.\", where X is some block of text including a file embed. No \"previous editor\" rule will work in this case. I also think we can *only* defuse this attack by prompting to attach.\n\nThat leaves us with a mostly-false-positive roadblock prompt. Not great. And if the default action is \"Continue\" and enabled, this probably won't defuse the attack, since everyone will just mash \"Continue\" instantly once they learn the dialog, so this mostly-false-positive dialog has to actually stop users long enough that they read it (e.g., require them to check off each file to attach or something). Yuck.\n\nDo you have any brighter ideas here? I don't think this prompt is the end of the world or anything, but it's shaping up to be a really ugly flow that probably isn't ultimately all that effective, and just pushes responsibility onto the user making the mistake (\"You explicitly clicked a 'Yes' button so it's your fault.\") rather than feeling like a really solid fix for it. A \"Yes, I Want to do a Dangerous Thing\" button is still probably a step forward, but when the thing is not dangerous 99% of the time I'm not confident it will actually improve outcomes.\n\nAn additional ugliness is that we can't easily prompt users on CLI workflows like revision creation. I don't see an obvious path to defusing the similar \"I can't create a revision from the CLI using arc with chosen summary plaintext XYZ, can you help me?\" attack.\n\nOne thing I can think of to mitigate the badness on web flows is that we can put some kind of helpful Clippy widget on-screen warning you that you're going to hit the dialog (\"You're attaching new files, is that what you want? (Yep, I meant to attach F123) (No, I am being tricked)\"). But this isn't helpful for CLI flows and probably isn't realistic to fit into the UI on mobile.\n\nWe could also step back and just say \"the text `{F123}` doesn't do anything any more without explicit intent\", but this feature seems generally useful/valuable to me and I'm very hesitant to abandon it. I use it a lot today (although mostly for getting screenshots into revisions, and we could find some other approach for that) and believe being able to (for example) copy/paste task descriptions or sections of wiki pages and have files preserved is useful.\n\nI suppose another possibility is to build an \"attachment approval queue\". This \"solves\" the CLI flow and would let the roadblock dialog just say \"decide later\", so the default action wasn't destructive. But what a mess.",
      "automated_response": false,
      "created_at": "2019-12-22T15:30:17.678Z",
      "updated_at": "2019-12-22T15:30:17.678Z",
      "actor": {
        "username": "epriestley",
        "cleared": false,
        "verified": false,
        "url": "/epriestley",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 6610244,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi @epriestley,\n\nthanks for the quick and in-depth response!\n\nI like the idea of making the file permission changes explicit and transparent, but I agree that it may also create problems in these situations.\n\nI haven't looked at the code itself, so I'm not sure how easy this would be to implement. But one step to mitigate the issue might be to base the permission changes of a file on the original poster, not the person performing the action.\n\nSo right now we have:\n\n- user creates/edits task with reference to a file. \n- If the user doing this has permission to access the file, the file permission will be changed; otherwise nothing happens.\n\nIt might be better if the permission of the original poster were used to decide this, not the user performing the action. This would solve the issue I laid out in my report.\n\nImportant: this would also need to be enforced on quotes! Because currently, quoting a text containing a reference to a file will also change the file permissions. \n\nIt might also be better to base the decision to show or not show a file not on the permission of the user viewing the task, but on the permission of the user who created the task or the relationship between the task and the file. \nThis avoids a user referencing a file and saying 'the attachment doesn't work. Can you access the file and add it?'. The attacked user would see the file attached normally, might not be aware that it is a private file, and download and reupload it.\n\nI think that these two changes might mitigate against the most common attacks and would be a cleaner approach to file permissions and would avoid having a dialog that the user doesn't read but simply clicks through.\n\nBut this still leaves the 'please create this post for me' problem you pointed out.\n\nAnd another problem of the implicit permission changes is that a file only ever gets more permissions. So if a user references a private file, thus making it public, and then deletes that reference, the file will remain public.\n\nI'm not sure how common it is for users to actually link a private file to a more public task. If it isn't actually *that* common, then a dialog (eg 'this will permanently change the permission of the file and make it more broadly accessible.') in addition to the above suggestion doesn't seem that bad and is also the best I could come up with to cover the remaining cases.\n\nI can't really speak to the CLI issue, as I haven't looked at it yet and don't know how it's commonly used. A queue sounds like a possible solution, but rather complex. Simply not accepting (new) file references via CLI might also be an approach, but might limit functionality too much.\n\nBest,\nFoobar7",
      "automated_response": false,
      "created_at": "2019-12-23T08:00:15.474Z",
      "updated_at": "2019-12-23T08:00:15.474Z",
      "actor": {
        "username": "foobar7",
        "cleared": true,
        "verified": true,
        "url": "/foobar7",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/197/817/efb62be6777043aba724654aa495ebeccabb9e72_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 6828597,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "(Just to follow up here, my wife went into labor a couple hours after this was reported. Everything went well with the delivery, but it's going to take me a bit longer to dig through my queue and move this forward again.)",
      "automated_response": false,
      "created_at": "2020-01-21T15:47:53.882Z",
      "updated_at": "2020-01-21T15:47:53.882Z",
      "actor": {
        "username": "epriestley",
        "cleared": false,
        "verified": false,
        "url": "/epriestley",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 6837187,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "no problem, and thanks for the update! Congratz to you and your wife! :)\n",
      "automated_response": false,
      "created_at": "2020-01-22T08:55:51.331Z",
      "updated_at": "2020-01-22T08:55:51.331Z",
      "actor": {
        "username": "foobar7",
        "cleared": true,
        "verified": true,
        "url": "/foobar7",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/197/817/efb62be6777043aba724654aa495ebeccabb9e72_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 10756916,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "HI @epriestley,\n\nI hope you are doing well!\n\nSince it's been a while, I wanted to check if this is still on your radar. Do you have an update?\n\nBest,\nFoobar7",
      "automated_response": false,
      "created_at": "2021-02-23T17:01:39.307Z",
      "updated_at": "2021-02-23T17:01:39.307Z",
      "actor": {
        "username": "foobar7",
        "cleared": true,
        "verified": true,
        "url": "/foobar7",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/197/817/efb62be6777043aba724654aa495ebeccabb9e72_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 10757555,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "This is still on my radar, but progress has obviously been pretty slow. I still expect to fix this.\n\nThis has moved forward a little bit: I recently filed <https://secure.phabricator.com/T13603> (currently private) upstream to formalize this issue (it basically just describes everything here), as this likely has some overlap with <https://secure.phabricator.com/T13602> (both imply technical changes to support prompts in API-driven workflows).",
      "automated_response": false,
      "created_at": "2021-02-23T17:42:11.240Z",
      "updated_at": "2021-02-23T17:42:11.240Z",
      "actor": {
        "username": "epriestley",
        "cleared": false,
        "verified": false,
        "url": "/epriestley",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 14986174,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hi,\n\nit's been almost 3 years since I opened this report, so I thought I'd ask for an update. Is there any progress on a fix? And is this still eligible for a bounty?\n\nBest,\nFoobar7",
      "automated_response": false,
      "created_at": "2022-01-11T07:57:56.593Z",
      "updated_at": "2022-01-11T07:57:56.593Z",
      "actor": {
        "username": "foobar7",
        "cleared": true,
        "verified": true,
        "url": "/foobar7",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/197/817/efb62be6777043aba724654aa495ebeccabb9e72_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 16890053,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "I believe this is now resolved in the 2022 Week 21 release, see <https://secure.phabricator.com/T13683> for more information.\n\nThis fix leaves a lot of rough edges in Phabricator's behavior (rather than all of the layers of nuance I discuss above, a lot of these workflows are now simply broken), but a later report by another researcher that found a more severe vulnerability in this general vein motivated me to at least stop the bleeding. The attack described here should no longer be possible, in any case.",
      "automated_response": false,
      "created_at": "2022-05-27T18:20:14.058Z",
      "updated_at": "2022-05-27T18:20:14.058Z",
      "actor": {
        "username": "epriestley",
        "cleared": false,
        "verified": false,
        "url": "/epriestley",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "foobar7",
        "url": "/foobar7"
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 16890081,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BountyAwarded",
      "message": "This attack is severe, but requires a significant amount of (likely unwitting) cooperation on the part of a user with higher privileges, and leaves a significant \"paper trail\" in the transaction log. It's easy to imagine a clever attacker could exploit this or use it as part of a chain of attacks, but it is several steps removed from being a magic \"view any file\" button.",
      "automated_response": false,
      "created_at": "2022-05-27T18:24:53.460Z",
      "updated_at": "2022-05-27T18:24:53.460Z",
      "actor": {
        "url": "/phabricator",
        "ibb": true,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "profile": {
          "name": "Phabricator"
        }
      },
      "bounty_amount": "500.0",
      "bonus_amount": "0.0",
      "bounty_currency": "usd",
      "genius_execution_id": null,
      "team_handle": "phabricator",
      "collaborator": {
        "username": "foobar7",
        "url": "/foobar7"
      }
    },
    {
      "id": 16890083,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "I've described the shape of this attack in public release documents, so this can be disclosed at any time.",
      "automated_response": false,
      "created_at": "2022-05-27T18:25:18.784Z",
      "updated_at": "2022-05-27T18:25:18.784Z",
      "first_to_agree": true,
      "actor": {
        "username": "epriestley",
        "cleared": false,
        "verified": false,
        "url": "/epriestley",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    },
    {
      "id": 17292055,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2022-06-26T18:25:25.907Z",
      "updated_at": "2022-06-26T18:25:25.907Z",
      "actor": {
        "url": "/phabricator",
        "ibb": true,
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "profile": {
          "name": "Phabricator"
        }
      },
      "genius_execution_id": null,
      "team_handle": "phabricator"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}