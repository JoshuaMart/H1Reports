{
  "id": 506654,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDY2NTQ=",
  "url": "https://hackerone.com/reports/506654",
  "title": "[typeorm] SQL Injection",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2019-03-08T07:49:04.488Z",
  "submitted_at": "2019-03-08T07:49:04.488Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "verichains",
    "url": "/verichains",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [

    ],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [

  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-04-02T04:25:24.379Z",
  "bug_reporter_agreed_on_going_public_at": "2019-04-02T04:25:24.298Z",
  "team_member_agreed_on_going_public_at": "2019-03-31T01:59:41.403Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report SQL Injection in typeorm.\nIt allows reading data from database.\n\n# Module\n\n**module name:** typeorm\n**version:** 0.2.14\n**npm page:** `https://www.npmjs.com/package/typeorm`\n\n## Module Description\n\n> TypeORM is an ORM that can run in NodeJS, Browser, Cordova, PhoneGap, Ionic, React Native, NativeScript, Expo, and Electron platforms and can be used with TypeScript and JavaScript (ES5, ES6, ES7, ES8). Its goal is to always support the latest JavaScript features and provide additional features that help you to develop any kind of application that uses databases - from small applications with a few tables to large scale enterprise applications with multiple databases.\n\n> TypeORM supports both Active Record and Data Mapper patterns, unlike all other JavaScript ORMs currently in existence, which means you can write high quality, loosely coupled, scalable, maintainable applications the most productive way.\n\n\n\n## Module Stats\n\n> Replace stats below with numbers from npmâ€™s module page:\n\n79,749 downloads in the last week\n\n# Vulnerability\n\n## Vulnerability Description\n\nMethod `escapeQueryWithParameters` of `MysqlDriver.ts` directly return value from parameter if it is a function without escaping which allow attacker to perform SQL Injection in specialized context.\nhttps://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/src/driver/mysql/MysqlDriver.ts#L387\n\n```ts\n            if (value instanceof Function) {\n                return value();\n\n            } else {\n                escapedParameters.push(value);\n                return \"?\";\n            }\n```\n\nI'm not sure if this is intended or not, there's no information in the document, if someone used this pattern (value provided by a function callback) it will lead to sql injection attack.\n\n\n## Steps To Reproduce:\n\n- Create a new test typeorm package\n```bash\nnpx typeorm init --name Test --database mysql\n```\n\n- Edit `ormconfig.json` for local credentials.\n\nModify `index.ts` to test the injection:\n\n```ts\nimport \"reflect-metadata\";\nimport {createConnection} from \"typeorm\";\nimport {User} from \"./entity/User\";\n\ncreateConnection().then(async connection => {\n\n    console.log(\"Inserting a new user into the database...\");\n\n    for(var i=0;i<10;i++) {\n        const user = new User();\n        user.firstName = `Timber ${i}`;\n        user.lastName = \"Saw\";\n        user.age = 25 + i;\n        await connection.manager.save(user);\n        console.log(\"Saved a new user with id: \" + user.id);\n    }\n\n    const repo = connection.getRepository(User);\n\n    console.log(await repo.createQueryBuilder().where('firstName = :name', {name: () => \"-1 or firstName=0x54696d6265722033\"}).getOne());\n\n    process.exit(0);\n}).catch(error => console.log(error));\n```\n(0x54696d6265722033 is \"Timber 3\")\n\nOutput:\n```\nInserting a new user into the database...\nUser { id: 5, firstName: 'Timber 3', lastName: 'Saw', age: 28 }\n```\n\n## Supporting Material/References:\n\n> State all technical information about the stack where the vulnerability was found\n\n- MacOs\n- NodeJS v8.12.0\n- npm 6.4.1\n\n# Wrap up\n\n> Select Y or N for the following statements:\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n## Impact\n\nAllow attackers to perform SQL Injection attacks.",
  "weakness": {
    "id": 67,
    "name": "SQL Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [

  ],
  "allow_singular_disclosure_at": "2019-04-30T01:59:41.508Z",
  "allow_singular_disclosure_after": -138865497.03982392,
  "singular_disclosure_allowed": true,
  "vote_count": 15,
  "voters": [
    "khizer47",
    "jbreton",
    "rmendelovits",
    "adnanslef",
    "bd9db035bc51541980bcd85",
    "hdrnn",
    "proserpina",
    "tbillar",
    "butrint",
    "cra3y12",
    "and 5 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 8.6,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 6411,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "typeorm",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [

    ],
    "assignable_team_member_groups": [

    ]
  },
  "activities": [
    {
      "id": 4283710,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Hello,\nThanks for reporting this to us. Someone will quickly look at this report and triage it.",
      "automated_response": true,
      "created_at": "2019-03-08T07:49:10.150Z",
      "updated_at": "2019-03-08T07:49:10.150Z",
      "actor": {
        "username": "vdeturckheim_dev",
        "cleared": false,
        "verified": false,
        "url": "/vdeturckheim_dev",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4286795,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thanks for reporting this issue.\n\nI was able to reproduce and confirm the issue as you described and will triage this report as a vulnerability.\n\nI invited the package maintainer to this issue.\n",
      "automated_response": false,
      "created_at": "2019-03-08T16:49:47.965Z",
      "updated_at": "2019-03-08T16:49:47.965Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4286806,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugTriaged",
      "message": "",
      "automated_response": false,
      "created_at": "2019-03-08T16:50:16.550Z",
      "updated_at": "2019-03-08T16:50:16.550Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4286820,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thank you!",
      "automated_response": false,
      "created_at": "2019-03-08T16:51:31.143Z",
      "updated_at": "2019-03-08T16:51:31.143Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4287380,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ExternalUserJoined",
      "message": "",
      "automated_response": false,
      "created_at": "2019-03-08T18:26:26.132Z",
      "updated_at": "2019-03-08T18:26:26.132Z",
      "actor": {
        "username": "pleerock",
        "cleared": false,
        "verified": false,
        "url": "/pleerock",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4287481,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Thank you for your report. It is by design. Function syntax, e.g. `() => string` is used to inject sql statements across your code / into your final sql string. It is supposed to bring sql support in the place It is by design. E.g. `{ name: 'safe-sql-string' }` is injection-free, but `{ name: () => 'unsafe-sql-string' }` isn't injection free and used to build sql strings. This particular syntax doesn't make sense in query builder (just like using function in there) but it does in some different places, and this conception just followed by query builder.",
      "automated_response": false,
      "created_at": "2019-03-08T18:38:02.440Z",
      "updated_at": "2019-03-08T18:38:25.171Z",
      "actor": {
        "username": "pleerock",
        "cleared": false,
        "verified": false,
        "url": "/pleerock",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4287837,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@pleerock Thanks for the quick response.\n\nI couldn't find any tests for escapeQueryWithParameters but I did find this documentation on its API.\n\n```\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n```\nhttps://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/src/driver/mysql/MysqlDriver.ts#L368\n\nThe comment above and the function name containing the word `escapeQuery` would make me think that this function escapes queries.\n\n I know you said that this is \"by design\" but that isn't clear from the the source code, tests or documentation.\n\nWe will continue to triage this as a vulnerability. \n",
      "automated_response": false,
      "created_at": "2019-03-08T19:24:12.618Z",
      "updated_at": "2019-03-08T19:24:12.618Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4288686,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Your resolution on continuing this to triage as a vulnerability based on the provided arguments is doubtful.\n\nBased on your arguments first thing I thought on how to resolve this issue is to append additional docs to the escapeQueryWithParameters method. But it won't change anything, because:\n\n* this method itself isn't publicly used a lot, its hard for a user to get to this method and read its docs. By isn't used publicly I mean 99% of users most probably won't ever use this method directly.\n* its being supporting a function that leads to sql instead of escaping is an implementation detail (treat it as something that still allows you to use sql in some your exceptional scenarios), its name can't be `escapeQueryButResolveFunctionSpecificallyAndAlsoCoverXandYExceptionalScenarios`.\n* also what if it was a nameless function? It's not right to make a final thoughts just based on a function name.\n* code itself is a documentation, what if it was missing documentation block at all just like any other lib.\n\nThis feature is covered many times in github issues (and github issues is another source of documentation), here is example on how this can be used:\n\n```ts\ncreateQueryBuilder()\n    .update({\n          name: 'Timber', // this one is escaped\n          age: () => `age + 1` // this one isn't and its because we have a specific, but very important use case. We want to just increment age, but we can't resolve it using escaped parameter\n    })\n```",
      "automated_response": false,
      "created_at": "2019-03-08T20:35:14.585Z",
      "updated_at": "2019-03-08T20:35:14.585Z",
      "actor": {
        "username": "pleerock",
        "cleared": false,
        "verified": false,
        "url": "/pleerock",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4288902,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@pleerock \n\nThanks for the additional information.\n\nHow about updating this section of the docs with an example showing the function syntax and explaining that this is a way to opt out of escaping?\n\nhttps://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/docs/select-query-builder.md#using-parameters-to-escape-data",
      "automated_response": false,
      "created_at": "2019-03-08T21:19:01.801Z",
      "updated_at": "2019-03-08T21:19:01.801Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4289533,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I agree with @ronperris, I think it's better to document within query builder section, in complex codebase people can by mistake provide a getter function and it still work for numeric input so they do not realize anything, even if they read all the document on https://typeorm.io/.",
      "automated_response": false,
      "created_at": "2019-03-09T00:22:24.372Z",
      "updated_at": "2019-03-09T00:22:24.372Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4289590,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "I think you can do like DB::raw in Laravel for this purpose\nhttps://laravel.com/docs/5.8/queries#raw-expressions\nSo instead of using function you can use a typed expression like:\n\n```ts\ncreateQueryBuilder()\n    .update({\n          name: 'Timber', // this one is escaped\n          age: Raw(`age + 1`)\n    })\n```\n\nThis way will help coder know exactly what they do.",
      "automated_response": false,
      "created_at": "2019-03-09T00:48:07.558Z",
      "updated_at": "2019-03-09T00:48:07.558Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4291944,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@h3dx thanks for your suggestion, but Laravel has its own syntax and TypeORM has its own. But we already have Raw operator that behaves this way but in a different place, we might use it everywhere in the future.\n\n@ronperris I decided to remove this functionality from SelectQueryBuilder since it doesn't make a lot sense, however this functionality still persist in the InsertQueryBuilder and UpdateQueryBuilder. You can take a look changes [here](https://github.com/typeorm/typeorm/pull/3787). I'm going to release a new version in next few days.",
      "automated_response": false,
      "created_at": "2019-03-09T17:23:18.571Z",
      "updated_at": "2019-03-09T17:23:18.571Z",
      "actor": {
        "username": "pleerock",
        "cleared": false,
        "verified": false,
        "url": "/pleerock",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4292007,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Seems great @pleerock.\nFor the Raw operator i mean something like `value instanceof Raw` instead of `value instanceof Function` and `Raw('expression')` instead of `()=>'expression'` which is minimal that is compatible with your Function approach and also verbose enough so that developer must sure what they are doing. Anyway, your approach also solved these, that's great.\n",
      "automated_response": false,
      "created_at": "2019-03-09T17:53:02.366Z",
      "updated_at": "2019-03-09T18:03:28.253Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4292027,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@h3dx yes I've got your point. Not sure it may already work (we already have Raw operator). But anyway function operator will persist for now. ",
      "automated_response": false,
      "created_at": "2019-03-09T18:01:47.494Z",
      "updated_at": "2019-03-09T18:01:47.494Z",
      "actor": {
        "username": "pleerock",
        "cleared": false,
        "verified": false,
        "url": "/pleerock",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4292100,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportTitleUpdated",
      "message": "",
      "automated_response": false,
      "created_at": "2019-03-09T18:36:38.087Z",
      "updated_at": "2019-03-09T18:36:38.087Z",
      "additional_data": {
        "old_title": "SQL injection in npm package typeorm",
        "new_title": "[typeorm] SQL Injection"
      },
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4329854,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@ronperris PR with docs is merged and new version is released btw",
      "automated_response": false,
      "created_at": "2019-03-15T12:25:12.900Z",
      "updated_at": "2019-03-15T12:25:12.900Z",
      "actor": {
        "username": "pleerock",
        "cleared": false,
        "verified": false,
        "url": "/pleerock",
        "profile_picture_urls": {
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4344816,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "Great work @pleerock, can we disclosure now?",
      "automated_response": false,
      "created_at": "2019-03-18T11:06:03.149Z",
      "updated_at": "2019-03-18T11:06:03.149Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4376789,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@ronperris any update?",
      "automated_response": false,
      "created_at": "2019-03-23T08:30:09.978Z",
      "updated_at": "2019-03-23T08:30:09.978Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426042,
      "is_internal": false,
      "editable": false,
      "type": "Activities::BugResolved",
      "message": "Thank you for the time and effort you put into this report and resolution @verichains and @pleerock. \n\nWe will be disclosing it shortly and requesting a CVE.",
      "automated_response": false,
      "created_at": "2019-03-30T17:12:16.715Z",
      "updated_at": "2019-03-30T17:12:16.715Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "reporter": {
        "username": "verichains",
        "url": "/verichains"
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426103,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@pleerock Can you point me to the PR that fixed the issue?",
      "automated_response": false,
      "created_at": "2019-03-30T17:29:29.662Z",
      "updated_at": "2019-03-30T17:29:29.662Z",
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426331,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@ronperris I think it's this one https://github.com/typeorm/typeorm/pull/3787, @pleerock added documenting and tests.",
      "automated_response": false,
      "created_at": "2019-03-30T19:46:43.559Z",
      "updated_at": "2019-03-30T19:46:43.559Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4426759,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-03-31T01:59:41.429Z",
      "updated_at": "2019-03-31T01:59:41.429Z",
      "first_to_agree": true,
      "actor": {
        "username": "ronperris",
        "cleared": false,
        "verified": false,
        "url": "/ronperris",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4440886,
      "is_internal": false,
      "editable": false,
      "type": "Activities::AgreedOnGoingPublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-04-02T04:25:24.324Z",
      "updated_at": "2019-04-02T04:25:24.324Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4440887,
      "is_internal": false,
      "editable": false,
      "type": "Activities::ReportBecamePublic",
      "message": "",
      "automated_response": false,
      "created_at": "2019-04-02T04:25:24.396Z",
      "updated_at": "2019-04-02T04:25:24.396Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    },
    {
      "id": 4876294,
      "is_internal": false,
      "editable": false,
      "type": "Activities::Comment",
      "message": "@ronperris any update with the CVE?",
      "automated_response": false,
      "created_at": "2019-05-19T19:35:24.020Z",
      "updated_at": "2019-05-19T19:35:24.020Z",
      "actor": {
        "username": "verichains",
        "cleared": false,
        "verified": false,
        "url": "/verichains",
        "profile_picture_urls": {
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
        },
        "hackerone_triager": false,
        "hackerone_employee": false
      },
      "genius_execution_id": null,
      "team_handle": "nodejs-ecosystem"
    }
  ],
  "activity_page_count": 1,
  "activity_page_number": 1,
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}